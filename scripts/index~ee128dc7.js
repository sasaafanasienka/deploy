var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequirea5ce"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequirea5ce"] = parcelRequire;
}


parcelRequire("a1TJc");
parcelRequire("h90tK");
parcelRequire("1lES0");
parcelRequire("ePdDe");
parcelRequire("epDfQ");


var $9b0vI = parcelRequire("9b0vI");
$9b0vI.default.use([
    $9b0vI.Navigation
]);
const $d72e5cc172a8533b$var$awardsSlider = new $9b0vI.default('.awards__slider', {
    slideClass: 'awards__slider-card',
    slidesPerView: 2,
    spaceBetween: 10,
    navigation: {
        nextEl: '.awards__slider-button--next',
        prevEl: '.awards__slider-button--prev'
    }
});



var $9b0vI = parcelRequire("9b0vI");
const $5eae2ad5104e347c$export$d07517a676ce386f = {
    lg: 1024,
    md: 811,
    sm: 570,
    xs: 400
};


const { lg: $78015d6a647b3213$var$lg , md: $78015d6a647b3213$var$md , sm: $78015d6a647b3213$var$sm ,  } = {
    ...$5eae2ad5104e347c$export$d07517a676ce386f
}; // lg, md, sm, xs,
$9b0vI.default.use([
    $9b0vI.Navigation,
    $9b0vI.Pagination
]);
const $78015d6a647b3213$var$thriveSlider = new $9b0vI.default('.thrive-slider', {
    spaceBetween: 20,
    slideClass: 'thrive-slider__slide',
    navigation: {
        nextEl: '.thrive-slider__button-next',
        prevEl: '.thrive-slider__button-prev'
    },
    pagination: {
        el: '.thrive-slider__pagination',
        clickable: true
    },
    breakpoints: {
        // when window width is >= 0
        0: {
            slidesPerView: 1
        },
        // when window width is >= 570px
        [$78015d6a647b3213$var$sm]: {
            slidesPerView: 2
        },
        // when window width is >= 811px
        [$78015d6a647b3213$var$md]: {
            slidesPerView: 3
        },
        // when window width is >= 1024px
        [$78015d6a647b3213$var$lg]: {
            slidesPerView: 4
        }
    }
});


(function() {
    function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
    }
    var $parcel$global1 = typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof $parcel$global !== 'undefined' ? $parcel$global : {
    };
    var $parcel$modules = {
    };
    var $parcel$inits = {
    };
    var parcelRequire = $parcel$global1["parcelRequire10c2"];
    if (parcelRequire == null) {
        parcelRequire = function(id) {
            if (id in $parcel$modules) return $parcel$modules[id].exports;
            if (id in $parcel$inits) {
                var init = $parcel$inits[id];
                delete $parcel$inits[id];
                var module = {
                    id: id,
                    exports: {
                    }
                };
                $parcel$modules[id] = module;
                init.call(module.exports, module, module.exports);
                return module.exports;
            }
            var err = new Error("Cannot find module '" + id + "'");
            err.code = 'MODULE_NOT_FOUND';
            throw err;
        };
        parcelRequire.register = function register(id, init) {
            $parcel$inits[id] = init;
        };
        $parcel$global1["parcelRequire10c2"] = parcelRequire;
    }
    parcelRequire.register("39yCy", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $24bd1152069f16be$var$_arrayWithHoles;
        function $24bd1152069f16be$var$_arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
        }
    });
    parcelRequire.register("48W56", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $3044f689360a7ae4$var$_iterableToArray;
        function $3044f689360a7ae4$var$_iterableToArray(iter) {
            if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
        }
    });
    parcelRequire.register("e2o5b", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $a383eee3cc5c8216$var$_nonIterableRest;
        function $a383eee3cc5c8216$var$_nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
    });
    parcelRequire.register("P79m6", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $099a4f5b036599c6$var$_unsupportedIterableToArray;
        var $099a4f5b036599c6$var$_arrayLikeToArray = $099a4f5b036599c6$var$_interopRequireDefault(parcelRequire("2x4u2"));
        function $099a4f5b036599c6$var$_unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if (typeof o === "string") return $099a4f5b036599c6$var$_arrayLikeToArray.default(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === "Object" && o.constructor) n = o.constructor.name;
            if (n === "Map" || n === "Set") return Array.from(n);
            if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return $099a4f5b036599c6$var$_arrayLikeToArray.default(o, minLen);
        }
        function $099a4f5b036599c6$var$_interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
    });
    parcelRequire.register("2x4u2", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $1d82242d2635eb45$var$_arrayLikeToArray;
        function $1d82242d2635eb45$var$_arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length) len = arr.length;
            for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
            return arr2;
        }
    });
    parcelRequire.register("3ZmdS", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $2e784e95cf131a75$var$_arrayWithoutHoles;
        var $2e784e95cf131a75$var$_arrayLikeToArray = $2e784e95cf131a75$var$_interopRequireDefault(parcelRequire("2x4u2"));
        function $2e784e95cf131a75$var$_arrayWithoutHoles(arr) {
            if (Array.isArray(arr)) return $2e784e95cf131a75$var$_arrayLikeToArray.default(arr);
        }
        function $2e784e95cf131a75$var$_interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
    });
    parcelRequire.register("g45l2", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $bb2129226ca4f4f7$var$_nonIterableSpread;
        function $bb2129226ca4f4f7$var$_nonIterableSpread() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
    });
    parcelRequire.register("1W515", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $168f196aa4c5ef42$var$_defineProperty;
        function $168f196aa4c5ef42$var$_defineProperty(obj, key, value) {
            if (key in obj) Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
            else obj[key] = value;
            return obj;
        }
    });
    parcelRequire.register("9EtEN", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $706edabda06f6d7c$var$_typeof;
        function $706edabda06f6d7c$var$_typeof(obj) {
            return obj && obj.constructor === Symbol ? "symbol" : typeof obj;
        }
    });
    parcelRequire.register("iEMaY", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $d951552d271e3254$var$_setPrototypeOf;
        function $d951552d271e3254$var$_setPrototypeOf(o, p) {
            return $d951552d271e3254$var$setPrototypeOf(o, p);
        }
        function $d951552d271e3254$var$setPrototypeOf(o1, p1) {
            $d951552d271e3254$var$setPrototypeOf = Object.setPrototypeOf || function setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
            };
            return $d951552d271e3254$var$setPrototypeOf(o1, p1);
        }
    });
    parcelRequire.register("gfroT", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $bd434d387e58ef64$var$_isNativeReflectConstruct;
        function $bd434d387e58ef64$var$_isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct) return false;
            if (Reflect.construct.sham) return false;
            if (typeof Proxy === "function") return true;
            try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                }));
                return true;
            } catch (e) {
                return false;
            }
        }
    });
    parcelRequire.register("Ebg6X", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $078c7850e437db54$var$_getPrototypeOf;
        function $078c7850e437db54$var$_getPrototypeOf(o) {
            return $078c7850e437db54$var$getPrototypeOf(o);
        }
        function $078c7850e437db54$var$getPrototypeOf(o1) {
            $078c7850e437db54$var$getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
            };
            return $078c7850e437db54$var$getPrototypeOf(o1);
        }
    });
    parcelRequire.register("kLk40", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $f1d7c2a11219ec4d$var$_possibleConstructorReturn;
        var $f1d7c2a11219ec4d$var$_assertThisInitialized = $f1d7c2a11219ec4d$var$_interopRequireDefault(parcelRequire("fdlrY"));
        var $f1d7c2a11219ec4d$var$_typeOf = $f1d7c2a11219ec4d$var$_interopRequireDefault(parcelRequire("9EtEN"));
        function $f1d7c2a11219ec4d$var$_possibleConstructorReturn(self, call) {
            if (call && ($f1d7c2a11219ec4d$var$_typeOf.default(call) === "object" || typeof call === "function")) return call;
            return $f1d7c2a11219ec4d$var$_assertThisInitialized.default(self);
        }
        function $f1d7c2a11219ec4d$var$_interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
    });
    parcelRequire.register("fdlrY", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $b138b574226bad23$var$_assertThisInitialized;
        function $b138b574226bad23$var$_assertThisInitialized(self) {
            if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return self;
        }
    });
    parcelRequire.register("2EOD1", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $1ef696f747efedc1$var$_superPropBase;
        var $1ef696f747efedc1$var$_getPrototypeOf = $1ef696f747efedc1$var$_interopRequireDefault(parcelRequire("Ebg6X"));
        function $1ef696f747efedc1$var$_superPropBase(object, property) {
            while(!Object.prototype.hasOwnProperty.call(object, property)){
                object = $1ef696f747efedc1$var$_getPrototypeOf.default(object);
                if (object === null) break;
            }
            return object;
        }
        function $1ef696f747efedc1$var$_interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
    });
    parcelRequire.register("67N3T", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $4759742d692cf10f$var$_construct;
        var $4759742d692cf10f$var$_setPrototypeOf = $4759742d692cf10f$var$_interopRequireDefault(parcelRequire("iEMaY"));
        function $4759742d692cf10f$var$_construct(Parent, args, Class) {
            return $4759742d692cf10f$var$construct.apply(null, arguments);
        }
        function $4759742d692cf10f$var$_interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function $4759742d692cf10f$var$isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct) return false;
            if (Reflect.construct.sham) return false;
            if (typeof Proxy === "function") return true;
            try {
                Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                }));
                return true;
            } catch (e) {
                return false;
            }
        }
        function $4759742d692cf10f$var$construct(Parent1, args1, Class1) {
            if ($4759742d692cf10f$var$isNativeReflectConstruct()) $4759742d692cf10f$var$construct = Reflect.construct;
            else $4759742d692cf10f$var$construct = function construct(Parent, args, Class) {
                var a = [
                    null
                ];
                a.push.apply(a, args);
                var Constructor = Function.bind.apply(Parent, a);
                var instance = new Constructor();
                if (Class) $4759742d692cf10f$var$_setPrototypeOf.default(instance, Class.prototype);
                return instance;
            };
            return $4759742d692cf10f$var$construct.apply(null, arguments);
        }
    });
    parcelRequire.register("alnZ2", function(module, exports) {
        Object.defineProperty(module.exports, "__esModule", {
            value: true
        });
        module.exports.default = $787e78285373a968$var$_isNativeFunction;
        function $787e78285373a968$var$_isNativeFunction(fn) {
            return Function.toString.call(fn).indexOf("[native code]") !== -1;
        }
    });
    var $ffe0db64804a4aa2$exports = {
    };
    Object.defineProperty($ffe0db64804a4aa2$exports, "__esModule", {
        value: true
    });
    $ffe0db64804a4aa2$exports.default = $ffe0db64804a4aa2$var$_slicedToArray;
    var $ffe0db64804a4aa2$var$_arrayWithHoles = $ffe0db64804a4aa2$var$_interopRequireDefault(parcelRequire("39yCy"));
    var $ffe0db64804a4aa2$var$_iterableToArray = $ffe0db64804a4aa2$var$_interopRequireDefault(parcelRequire("48W56"));
    var $ffe0db64804a4aa2$var$_nonIterableRest = $ffe0db64804a4aa2$var$_interopRequireDefault(parcelRequire("e2o5b"));
    var $ffe0db64804a4aa2$var$_unsupportedIterableToArray = $ffe0db64804a4aa2$var$_interopRequireDefault(parcelRequire("P79m6"));
    function $ffe0db64804a4aa2$var$_slicedToArray(arr, i) {
        return $ffe0db64804a4aa2$var$_arrayWithHoles.default(arr) || $ffe0db64804a4aa2$var$_iterableToArray.default(arr, i) || $ffe0db64804a4aa2$var$_unsupportedIterableToArray.default(arr, i) || $ffe0db64804a4aa2$var$_nonIterableRest.default();
    }
    function $ffe0db64804a4aa2$var$_interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    var $5b6ed2e9038412d1$exports = {
    };
    Object.defineProperty($5b6ed2e9038412d1$exports, "__esModule", {
        value: true
    });
    $5b6ed2e9038412d1$exports.default = $5b6ed2e9038412d1$var$_toConsumableArray;
    var $5b6ed2e9038412d1$var$_arrayWithoutHoles = $5b6ed2e9038412d1$var$_interopRequireDefault(parcelRequire("3ZmdS"));
    var $5b6ed2e9038412d1$var$_iterableToArray = $5b6ed2e9038412d1$var$_interopRequireDefault(parcelRequire("48W56"));
    var $5b6ed2e9038412d1$var$_nonIterableSpread = $5b6ed2e9038412d1$var$_interopRequireDefault(parcelRequire("g45l2"));
    var $5b6ed2e9038412d1$var$_unsupportedIterableToArray = $5b6ed2e9038412d1$var$_interopRequireDefault(parcelRequire("P79m6"));
    function $5b6ed2e9038412d1$var$_toConsumableArray(arr) {
        return $5b6ed2e9038412d1$var$_arrayWithoutHoles.default(arr) || $5b6ed2e9038412d1$var$_iterableToArray.default(arr) || $5b6ed2e9038412d1$var$_unsupportedIterableToArray.default(arr) || $5b6ed2e9038412d1$var$_nonIterableSpread.default();
    }
    function $5b6ed2e9038412d1$var$_interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    var $41c9ae809ac54c1d$exports = {
    };
    Object.defineProperty($41c9ae809ac54c1d$exports, "__esModule", {
        value: true
    });
    $41c9ae809ac54c1d$exports.default = $41c9ae809ac54c1d$var$_objectSpread;
    var $41c9ae809ac54c1d$var$_defineProperty = $41c9ae809ac54c1d$var$_interopRequireDefault(parcelRequire("1W515"));
    function $41c9ae809ac54c1d$var$_objectSpread(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i] != null ? arguments[i] : {
            };
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function") ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
            ownKeys.forEach(function(key) {
                $41c9ae809ac54c1d$var$_defineProperty.default(target, key, source[key]);
            });
        }
        return target;
    }
    function $41c9ae809ac54c1d$var$_interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    var $e01b18da7d4ab2ee$export$f8bb2f9f4607ed91 = ".";
    var $e01b18da7d4ab2ee$export$9cb8e7b38dc3cece = Symbol("target");
    var $e01b18da7d4ab2ee$export$881b71df7abed909 = Symbol("unsubscribe");
    function $04083f3dd1f12eda$export$2191e61a810db5fc(value) {
        return value instanceof Date || value instanceof Set || value instanceof Map || value instanceof WeakSet || value instanceof WeakMap || ArrayBuffer.isView(value);
    }
    function $04083f3dd1f12eda$export$281bb0ec97352a76(value) {
        return (typeof value === "object" ? value === null : typeof value !== "function") || value instanceof RegExp;
    }
    var $5e962b6ebe07b898$export$2e2bcd8739ae039 = Array.isArray;
    var $9EtEN = parcelRequire("9EtEN");
    function $850f067001d2f1fe$export$2e2bcd8739ae039(value) {
        return (typeof value === "undefined" ? "undefined" : /*@__PURE__*/ $parcel$interopDefault($9EtEN)(value)) === "symbol";
    }
    var $3963067cca2bdb75$var$path = {
        after: function(path1, subPath) {
            if ($5e962b6ebe07b898$export$2e2bcd8739ae039(path1)) return path1.slice(subPath.length);
            if (subPath === "") return path1;
            return path1.slice(subPath.length + 1);
        },
        concat: function(path2, key) {
            if ($5e962b6ebe07b898$export$2e2bcd8739ae039(path2)) {
                path2 = /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(path2);
                if (key) path2.push(key);
                return path2;
            }
            if (key && key.toString !== undefined) {
                if (path2 !== "") path2 += $e01b18da7d4ab2ee$export$f8bb2f9f4607ed91;
                if ($850f067001d2f1fe$export$2e2bcd8739ae039(key)) return path2 + key.toString();
                return path2 + key;
            }
            return path2;
        },
        initial: function(path3) {
            if ($5e962b6ebe07b898$export$2e2bcd8739ae039(path3)) return path3.slice(0, -1);
            if (path3 === "") return path3;
            var index = path3.lastIndexOf($e01b18da7d4ab2ee$export$f8bb2f9f4607ed91);
            if (index === -1) return "";
            return path3.slice(0, index);
        },
        last: function(path4) {
            if ($5e962b6ebe07b898$export$2e2bcd8739ae039(path4)) return path4[path4.length - 1] || "";
            if (path4 === "") return path4;
            var index = path4.lastIndexOf($e01b18da7d4ab2ee$export$f8bb2f9f4607ed91);
            if (index === -1) return path4;
            return path4.slice(index + 1);
        },
        walk: function(path5, callback) {
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            if ($5e962b6ebe07b898$export$2e2bcd8739ae039(path5)) try {
                for(var _iterator = path5[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var key = _step.value;
                    callback(key);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                } finally{
                    if (_didIteratorError) throw _iteratorError;
                }
            }
            else if (path5 !== "") {
                var position = 0;
                var index = path5.indexOf($e01b18da7d4ab2ee$export$f8bb2f9f4607ed91);
                if (index === -1) callback(path5);
                else while(position < path5.length){
                    if (index === -1) index = path5.length;
                    callback(path5.slice(position, index));
                    position = index + 1;
                    index = path5.indexOf($e01b18da7d4ab2ee$export$f8bb2f9f4607ed91, position);
                }
            }
        },
        get: function(object, path6) {
            this.walk(path6, function(key) {
                if (object) object = object[key];
            });
            return object;
        }
    };
    var $3963067cca2bdb75$export$2e2bcd8739ae039 = $3963067cca2bdb75$var$path;
    function $92bd3289bb0be48d$export$2e2bcd8739ae039(value) {
        return typeof value === "object" && typeof value.next === "function";
    }
    function $85142b602a985f97$export$2e2bcd8739ae039(iterator, target, thisArg, applyPath, prepareValue) {
        var originalNext = iterator.next;
        if (target.name === "entries") iterator.next = function() {
            var result = originalNext.call(this);
            if (result.done === false) {
                result.value[0] = prepareValue(result.value[0], target, result.value[0], applyPath);
                result.value[1] = prepareValue(result.value[1], target, result.value[0], applyPath);
            }
            return result;
        };
        else if (target.name === "values") {
            var keyIterator = thisArg[$e01b18da7d4ab2ee$export$9cb8e7b38dc3cece].keys();
            iterator.next = function() {
                var result = originalNext.call(this);
                if (result.done === false) result.value = prepareValue(result.value, target, keyIterator.next().value, applyPath);
                return result;
            };
        } else iterator.next = function() {
            var result = originalNext.call(this);
            if (result.done === false) result.value = prepareValue(result.value, target, result.value, applyPath);
            return result;
        };
        return iterator;
    }
    function $c239c8de6be8e977$export$2e2bcd8739ae039(cache, options, property) {
        return cache.isUnsubscribed || options.ignoreSymbols && $850f067001d2f1fe$export$2e2bcd8739ae039(property) || options.ignoreUnderscores && property.charAt(0) === "_" || "ignoreKeys" in options && options.ignoreKeys.includes(property);
    }
    var $01a7f0bc5f30e98e$exports = {
    };
    Object.defineProperty($01a7f0bc5f30e98e$exports, "__esModule", {
        value: true
    });
    $01a7f0bc5f30e98e$exports.default = $01a7f0bc5f30e98e$var$_classCallCheck;
    function $01a7f0bc5f30e98e$var$_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    var $6708ab7a357b03d9$exports = {
    };
    Object.defineProperty($6708ab7a357b03d9$exports, "__esModule", {
        value: true
    });
    $6708ab7a357b03d9$exports.default = $6708ab7a357b03d9$var$_createClass;
    function $6708ab7a357b03d9$var$_createClass(Constructor, protoProps, staticProps) {
        if (protoProps) $6708ab7a357b03d9$var$_defineProperties(Constructor.prototype, protoProps);
        if (staticProps) $6708ab7a357b03d9$var$_defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function $6708ab7a357b03d9$var$_defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    var $08303b1295072ee4$export$2e2bcd8739ae039 = /*#__PURE__*/ function() {
        function Cache(equals) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Cache);
            this._equals = equals;
            this._proxyCache = new WeakMap();
            this._pathCache = new WeakMap();
            this.isUnsubscribed = false;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Cache, [
            {
                key: "_getDescriptorCache",
                value: function _getDescriptorCache() {
                    if (this._descriptorCache === undefined) this._descriptorCache = new WeakMap();
                    return this._descriptorCache;
                }
            },
            {
                key: "_getProperties",
                value: function _getProperties(target) {
                    var descriptorCache = this._getDescriptorCache();
                    var properties = descriptorCache.get(target);
                    if (properties === undefined) {
                        properties = {
                        };
                        descriptorCache.set(target, properties);
                    }
                    return properties;
                }
            },
            {
                key: "_getOwnPropertyDescriptor",
                value: function _getOwnPropertyDescriptor(target, property) {
                    if (this.isUnsubscribed) return Reflect.getOwnPropertyDescriptor(target, property);
                    var properties = this._getProperties(target);
                    var descriptor = properties[property];
                    if (descriptor === undefined) {
                        descriptor = Reflect.getOwnPropertyDescriptor(target, property);
                        properties[property] = descriptor;
                    }
                    return descriptor;
                }
            },
            {
                key: "getProxy",
                value: function getProxy(target, path1, handler, proxyTarget) {
                    if (this.isUnsubscribed) return target;
                    var reflectTarget = target[proxyTarget];
                    var source = reflectTarget || target;
                    this._pathCache.set(source, path1);
                    var proxy = this._proxyCache.get(source);
                    if (proxy === undefined) {
                        proxy = reflectTarget === undefined ? new Proxy(target, handler) : target;
                        this._proxyCache.set(source, proxy);
                    }
                    return proxy;
                }
            },
            {
                key: "getPath",
                value: function getPath(target) {
                    return this.isUnsubscribed ? undefined : this._pathCache.get(target);
                }
            },
            {
                key: "isDetached",
                value: function isDetached(target, object) {
                    return !Object.is(target, $3963067cca2bdb75$export$2e2bcd8739ae039.get(object, this.getPath(target)));
                }
            },
            {
                key: "defineProperty",
                value: function defineProperty(target, property, descriptor) {
                    if (!Reflect.defineProperty(target, property, descriptor)) return false;
                    if (!this.isUnsubscribed) this._getProperties(target)[property] = descriptor;
                    return true;
                }
            },
            {
                key: "setProperty",
                value: function setProperty(target, property, value, receiver, previous) {
                    if (!this._equals(previous, value) || !(property in target)) {
                        var descriptor = this._getOwnPropertyDescriptor(target, property);
                        if (descriptor !== undefined && "set" in descriptor) return Reflect.set(target, property, value, receiver);
                        return Reflect.set(target, property, value);
                    }
                    return true;
                }
            },
            {
                key: "deleteProperty",
                value: function deleteProperty(target, property, previous) {
                    if (Reflect.deleteProperty(target, property)) {
                        if (!this.isUnsubscribed) {
                            var properties = this._getDescriptorCache().get(target);
                            if (properties) {
                                delete properties[property];
                                this._pathCache["delete"](previous);
                            }
                        }
                        return true;
                    }
                    return false;
                }
            },
            {
                key: "isSameDescriptor",
                value: function isSameDescriptor(a, target, property) {
                    var b = this._getOwnPropertyDescriptor(target, property);
                    return a !== undefined && b !== undefined && Object.is(a.value, b.value) && (a.writable || false) === (b.writable || false) && (a.enumerable || false) === (b.enumerable || false) && (a.configurable || false) === (b.configurable || false) && a.get === b.get && a.set === b.set;
                }
            },
            {
                key: "isGetInvariant",
                value: function isGetInvariant(target, property) {
                    var descriptor = this._getOwnPropertyDescriptor(target, property);
                    return descriptor !== undefined && descriptor.configurable !== true && descriptor.writable !== true;
                }
            },
            {
                key: "unsubscribe",
                value: function unsubscribe() {
                    this._descriptorCache = null;
                    this._pathCache = null;
                    this._proxyCache = null;
                    this.isUnsubscribed = true;
                }
            }
        ]);
        return Cache;
    }();
    function $7ffc9861f28cf259$export$2e2bcd8739ae039(value) {
        return toString.call(value) === "[object Object]";
    }
    function $7c11b177b989be70$export$2e2bcd8739ae039() {
        return true;
    }
    function $846557a7e003927f$export$2e2bcd8739ae039(clone, value) {
        return clone.length !== value.length || clone.some(function(item, index) {
            return value[index] !== item;
        });
    }
    var $3c1867a8c6bb3d1f$export$87ab45442debb687 = new Set([
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf", 
    ]);
    var $7b2b8cee0ce65aee$var$IMMUTABLE_ARRAY_METHODS = new Set([
        "concat",
        "includes",
        "indexOf",
        "join",
        "keys",
        "lastIndexOf", 
    ]);
    var $7b2b8cee0ce65aee$export$4e33e1ac2be38fa3 = {
        push: $7c11b177b989be70$export$2e2bcd8739ae039,
        pop: $7c11b177b989be70$export$2e2bcd8739ae039,
        shift: $7c11b177b989be70$export$2e2bcd8739ae039,
        unshift: $7c11b177b989be70$export$2e2bcd8739ae039,
        copyWithin: $846557a7e003927f$export$2e2bcd8739ae039,
        reverse: $846557a7e003927f$export$2e2bcd8739ae039,
        sort: $846557a7e003927f$export$2e2bcd8739ae039,
        splice: $846557a7e003927f$export$2e2bcd8739ae039,
        flat: $846557a7e003927f$export$2e2bcd8739ae039,
        fill: $846557a7e003927f$export$2e2bcd8739ae039
    };
    var $7b2b8cee0ce65aee$export$157c4abf6d17869e = new Set(/*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)($3c1867a8c6bb3d1f$export$87ab45442debb687).concat(/*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)($7b2b8cee0ce65aee$var$IMMUTABLE_ARRAY_METHODS), /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(Object.keys($7b2b8cee0ce65aee$export$4e33e1ac2be38fa3))));
    function $70116a667954639f$export$2e2bcd8739ae039(clone, value) {
        if (clone.size !== value.size) return true;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = clone[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var element = _step.value;
                if (!value.has(element)) return true;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
        return false;
    }
    var $d48e300ed3db5f9d$export$fc33389dd13370bf = [
        "keys",
        "values",
        "entries", 
    ];
    var $d48e300ed3db5f9d$export$917446fc33e7cb53 = new Set([
        "has",
        "toString", 
    ]);
    var $d48e300ed3db5f9d$export$1b750ad9668ebc59 = {
        add: $70116a667954639f$export$2e2bcd8739ae039,
        clear: $70116a667954639f$export$2e2bcd8739ae039,
        "delete": $70116a667954639f$export$2e2bcd8739ae039,
        forEach: $70116a667954639f$export$2e2bcd8739ae039
    };
    var $d48e300ed3db5f9d$export$31c36d107390313f = new Set(/*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)($d48e300ed3db5f9d$export$917446fc33e7cb53).concat(/*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(Object.keys($d48e300ed3db5f9d$export$1b750ad9668ebc59)), /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)($d48e300ed3db5f9d$export$fc33389dd13370bf)));
    function $063ac9f12cb07e4b$export$2e2bcd8739ae039(clone, value) {
        if (clone.size !== value.size) return true;
        var bValue;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = clone[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var _value = /*@__PURE__*/ $parcel$interopDefault($ffe0db64804a4aa2$exports)(_step.value, 2), key = _value[0], aValue = _value[1];
                bValue = value.get(key);
                if (bValue !== aValue || bValue === undefined && !value.has(key)) return true;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
        return false;
    }
    var $23d31765b4bc75a3$var$IMMUTABLE_MAP_METHODS = new Set(/*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)($d48e300ed3db5f9d$export$917446fc33e7cb53).concat([
        "get"
    ]));
    var $23d31765b4bc75a3$export$5e358a2f59cad3d0 = {
        set: $063ac9f12cb07e4b$export$2e2bcd8739ae039,
        clear: $063ac9f12cb07e4b$export$2e2bcd8739ae039,
        "delete": $063ac9f12cb07e4b$export$2e2bcd8739ae039,
        forEach: $063ac9f12cb07e4b$export$2e2bcd8739ae039
    };
    var $23d31765b4bc75a3$export$424149ce245f02b7 = new Set(/*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)($23d31765b4bc75a3$var$IMMUTABLE_MAP_METHODS).concat(/*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(Object.keys($23d31765b4bc75a3$export$5e358a2f59cad3d0)), /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)($d48e300ed3db5f9d$export$fc33389dd13370bf)));
    var $1d4d322ec933909a$export$2e2bcd8739ae039 = /*#__PURE__*/ function() {
        function CloneObject(value, path1, argumentsList, hasOnValidate) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, CloneObject);
            this._path = path1;
            this._isChanged = false;
            this._clonedCache = new Set();
            this._hasOnValidate = hasOnValidate;
            this._changes = hasOnValidate ? [] : null;
            this.clone = path1 === undefined ? value : this._shallowClone(value);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(CloneObject, [
            {
                key: "_shallowClone",
                value: function _shallowClone(value) {
                    var _this = this;
                    var clone = value;
                    if ($7ffc9861f28cf259$export$2e2bcd8739ae039(value)) clone = /*@__PURE__*/ $parcel$interopDefault($41c9ae809ac54c1d$exports)({
                    }, value);
                    else if ($5e962b6ebe07b898$export$2e2bcd8739ae039(value) || ArrayBuffer.isView(value)) clone = /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(value);
                    else if (value instanceof Date) clone = new Date(value);
                    else if (value instanceof Set) clone = new Set(/*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(value).map(function(item) {
                        return _this._shallowClone(item);
                    }));
                    else if (value instanceof Map) {
                        clone = new Map();
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(var _iterator = value.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var _value = /*@__PURE__*/ $parcel$interopDefault($ffe0db64804a4aa2$exports)(_step.value, 2), key = _value[0], item1 = _value[1];
                                clone.set(key, this._shallowClone(item1));
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                            } finally{
                                if (_didIteratorError) throw _iteratorError;
                            }
                        }
                    }
                    this._clonedCache.add(clone);
                    return clone;
                }
            },
            {
                key: "preferredThisArg",
                value: function preferredThisArg(isHandledMethod, name, thisArg, thisProxyTarget) {
                    if (isHandledMethod) {
                        if ($5e962b6ebe07b898$export$2e2bcd8739ae039(thisProxyTarget)) this._onIsChanged = $7b2b8cee0ce65aee$export$4e33e1ac2be38fa3[name];
                        else if (thisProxyTarget instanceof Set) this._onIsChanged = $d48e300ed3db5f9d$export$1b750ad9668ebc59[name];
                        else if (thisProxyTarget instanceof Map) this._onIsChanged = $23d31765b4bc75a3$export$5e358a2f59cad3d0[name];
                        return thisProxyTarget;
                    }
                    return thisArg;
                }
            },
            {
                key: "update",
                value: function update(fullPath, property, value) {
                    var changePath = $3963067cca2bdb75$export$2e2bcd8739ae039.after(fullPath, this._path);
                    if (property !== "length") {
                        var _this = this;
                        var object = this.clone;
                        $3963067cca2bdb75$export$2e2bcd8739ae039.walk(changePath, function(key) {
                            if (object && object[key]) {
                                if (!_this._clonedCache.has(object[key])) object[key] = _this._shallowClone(object[key]);
                                object = object[key];
                            }
                        });
                        if (this._hasOnValidate) this._changes.push({
                            path: changePath,
                            property: property,
                            previous: value
                        });
                        if (object && object[property]) object[property] = value;
                    }
                    this._isChanged = true;
                }
            },
            {
                key: "undo",
                value: function undo(object) {
                    var change;
                    for(var index = this._changes.length - 1; index !== -1; index--){
                        change = this._changes[index];
                        $3963067cca2bdb75$export$2e2bcd8739ae039.get(object, change.path)[change.property] = change.previous;
                    }
                }
            },
            {
                key: "isChanged",
                value: function isChanged(value) {
                    return this._onIsChanged === undefined ? this._isChanged : this._onIsChanged(this.clone, value);
                }
            }
        ], [
            {
                key: "isHandledMethod",
                value: function isHandledMethod(name) {
                    return $3c1867a8c6bb3d1f$export$87ab45442debb687.has(name);
                }
            }
        ]);
        return CloneObject;
    }();
    var $564f7ef37bc8bd96$exports = {
    };
    Object.defineProperty($564f7ef37bc8bd96$exports, "__esModule", {
        value: true
    });
    $564f7ef37bc8bd96$exports.default = $564f7ef37bc8bd96$var$_inherits;
    var $564f7ef37bc8bd96$var$_setPrototypeOf = $564f7ef37bc8bd96$var$_interopRequireDefault(parcelRequire("iEMaY"));
    function $564f7ef37bc8bd96$var$_inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) $564f7ef37bc8bd96$var$_setPrototypeOf.default(subClass, superClass);
    }
    function $564f7ef37bc8bd96$var$_interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    var $471f5fa2b7524a03$exports = {
    };
    Object.defineProperty($471f5fa2b7524a03$exports, "__esModule", {
        value: true
    });
    $471f5fa2b7524a03$exports.default = $471f5fa2b7524a03$var$_createSuper;
    var $471f5fa2b7524a03$var$_isNativeReflectConstruct = $471f5fa2b7524a03$var$_interopRequireDefault(parcelRequire("gfroT"));
    var $471f5fa2b7524a03$var$_getPrototypeOf = $471f5fa2b7524a03$var$_interopRequireDefault(parcelRequire("Ebg6X"));
    var $471f5fa2b7524a03$var$_possibleConstructorReturn = $471f5fa2b7524a03$var$_interopRequireDefault(parcelRequire("kLk40"));
    function $471f5fa2b7524a03$var$_createSuper(Derived) {
        var hasNativeReflectConstruct = $471f5fa2b7524a03$var$_isNativeReflectConstruct.default();
        return function _createSuperInternal() {
            var Super = $471f5fa2b7524a03$var$_getPrototypeOf.default(Derived), result;
            if (hasNativeReflectConstruct) {
                var NewTarget = $471f5fa2b7524a03$var$_getPrototypeOf.default(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else result = Super.apply(this, arguments);
            return $471f5fa2b7524a03$var$_possibleConstructorReturn.default(this, result);
        };
    }
    function $471f5fa2b7524a03$var$_interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    var $ae2e03739381a597$export$2e2bcd8739ae039 = /*#__PURE__*/ function(CloneObject1) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(CloneArray, CloneObject1);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(CloneArray);
        function CloneArray() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, CloneArray);
            return _super.apply(this, arguments);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(CloneArray, null, [
            {
                key: "isHandledMethod",
                value: function isHandledMethod(name) {
                    return $7b2b8cee0ce65aee$export$157c4abf6d17869e.has(name);
                }
            }
        ]);
        return CloneArray;
    }($1d4d322ec933909a$export$2e2bcd8739ae039);
    var $d3d5ca31e138b0d4$export$2e2bcd8739ae039 = /*#__PURE__*/ function(CloneObject1) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(CloneDate, CloneObject1);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(CloneDate);
        function CloneDate() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, CloneDate);
            return _super.apply(this, arguments);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(CloneDate, [
            {
                key: "undo",
                value: function undo(object) {
                    object.setTime(this.clone.getTime());
                }
            },
            {
                key: "isChanged",
                value: function isChanged(value, equals) {
                    return !equals(this.clone.valueOf(), value.valueOf());
                }
            }
        ]);
        return CloneDate;
    }($1d4d322ec933909a$export$2e2bcd8739ae039);
    var $0e8b937c5b316ef3$export$2e2bcd8739ae039 = /*#__PURE__*/ function(CloneObject1) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(CloneSet, CloneObject1);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(CloneSet);
        function CloneSet() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, CloneSet);
            return _super.apply(this, arguments);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(CloneSet, [
            {
                key: "undo",
                value: function undo(object) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = this.clone[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var value = _step.value;
                            object.add(value);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                        } finally{
                            if (_didIteratorError) throw _iteratorError;
                        }
                    }
                    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    try {
                        for(var _iterator1 = object[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                            var value1 = _step1.value;
                            if (!this.clone.has(value1)) object["delete"](value1);
                        }
                    } catch (err1) {
                        _didIteratorError1 = true;
                        _iteratorError1 = err1;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion1 && _iterator1["return"] != null) _iterator1["return"]();
                        } finally{
                            if (_didIteratorError1) throw _iteratorError1;
                        }
                    }
                }
            }
        ], [
            {
                key: "isHandledMethod",
                value: function isHandledMethod(name) {
                    return $d48e300ed3db5f9d$export$31c36d107390313f.has(name);
                }
            }
        ]);
        return CloneSet;
    }($1d4d322ec933909a$export$2e2bcd8739ae039);
    var $c888929579cd4f7f$export$2e2bcd8739ae039 = /*#__PURE__*/ function(CloneObject1) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(CloneMap, CloneObject1);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(CloneMap);
        function CloneMap() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, CloneMap);
            return _super.apply(this, arguments);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(CloneMap, [
            {
                key: "undo",
                value: function undo(object) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = this.clone.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var _value = /*@__PURE__*/ $parcel$interopDefault($ffe0db64804a4aa2$exports)(_step.value, 2), key = _value[0], value = _value[1];
                            object.set(key, value);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                        } finally{
                            if (_didIteratorError) throw _iteratorError;
                        }
                    }
                    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    try {
                        for(var _iterator1 = object.keys()[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                            var key1 = _step1.value;
                            if (!this.clone.has(key1)) object["delete"](key1);
                        }
                    } catch (err1) {
                        _didIteratorError1 = true;
                        _iteratorError1 = err1;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion1 && _iterator1["return"] != null) _iterator1["return"]();
                        } finally{
                            if (_didIteratorError1) throw _iteratorError1;
                        }
                    }
                }
            }
        ], [
            {
                key: "isHandledMethod",
                value: function isHandledMethod(name) {
                    return $23d31765b4bc75a3$export$424149ce245f02b7.has(name);
                }
            }
        ]);
        return CloneMap;
    }($1d4d322ec933909a$export$2e2bcd8739ae039);
    var $1dd7e1ef5c0910ae$export$2e2bcd8739ae039 = /*#__PURE__*/ function(CloneObject1) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(CloneWeakSet, CloneObject1);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(CloneWeakSet);
        function CloneWeakSet(value, path, argumentsList, hasOnValidate) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, CloneWeakSet);
            var _this;
            _this = _super.call(this, undefined, path, argumentsList, hasOnValidate);
            _this._arg1 = argumentsList[0];
            _this._weakValue = value.has(_this._arg1);
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(CloneWeakSet, [
            {
                key: "isChanged",
                value: function isChanged(value) {
                    return this._weakValue !== value.has(this._arg1);
                }
            },
            {
                key: "undo",
                value: function undo(object) {
                    if (this._weakValue && !object.has(this._arg1)) object.add(this._arg1);
                    else object["delete"](this._arg1);
                }
            }
        ]);
        return CloneWeakSet;
    }($1d4d322ec933909a$export$2e2bcd8739ae039);
    var $267a4516854b2729$export$2e2bcd8739ae039 = /*#__PURE__*/ function(CloneObject1) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(CloneWeakMap, CloneObject1);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(CloneWeakMap);
        function CloneWeakMap(value, path, argumentsList, hasOnValidate) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, CloneWeakMap);
            var _this;
            _this = _super.call(this, undefined, path, argumentsList, hasOnValidate);
            _this._weakKey = argumentsList[0];
            _this._weakHas = value.has(_this._weakKey);
            _this._weakValue = value.get(_this._weakKey);
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(CloneWeakMap, [
            {
                key: "isChanged",
                value: function isChanged(value) {
                    return this._weakValue !== value.get(this._weakKey);
                }
            },
            {
                key: "undo",
                value: function undo(object) {
                    var weakHas = object.has(this._weakKey);
                    if (this._weakHas && !weakHas) object.set(this._weakKey, this._weakValue);
                    else if (!this._weakHas && weakHas) object["delete"](this._weakKey);
                    else if (this._weakValue !== object.get(this._weakKey)) object.set(this._weakKey, this._weakValue);
                }
            }
        ]);
        return CloneWeakMap;
    }($1d4d322ec933909a$export$2e2bcd8739ae039);
    var $0373d7d743970f16$export$2e2bcd8739ae039 = /*#__PURE__*/ function() {
        function SmartClone(hasOnValidate) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, SmartClone);
            this._stack = [];
            this._hasOnValidate = hasOnValidate;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(SmartClone, [
            {
                key: "isCloning",
                get: function get() {
                    return this._stack.length > 0;
                }
            },
            {
                key: "start",
                value: function start(value, path, argumentsList) {
                    var CloneClass = $1d4d322ec933909a$export$2e2bcd8739ae039;
                    if ($5e962b6ebe07b898$export$2e2bcd8739ae039(value)) CloneClass = $ae2e03739381a597$export$2e2bcd8739ae039;
                    else if (value instanceof Date) CloneClass = $d3d5ca31e138b0d4$export$2e2bcd8739ae039;
                    else if (value instanceof Set) CloneClass = $0e8b937c5b316ef3$export$2e2bcd8739ae039;
                    else if (value instanceof Map) CloneClass = $c888929579cd4f7f$export$2e2bcd8739ae039;
                    else if (value instanceof WeakSet) CloneClass = $1dd7e1ef5c0910ae$export$2e2bcd8739ae039;
                    else if (value instanceof WeakMap) CloneClass = $267a4516854b2729$export$2e2bcd8739ae039;
                    this._stack.push(new CloneClass(value, path, argumentsList, this._hasOnValidate));
                }
            },
            {
                key: "update",
                value: function update(fullPath, property, value) {
                    this._stack[this._stack.length - 1].update(fullPath, property, value);
                }
            },
            {
                key: "preferredThisArg",
                value: function preferredThisArg(target, thisArg, thisProxyTarget) {
                    var name = target.name;
                    var isHandledMethod = SmartClone.isHandledMethod(thisProxyTarget, name);
                    return this._stack[this._stack.length - 1].preferredThisArg(isHandledMethod, name, thisArg, thisProxyTarget);
                }
            },
            {
                key: "isChanged",
                value: function isChanged(isMutable, value, equals) {
                    return this._stack[this._stack.length - 1].isChanged(isMutable, value, equals);
                }
            },
            {
                key: "undo",
                value: function undo(object) {
                    if (this._previousClone !== undefined) this._previousClone.undo(object);
                }
            },
            {
                key: "stop",
                value: function stop() {
                    this._previousClone = this._stack.pop();
                    return this._previousClone.clone;
                }
            }
        ], [
            {
                key: "isHandledType",
                value: function isHandledType(value) {
                    return $7ffc9861f28cf259$export$2e2bcd8739ae039(value) || $5e962b6ebe07b898$export$2e2bcd8739ae039(value) || $04083f3dd1f12eda$export$2191e61a810db5fc(value);
                }
            },
            {
                key: "isHandledMethod",
                value: function isHandledMethod(target, name) {
                    if ($7ffc9861f28cf259$export$2e2bcd8739ae039(target)) return $1d4d322ec933909a$export$2e2bcd8739ae039.isHandledMethod(name);
                    if ($5e962b6ebe07b898$export$2e2bcd8739ae039(target)) return $ae2e03739381a597$export$2e2bcd8739ae039.isHandledMethod(name);
                    if (target instanceof Set) return $0e8b937c5b316ef3$export$2e2bcd8739ae039.isHandledMethod(name);
                    if (target instanceof Map) return $c888929579cd4f7f$export$2e2bcd8739ae039.isHandledMethod(name);
                    return $04083f3dd1f12eda$export$2191e61a810db5fc(target);
                }
            }
        ]);
        return SmartClone;
    }();
    var $68a8cbaf2c829e6f$var$defaultOptions = {
        equals: Object.is,
        isShallow: false,
        pathAsArray: false,
        ignoreSymbols: false,
        ignoreUnderscores: false,
        ignoreDetached: false,
        details: false
    };
    var $68a8cbaf2c829e6f$var$onChange = function(object, onChange1) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
        };
        options = /*@__PURE__*/ $parcel$interopDefault($41c9ae809ac54c1d$exports)({
        }, $68a8cbaf2c829e6f$var$defaultOptions, options);
        var proxyTarget = Symbol("ProxyTarget");
        var equals = options.equals, isShallow = options.isShallow, ignoreDetached = options.ignoreDetached, details = options.details;
        var cache = new $08303b1295072ee4$export$2e2bcd8739ae039(equals);
        var hasOnValidate = typeof options.onValidate === "function";
        var smartClone = new $0373d7d743970f16$export$2e2bcd8739ae039(hasOnValidate);
        // eslint-disable-next-line max-params
        var validate = function(target, property, value, previous, applyData) {
            return !hasOnValidate || smartClone.isCloning || options.onValidate($3963067cca2bdb75$export$2e2bcd8739ae039.concat(cache.getPath(target), property), value, previous, applyData) === true;
        };
        var handleChangeOnTarget = function(target, property, value, previous) {
            if (!$c239c8de6be8e977$export$2e2bcd8739ae039(cache, options, property) && !(ignoreDetached && cache.isDetached(target, object))) handleChange(cache.getPath(target), property, value, previous);
        };
        // eslint-disable-next-line max-params
        var handleChange = function(changePath, property, value, previous, applyData) {
            if (smartClone.isCloning) smartClone.update(changePath, property, previous);
            else onChange1($3963067cca2bdb75$export$2e2bcd8739ae039.concat(changePath, property), value, previous, applyData);
        };
        var getProxyTarget = function(value) {
            return value ? value[proxyTarget] || value : value;
        };
        var prepareValue = function(value, target, property, basePath) {
            if ($04083f3dd1f12eda$export$281bb0ec97352a76(value) || property === "constructor" || isShallow && !$0373d7d743970f16$export$2e2bcd8739ae039.isHandledMethod(target, property) || $c239c8de6be8e977$export$2e2bcd8739ae039(cache, options, property) || cache.isGetInvariant(target, property) || ignoreDetached && cache.isDetached(target, object)) return value;
            if (basePath === undefined) basePath = cache.getPath(target);
            return cache.getProxy(value, $3963067cca2bdb75$export$2e2bcd8739ae039.concat(basePath, property), handler, proxyTarget);
        };
        var handler = {
            get: function(target, property, receiver) {
                if ($850f067001d2f1fe$export$2e2bcd8739ae039(property)) {
                    if (property === proxyTarget || property === $e01b18da7d4ab2ee$export$9cb8e7b38dc3cece) return target;
                    if (property === $e01b18da7d4ab2ee$export$881b71df7abed909 && !cache.isUnsubscribed && cache.getPath(target).length === 0) {
                        cache.unsubscribe();
                        return target;
                    }
                }
                var value = $04083f3dd1f12eda$export$2191e61a810db5fc(target) ? Reflect.get(target, property) : Reflect.get(target, property, receiver);
                return prepareValue(value, target, property);
            },
            set: function(target, property, value, receiver) {
                value = getProxyTarget(value);
                var reflectTarget = target[proxyTarget] || target;
                var previous = reflectTarget[property];
                if (equals(previous, value) && property in target) return true;
                var isValid = validate(target, property, value, previous);
                if (isValid && cache.setProperty(reflectTarget, property, value, receiver, previous)) {
                    handleChangeOnTarget(target, property, target[property], previous);
                    return true;
                }
                return !isValid;
            },
            defineProperty: function(target, property, descriptor) {
                if (!cache.isSameDescriptor(descriptor, target, property)) {
                    var previous = target[property];
                    if (validate(target, property, descriptor.value, previous) && cache.defineProperty(target, property, descriptor, previous)) handleChangeOnTarget(target, property, descriptor.value, previous);
                }
                return true;
            },
            deleteProperty: function(target, property) {
                if (!Reflect.has(target, property)) return true;
                var previous = Reflect.get(target, property);
                var isValid = validate(target, property, undefined, previous);
                if (isValid && cache.deleteProperty(target, property, previous)) {
                    handleChangeOnTarget(target, property, undefined, previous);
                    return true;
                }
                return !isValid;
            },
            apply: function(target, thisArg, argumentsList) {
                var thisProxyTarget = thisArg[proxyTarget] || thisArg;
                if (cache.isUnsubscribed) return Reflect.apply(target, thisProxyTarget, argumentsList);
                if ((details === false || details !== true && !details.includes(target.name)) && $0373d7d743970f16$export$2e2bcd8739ae039.isHandledType(thisProxyTarget)) {
                    var applyPath = $3963067cca2bdb75$export$2e2bcd8739ae039.initial(cache.getPath(target));
                    var isHandledMethod = $0373d7d743970f16$export$2e2bcd8739ae039.isHandledMethod(thisProxyTarget, target.name);
                    smartClone.start(thisProxyTarget, applyPath, argumentsList);
                    var result = Reflect.apply(target, smartClone.preferredThisArg(target, thisArg, thisProxyTarget), isHandledMethod ? argumentsList.map(function(argument) {
                        return getProxyTarget(argument);
                    }) : argumentsList);
                    var isChanged = smartClone.isChanged(thisProxyTarget, equals);
                    var previous = smartClone.stop();
                    if ($0373d7d743970f16$export$2e2bcd8739ae039.isHandledType(result) && isHandledMethod) {
                        if (thisArg instanceof Map && target.name === "get") applyPath = $3963067cca2bdb75$export$2e2bcd8739ae039.concat(applyPath, argumentsList[0]);
                        result = cache.getProxy(result, applyPath, handler);
                    }
                    if (isChanged) {
                        var applyData = {
                            name: target.name,
                            args: argumentsList,
                            result: result
                        };
                        var changePath = smartClone.isCloning ? $3963067cca2bdb75$export$2e2bcd8739ae039.initial(applyPath) : applyPath;
                        var property = smartClone.isCloning ? $3963067cca2bdb75$export$2e2bcd8739ae039.last(applyPath) : "";
                        if (validate($3963067cca2bdb75$export$2e2bcd8739ae039.get(object, changePath), property, thisProxyTarget, previous, applyData)) handleChange(changePath, property, thisProxyTarget, previous, applyData);
                        else smartClone.undo(thisProxyTarget);
                    }
                    if ((thisArg instanceof Map || thisArg instanceof Set) && $92bd3289bb0be48d$export$2e2bcd8739ae039(result)) return $85142b602a985f97$export$2e2bcd8739ae039(result, target, thisArg, applyPath, prepareValue);
                    return result;
                }
                return Reflect.apply(target, thisArg, argumentsList);
            }
        };
        var proxy = cache.getProxy(object, options.pathAsArray ? [] : "", handler);
        onChange1 = onChange1.bind(proxy);
        if (hasOnValidate) options.onValidate = options.onValidate.bind(proxy);
        return proxy;
    };
    $68a8cbaf2c829e6f$var$onChange.target = function(proxy) {
        return proxy && proxy[$e01b18da7d4ab2ee$export$9cb8e7b38dc3cece] || proxy;
    };
    $68a8cbaf2c829e6f$var$onChange.unsubscribe = function(proxy) {
        return proxy[$e01b18da7d4ab2ee$export$881b71df7abed909] || proxy;
    };
    var $68a8cbaf2c829e6f$export$2e2bcd8739ae039 = $68a8cbaf2c829e6f$var$onChange;
    // Set format for results
    var $9b425c3cfbd41b4f$var$setFormatNumber = function(dataFormat) {
        return +Math.round(dataFormat);
    };
    // PMI rate -- (PMI-Ипотечное страхование)
    var $9b425c3cfbd41b4f$var$getPmiResult = function(excludeValue, mortgageAmount, pmiRate) {
        if (!excludeValue) {
            var result = mortgageAmount * pmiRate / 12;
            return $9b425c3cfbd41b4f$var$setFormatNumber(result);
        }
        return 0;
    };
    // Property tax function
    var $9b425c3cfbd41b4f$var$propertyTaxCalc = function(excludeValue, propertyTax) {
        if (!excludeValue) {
            var result = propertyTax / 12;
            return $9b425c3cfbd41b4f$var$setFormatNumber(result);
        }
        return 0;
    };
    // Home insurance function
    var $9b425c3cfbd41b4f$var$homeInsuranceCalc = function(excludeValue, homeInsurance) {
        if (!excludeValue) {
            var result = homeInsurance / 12;
            return $9b425c3cfbd41b4f$var$setFormatNumber(result);
        }
        return 0;
    };
    // Monthly function
    var $9b425c3cfbd41b4f$var$monthlyPaymentCalc = function(mortgageAmount, interestRateResult, paymentsMonths, pmiResult, hoaAmount, propertyTaxResult, homeInsuranceResult) {
        if (interestRateResult !== 0) {
            var result = mortgageAmount * interestRateResult * Math.pow(1 + interestRateResult, paymentsMonths) / (Math.pow(1 + interestRateResult, paymentsMonths) - 1) + pmiResult + hoaAmount + propertyTaxResult + homeInsuranceResult;
            return $9b425c3cfbd41b4f$var$setFormatNumber(result);
        }
        return 0;
    };
    // Monthly PI function
    var $9b425c3cfbd41b4f$var$monthlyPICalc = function(mortgageAmount, interestRateResult, paymentsMonths) {
        var result = mortgageAmount * interestRateResult * Math.pow(1 + interestRateResult, paymentsMonths) / (Math.pow(1 + interestRateResult, paymentsMonths) - 1);
        return $9b425c3cfbd41b4f$var$setFormatNumber(result);
    };
    // Total cost function
    var $9b425c3cfbd41b4f$var$totalCostAmountCalc = function(monthlyPaymentResult, paymentsMonths) {
        var result = monthlyPaymentResult * paymentsMonths;
        return $9b425c3cfbd41b4f$var$setFormatNumber(result);
    };
    var $9b425c3cfbd41b4f$var$calc = function(elements, watchedState) {
        var form = watchedState.form, result = watchedState.result, donutData = watchedState.donutData;
        var values = form.values, exclude = form.exclude;
        var homePrice = values["home-price"];
        var downPayment = values["down-payment"];
        var interestRate = values["interest-rate"];
        var homeInsurance = values["home-insurance"];
        var propertyTax = values["property-tax"];
        var pmiRate = values["pmi-rate"];
        var hoaAmount = values["hoa-dues"];
        var term = values.term;
        var monthInYear = 12;
        var percentBase = 100;
        var mortgageAmount = $9b425c3cfbd41b4f$var$setFormatNumber(homePrice - downPayment); // основной кредит, основная сумма
        var paymentsMonths = term * monthInYear; // количество месяцев
        var interestRateResult = interestRate / percentBase / monthInYear; // процентная ставка по еж.платежу
        var pmiResult = $9b425c3cfbd41b4f$var$getPmiResult(exclude["pmi-rate"], mortgageAmount, pmiRate);
        var homeInsuranceResult = $9b425c3cfbd41b4f$var$homeInsuranceCalc(exclude["property-tax"], homeInsurance);
        var propertyTaxResult = $9b425c3cfbd41b4f$var$propertyTaxCalc(exclude["property-tax"], propertyTax);
        var monthlyPaymentResult = $9b425c3cfbd41b4f$var$monthlyPaymentCalc(mortgageAmount, interestRateResult, paymentsMonths, pmiResult, hoaAmount, propertyTaxResult, homeInsuranceResult);
        var monthlyPIResult = $9b425c3cfbd41b4f$var$monthlyPICalc(mortgageAmount, interestRateResult, paymentsMonths);
        var totalCostAmountResult = $9b425c3cfbd41b4f$var$totalCostAmountCalc(monthlyPaymentResult, paymentsMonths);
        // * RESULTS
        // calcMortgageAmount - сумма ипотеки
        result["mortgage-amount"] = mortgageAmount;
        // calcMonthlyPayment - ежемесячный платеж
        result["monthly-payment"] = monthlyPaymentResult;
        // calcTotalCost - общая сумма выплат
        result["mortgage-insurance"] = pmiResult;
        // Total Cost Of Mortgage
        result["mortgage-total-cost"] = totalCostAmountResult;
        // donut data list
        donutData.forEach(function(param, index) {
            var key = param.key;
            switch(key){
                case "pi":
                    donutData[index].data = monthlyPIResult;
                    break;
                case "insurance":
                    donutData[index].data = homeInsuranceResult;
                    break;
                case "taxes":
                    donutData[index].data = propertyTaxResult;
                    break;
                case "pmi":
                    donutData[index].data = pmiResult;
                    break;
                case "hoa":
                    donutData[index].data = hoaAmount;
                    break;
                default:
                    break;
            }
        });
    };
    var $9b425c3cfbd41b4f$export$2e2bcd8739ae039 = $9b425c3cfbd41b4f$var$calc;
    var $fdlrY = parcelRequire("fdlrY");
    var $1W515 = parcelRequire("1W515");
    var $f452dcf8faa6ea67$exports = {
    };
    Object.defineProperty($f452dcf8faa6ea67$exports, "__esModule", {
        value: true
    });
    $f452dcf8faa6ea67$exports.default = $f452dcf8faa6ea67$var$_get;
    var $f452dcf8faa6ea67$var$_superPropBase = $f452dcf8faa6ea67$var$_interopRequireDefault(parcelRequire("2EOD1"));
    function $f452dcf8faa6ea67$var$_get(target, property, receiver) {
        return $f452dcf8faa6ea67$var$get(target, property, receiver);
    }
    function $f452dcf8faa6ea67$var$_interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function $f452dcf8faa6ea67$var$get(target1, property1, receiver1) {
        if (typeof Reflect !== "undefined" && Reflect.get) $f452dcf8faa6ea67$var$get = Reflect.get;
        else $f452dcf8faa6ea67$var$get = function get(target, property, receiver) {
            var base = $f452dcf8faa6ea67$var$_superPropBase.default(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) return desc.get.call(receiver || target);
            return desc.value;
        };
        return $f452dcf8faa6ea67$var$get(target1, property1, receiver1);
    }
    var $Ebg6X = parcelRequire("Ebg6X");
    var $9EtEN = parcelRequire("9EtEN");
    var $16755fe9f4f0f745$exports = {
    };
    Object.defineProperty($16755fe9f4f0f745$exports, "__esModule", {
        value: true
    });
    $16755fe9f4f0f745$exports.default = $16755fe9f4f0f745$var$_wrapNativeSuper;
    var $16755fe9f4f0f745$var$_construct = $16755fe9f4f0f745$var$_interopRequireDefault(parcelRequire("67N3T"));
    var $16755fe9f4f0f745$var$_isNativeFunction = $16755fe9f4f0f745$var$_interopRequireDefault(parcelRequire("alnZ2"));
    var $16755fe9f4f0f745$var$_getPrototypeOf = $16755fe9f4f0f745$var$_interopRequireDefault(parcelRequire("Ebg6X"));
    var $16755fe9f4f0f745$var$_setPrototypeOf = $16755fe9f4f0f745$var$_interopRequireDefault(parcelRequire("iEMaY"));
    function $16755fe9f4f0f745$var$_wrapNativeSuper(Class) {
        return $16755fe9f4f0f745$var$wrapNativeSuper(Class);
    }
    function $16755fe9f4f0f745$var$_interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function $16755fe9f4f0f745$var$wrapNativeSuper(Class1) {
        var _cache = typeof Map === "function" ? new Map() : undefined;
        $16755fe9f4f0f745$var$wrapNativeSuper = function wrapNativeSuper(Class) {
            if (Class === null || !$16755fe9f4f0f745$var$_isNativeFunction.default(Class)) return Class;
            if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
            if (typeof _cache !== "undefined") {
                if (_cache.has(Class)) return _cache.get(Class);
                _cache.set(Class, Wrapper);
            }
            function Wrapper() {
                return $16755fe9f4f0f745$var$_construct.default(Class, arguments, $16755fe9f4f0f745$var$_getPrototypeOf.default(this).constructor);
            }
            Wrapper.prototype = Object.create(Class.prototype, {
                constructor: {
                    value: Wrapper,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            return $16755fe9f4f0f745$var$_setPrototypeOf.default(Wrapper, Class);
        };
        return $16755fe9f4f0f745$var$wrapNativeSuper(Class1);
    }
    var $1W515 = parcelRequire("1W515");
    var $9EtEN = parcelRequire("9EtEN");
    /*!
 * Chart.js v3.8.0
 * https://www.chartjs.org
 * (c) 2022 Chart.js Contributors
 * Released under the MIT License
 */ function $6892236ee0bf6afc$export$9d0e2d13d04f7070(pixelSize, fontStyle, fontFamily) {
        return fontStyle + " " + pixelSize + "px " + fontFamily;
    }
    var $6892236ee0bf6afc$export$43caf9889c228507 = function() {
        if (typeof window === "undefined") return function(callback1) {
            return callback1();
        };
        return window.requestAnimationFrame;
    }();
    function $6892236ee0bf6afc$export$b4171a6734a65d42(fn, thisArg, updateFn) {
        var updateArgs = updateFn || function(args) {
            return Array.prototype.slice.call(args);
        };
        var ticking = false;
        var args1 = [];
        return function() {
            for(var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++)rest[_key] = arguments[_key];
            args1 = updateArgs(rest);
            if (!ticking) {
                ticking = true;
                $6892236ee0bf6afc$export$43caf9889c228507.call(window, function() {
                    ticking = false;
                    fn.apply(thisArg, args1);
                });
            }
        };
    }
    function $6892236ee0bf6afc$export$2219238a014317b0(fn, delay) {
        var timeout;
        return function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
            if (delay) {
                clearTimeout(timeout);
                timeout = setTimeout(fn, delay, args);
            } else fn.apply(this, args);
            return delay;
        };
    }
    var $6892236ee0bf6afc$export$34aec0b863436764 = function(align) {
        return align === "start" ? "left" : align === "end" ? "right" : "center";
    };
    var $6892236ee0bf6afc$export$3c2fa207a37baaea = function(align, start, end) {
        return align === "start" ? start : align === "end" ? end : (start + end) / 2;
    };
    var $6892236ee0bf6afc$export$91c6e00c14e7e6fd = function(align, left, right, rtl) {
        var check = rtl ? "left" : "right";
        return align === check ? right : align === "center" ? (left + right) / 2 : left;
    };
    function $6892236ee0bf6afc$export$890c4ad488842ce7() {
    }
    var $6892236ee0bf6afc$export$555508cbc6add439 = function() {
        var id = 0;
        return function() {
            return id++;
        };
    }();
    function $6892236ee0bf6afc$export$342063e11d6c3cad(value) {
        return value === null || typeof value === "undefined";
    }
    function $6892236ee0bf6afc$export$8b22cf2602fb60ce(value) {
        if (Array.isArray && Array.isArray(value)) return true;
        var type = Object.prototype.toString.call(value);
        if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") return true;
        return false;
    }
    function $6892236ee0bf6afc$export$23f2a1d2818174ef(value) {
        return value !== null && Object.prototype.toString.call(value) === "[object Object]";
    }
    var $6892236ee0bf6afc$export$39b482c5e57630a8 = function(value) {
        return (typeof value === "number" || value instanceof Number) && isFinite(+value);
    };
    function $6892236ee0bf6afc$export$c4ce752e73470fba(value, defaultValue) {
        return $6892236ee0bf6afc$export$39b482c5e57630a8(value) ? value : defaultValue;
    }
    function $6892236ee0bf6afc$export$90a7f3efeed30595(value, defaultValue) {
        return typeof value === "undefined" ? defaultValue : value;
    }
    var $6892236ee0bf6afc$export$953cecd6e717a553 = function(value, dimension) {
        return typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 : value / dimension;
    };
    var $6892236ee0bf6afc$export$7ccc53e8f1e7dfc5 = function(value, dimension) {
        return typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value;
    };
    function $6892236ee0bf6afc$export$3722cfe417b6ed86(fn, args, thisArg) {
        if (fn && typeof fn.call === "function") return fn.apply(thisArg, args);
    }
    function $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(loopable, fn, thisArg, reverse) {
        var i, len, keys;
        if ($6892236ee0bf6afc$export$8b22cf2602fb60ce(loopable)) {
            len = loopable.length;
            if (reverse) for(i = len - 1; i >= 0; i--)fn.call(thisArg, loopable[i], i);
            else for(i = 0; i < len; i++)fn.call(thisArg, loopable[i], i);
        } else if ($6892236ee0bf6afc$export$23f2a1d2818174ef(loopable)) {
            keys = Object.keys(loopable);
            len = keys.length;
            for(i = 0; i < len; i++)fn.call(thisArg, loopable[keys[i]], keys[i]);
        }
    }
    function $6892236ee0bf6afc$export$ee7c8ad385a60b7b(a0, a1) {
        var i, ilen, v0, v1;
        if (!a0 || !a1 || a0.length !== a1.length) return false;
        for(i = 0, ilen = a0.length; i < ilen; ++i){
            v0 = a0[i];
            v1 = a1[i];
            if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) return false;
        }
        return true;
    }
    function $6892236ee0bf6afc$export$c03999cb2f36933f(source) {
        if ($6892236ee0bf6afc$export$8b22cf2602fb60ce(source)) return source.map($6892236ee0bf6afc$export$c03999cb2f36933f);
        if ($6892236ee0bf6afc$export$23f2a1d2818174ef(source)) {
            var target = Object.create(null);
            var keys = Object.keys(source);
            var klen = keys.length;
            var k = 0;
            for(; k < klen; ++k)target[keys[k]] = $6892236ee0bf6afc$export$c03999cb2f36933f(source[keys[k]]);
            return target;
        }
        return source;
    }
    function $6892236ee0bf6afc$var$isValidKey(key) {
        return [
            "__proto__",
            "prototype",
            "constructor"
        ].indexOf(key) === -1;
    }
    function $6892236ee0bf6afc$export$2ed0fc6709e59212(key, target, source, options) {
        if (!$6892236ee0bf6afc$var$isValidKey(key)) return;
        var tval = target[key];
        var sval = source[key];
        if ($6892236ee0bf6afc$export$23f2a1d2818174ef(tval) && $6892236ee0bf6afc$export$23f2a1d2818174ef(sval)) $6892236ee0bf6afc$export$6559d589eb85fbb6(tval, sval, options);
        else target[key] = $6892236ee0bf6afc$export$c03999cb2f36933f(sval);
    }
    function $6892236ee0bf6afc$export$6559d589eb85fbb6(target, source, options) {
        var sources = $6892236ee0bf6afc$export$8b22cf2602fb60ce(source) ? source : [
            source
        ];
        var ilen = sources.length;
        if (!$6892236ee0bf6afc$export$23f2a1d2818174ef(target)) return target;
        options = options || {
        };
        var merger = options.merger || $6892236ee0bf6afc$export$2ed0fc6709e59212;
        for(var i = 0; i < ilen; ++i){
            source = sources[i];
            if (!$6892236ee0bf6afc$export$23f2a1d2818174ef(source)) continue;
            var keys = Object.keys(source);
            for(var k = 0, klen = keys.length; k < klen; ++k)merger(keys[k], target, source, options);
        }
        return target;
    }
    function $6892236ee0bf6afc$export$7910e0436ed8d1de(target, source) {
        return $6892236ee0bf6afc$export$6559d589eb85fbb6(target, source, {
            merger: $6892236ee0bf6afc$export$f96d196f7728bb5
        });
    }
    function $6892236ee0bf6afc$export$f96d196f7728bb5(key, target, source) {
        if (!$6892236ee0bf6afc$var$isValidKey(key)) return;
        var tval = target[key];
        var sval = source[key];
        if ($6892236ee0bf6afc$export$23f2a1d2818174ef(tval) && $6892236ee0bf6afc$export$23f2a1d2818174ef(sval)) $6892236ee0bf6afc$export$7910e0436ed8d1de(tval, sval);
        else if (!Object.prototype.hasOwnProperty.call(target, key)) target[key] = $6892236ee0bf6afc$export$c03999cb2f36933f(sval);
    }
    function $6892236ee0bf6afc$export$738ab4df8bf92ae9(scope, value, previous, current) {
        if (value !== undefined) console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
    }
    var $6892236ee0bf6afc$var$emptyString = "";
    var $6892236ee0bf6afc$var$dot = ".";
    function $6892236ee0bf6afc$var$indexOfDotOrLength(key, start) {
        var idx = key.indexOf($6892236ee0bf6afc$var$dot, start);
        return idx === -1 ? key.length : idx;
    }
    function $6892236ee0bf6afc$export$2d1720544b23b823(obj, key) {
        if (key === $6892236ee0bf6afc$var$emptyString) return obj;
        var pos = 0;
        var idx = $6892236ee0bf6afc$var$indexOfDotOrLength(key, pos);
        while(obj && idx > pos){
            obj = obj[key.slice(pos, idx)];
            pos = idx + 1;
            idx = $6892236ee0bf6afc$var$indexOfDotOrLength(key, pos);
        }
        return obj;
    }
    function $6892236ee0bf6afc$export$efca4cbe5dd06740(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
    var $6892236ee0bf6afc$export$35e795649ee09318 = function(value) {
        return typeof value !== "undefined";
    };
    var $6892236ee0bf6afc$export$2e2af4578d910ddf = function(value) {
        return typeof value === "function";
    };
    var $6892236ee0bf6afc$export$c9170ad7d4cd7e57 = function(a, b) {
        if (a.size !== b.size) return false;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = a[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var item = _step.value;
                if (!b.has(item)) return false;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
        return true;
    };
    function $6892236ee0bf6afc$export$995eb9fca571757(e) {
        return e.type === "mouseup" || e.type === "click" || e.type === "contextmenu";
    }
    var $6892236ee0bf6afc$export$56c0d5a1e737357d = Math.PI;
    var $6892236ee0bf6afc$export$971d5caa766a69d7 = 2 * $6892236ee0bf6afc$export$56c0d5a1e737357d;
    var $6892236ee0bf6afc$export$e171bab687b50e0 = $6892236ee0bf6afc$export$971d5caa766a69d7 + $6892236ee0bf6afc$export$56c0d5a1e737357d;
    var $6892236ee0bf6afc$export$527e9aa3390079e9 = Number.POSITIVE_INFINITY;
    var $6892236ee0bf6afc$export$a17c37559e1db147 = $6892236ee0bf6afc$export$56c0d5a1e737357d / 180;
    var $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd = $6892236ee0bf6afc$export$56c0d5a1e737357d / 2;
    var $6892236ee0bf6afc$export$fef3dfd9bad05307 = $6892236ee0bf6afc$export$56c0d5a1e737357d / 4;
    var $6892236ee0bf6afc$export$8c78c7c36408ea29 = $6892236ee0bf6afc$export$56c0d5a1e737357d * 2 / 3;
    var $6892236ee0bf6afc$export$3a1a48c8f6ef640e = Math.log10;
    var $6892236ee0bf6afc$export$2408f22a0fab9ae5 = Math.sign;
    function $6892236ee0bf6afc$export$cf2f7c5792f80b46(range) {
        var roundedRange = Math.round(range);
        range = $6892236ee0bf6afc$export$a33b77bbdbb8366c(range, roundedRange, range / 1000) ? roundedRange : range;
        var niceRange = Math.pow(10, Math.floor($6892236ee0bf6afc$export$3a1a48c8f6ef640e(range)));
        var fraction = range / niceRange;
        var niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
        return niceFraction * niceRange;
    }
    function $6892236ee0bf6afc$export$a07804094c3ecf2d(value) {
        var result = [];
        var sqrt = Math.sqrt(value);
        var i;
        for(i = 1; i < sqrt; i++)if (value % i === 0) {
            result.push(i);
            result.push(value / i);
        }
        if (sqrt === (sqrt | 0)) result.push(sqrt);
        result.sort(function(a, b) {
            return a - b;
        }).pop();
        return result;
    }
    function $6892236ee0bf6afc$export$9e5f44173e64f162(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }
    function $6892236ee0bf6afc$export$a33b77bbdbb8366c(x, y, epsilon) {
        return Math.abs(x - y) < epsilon;
    }
    function $6892236ee0bf6afc$export$53a70dd1ebbae346(x, epsilon) {
        var rounded = Math.round(x);
        return rounded - epsilon <= x && rounded + epsilon >= x;
    }
    function $6892236ee0bf6afc$export$158acd800e1ef08b(array, target, property) {
        var i, ilen, value;
        for(i = 0, ilen = array.length; i < ilen; i++){
            value = array[i][property];
            if (!isNaN(value)) {
                target.min = Math.min(target.min, value);
                target.max = Math.max(target.max, value);
            }
        }
    }
    function $6892236ee0bf6afc$export$625550452a3fa3ec(degrees) {
        return degrees * ($6892236ee0bf6afc$export$56c0d5a1e737357d / 180);
    }
    function $6892236ee0bf6afc$export$25ce5a424b770e84(radians) {
        return radians * (180 / $6892236ee0bf6afc$export$56c0d5a1e737357d);
    }
    function $6892236ee0bf6afc$export$b9a6b53f9be3734(x) {
        if (!$6892236ee0bf6afc$export$39b482c5e57630a8(x)) return;
        var e = 1;
        var p = 0;
        while(Math.round(x * e) / e !== x){
            e *= 10;
            p++;
        }
        return p;
    }
    function $6892236ee0bf6afc$export$e7094788287c5e9b(centrePoint, anglePoint) {
        var distanceFromXCenter = anglePoint.x - centrePoint.x;
        var distanceFromYCenter = anglePoint.y - centrePoint.y;
        var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
        var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
        if (angle < -0.5 * $6892236ee0bf6afc$export$56c0d5a1e737357d) angle += $6892236ee0bf6afc$export$971d5caa766a69d7;
        return {
            angle: angle,
            distance: radialDistanceFromCenter
        };
    }
    function $6892236ee0bf6afc$export$24baa2b76016ce0e(pt1, pt2) {
        return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
    }
    function $6892236ee0bf6afc$export$d29e374196577086(a, b) {
        return (a - b + $6892236ee0bf6afc$export$e171bab687b50e0) % $6892236ee0bf6afc$export$971d5caa766a69d7 - $6892236ee0bf6afc$export$56c0d5a1e737357d;
    }
    function $6892236ee0bf6afc$export$9fa96a7d116ea3ce(a) {
        return (a % $6892236ee0bf6afc$export$971d5caa766a69d7 + $6892236ee0bf6afc$export$971d5caa766a69d7) % $6892236ee0bf6afc$export$971d5caa766a69d7;
    }
    function $6892236ee0bf6afc$export$ffb5f4729a158638(angle, start, end, sameAngleIsFullCircle) {
        var a = $6892236ee0bf6afc$export$9fa96a7d116ea3ce(angle);
        var s = $6892236ee0bf6afc$export$9fa96a7d116ea3ce(start);
        var e = $6892236ee0bf6afc$export$9fa96a7d116ea3ce(end);
        var angleToStart = $6892236ee0bf6afc$export$9fa96a7d116ea3ce(s - a);
        var angleToEnd = $6892236ee0bf6afc$export$9fa96a7d116ea3ce(e - a);
        var startToAngle = $6892236ee0bf6afc$export$9fa96a7d116ea3ce(a - s);
        var endToAngle = $6892236ee0bf6afc$export$9fa96a7d116ea3ce(a - e);
        return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
    }
    function $6892236ee0bf6afc$export$efccba1c4a2ef57b(value, min, max) {
        return Math.max(min, Math.min(max, value));
    }
    function $6892236ee0bf6afc$export$e7c866399fa523f5(value) {
        return $6892236ee0bf6afc$export$efccba1c4a2ef57b(value, -32768, 32767);
    }
    function $6892236ee0bf6afc$export$f38c853ae54ed474(value, start, end) {
        var epsilon = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.000001;
        return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
    }
    var $6892236ee0bf6afc$var$atEdge = function(t) {
        return t === 0 || t === 1;
    };
    var $6892236ee0bf6afc$var$elasticIn = function(t, s, p) {
        return -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * $6892236ee0bf6afc$export$971d5caa766a69d7 / p));
    };
    var $6892236ee0bf6afc$var$elasticOut = function(t, s, p) {
        return Math.pow(2, -10 * t) * Math.sin((t - s) * $6892236ee0bf6afc$export$971d5caa766a69d7 / p) + 1;
    };
    var $6892236ee0bf6afc$export$f1e1789686576879 = {
        linear: function(t) {
            return t;
        },
        easeInQuad: function(t) {
            return t * t;
        },
        easeOutQuad: function(t) {
            return -t * (t - 2);
        },
        easeInOutQuad: function(t) {
            return (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1);
        },
        easeInCubic: function(t) {
            return t * t * t;
        },
        easeOutCubic: function(t) {
            return (t -= 1) * t * t + 1;
        },
        easeInOutCubic: function(t) {
            return (t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2);
        },
        easeInQuart: function(t) {
            return t * t * t * t;
        },
        easeOutQuart: function(t) {
            return -((t -= 1) * t * t * t - 1);
        },
        easeInOutQuart: function(t) {
            return (t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2);
        },
        easeInQuint: function(t) {
            return t * t * t * t * t;
        },
        easeOutQuint: function(t) {
            return (t -= 1) * t * t * t * t + 1;
        },
        easeInOutQuint: function(t) {
            return (t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2);
        },
        easeInSine: function(t) {
            return -Math.cos(t * $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd) + 1;
        },
        easeOutSine: function(t) {
            return Math.sin(t * $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd);
        },
        easeInOutSine: function(t) {
            return -0.5 * (Math.cos($6892236ee0bf6afc$export$56c0d5a1e737357d * t) - 1);
        },
        easeInExpo: function(t) {
            return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));
        },
        easeOutExpo: function(t) {
            return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;
        },
        easeInOutExpo: function(t) {
            return $6892236ee0bf6afc$var$atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2);
        },
        easeInCirc: function(t) {
            return t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1);
        },
        easeOutCirc: function(t) {
            return Math.sqrt(1 - (t -= 1) * t);
        },
        easeInOutCirc: function(t) {
            return (t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
        },
        easeInElastic: function(t) {
            return $6892236ee0bf6afc$var$atEdge(t) ? t : $6892236ee0bf6afc$var$elasticIn(t, 0.075, 0.3);
        },
        easeOutElastic: function(t) {
            return $6892236ee0bf6afc$var$atEdge(t) ? t : $6892236ee0bf6afc$var$elasticOut(t, 0.075, 0.3);
        },
        easeInOutElastic: function(t) {
            var s = 0.1125;
            var p = 0.45;
            return $6892236ee0bf6afc$var$atEdge(t) ? t : t < 0.5 ? 0.5 * $6892236ee0bf6afc$var$elasticIn(t * 2, s, p) : 0.5 + 0.5 * $6892236ee0bf6afc$var$elasticOut(t * 2 - 1, s, p);
        },
        easeInBack: function(t) {
            var s = 1.70158;
            return t * t * ((s + 1) * t - s);
        },
        easeOutBack: function(t) {
            var s = 1.70158;
            return (t -= 1) * t * ((s + 1) * t + s) + 1;
        },
        easeInOutBack: function(t) {
            var s = 1.70158;
            if ((t /= 0.5) < 1) return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
            return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
        },
        easeInBounce: function(t) {
            return 1 - $6892236ee0bf6afc$export$f1e1789686576879.easeOutBounce(1 - t);
        },
        easeOutBounce: function(t) {
            var m = 7.5625;
            var d = 2.75;
            if (t < 1 / d) return m * t * t;
            if (t < 2 / d) return m * (t -= 1.5 / d) * t + 0.75;
            if (t < 2.5 / d) return m * (t -= 2.25 / d) * t + 0.9375;
            return m * (t -= 2.625 / d) * t + 0.984375;
        },
        easeInOutBounce: function(t) {
            return t < 0.5 ? $6892236ee0bf6afc$export$f1e1789686576879.easeInBounce(t * 2) * 0.5 : $6892236ee0bf6afc$export$f1e1789686576879.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
        }
    };
    /*!
 * @kurkle/color v0.2.1
 * https://github.com/kurkle/color#readme
 * (c) 2022 Jukka Kurkela
 * Released under the MIT License
 */ function $6892236ee0bf6afc$var$round(v) {
        return v + 0.5 | 0;
    }
    var $6892236ee0bf6afc$var$lim = function(v, l, h) {
        return Math.max(Math.min(v, h), l);
    };
    function $6892236ee0bf6afc$var$p2b(v) {
        return $6892236ee0bf6afc$var$lim($6892236ee0bf6afc$var$round(v * 2.55), 0, 255);
    }
    function $6892236ee0bf6afc$var$n2b(v) {
        return $6892236ee0bf6afc$var$lim($6892236ee0bf6afc$var$round(v * 255), 0, 255);
    }
    function $6892236ee0bf6afc$var$b2n(v) {
        return $6892236ee0bf6afc$var$lim($6892236ee0bf6afc$var$round(v / 2.55) / 100, 0, 1);
    }
    function $6892236ee0bf6afc$var$n2p(v) {
        return $6892236ee0bf6afc$var$lim($6892236ee0bf6afc$var$round(v * 100), 0, 100);
    }
    var $6892236ee0bf6afc$var$map$1 = {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        A: 10,
        B: 11,
        C: 12,
        D: 13,
        E: 14,
        F: 15,
        a: 10,
        b: 11,
        c: 12,
        d: 13,
        e: 14,
        f: 15
    };
    var $6892236ee0bf6afc$var$hex = Array.from("0123456789ABCDEF");
    var $6892236ee0bf6afc$var$h1 = function(b) {
        return $6892236ee0bf6afc$var$hex[b & 15];
    };
    var $6892236ee0bf6afc$var$h2 = function(b) {
        return $6892236ee0bf6afc$var$hex[(b & 240) >> 4] + $6892236ee0bf6afc$var$hex[b & 15];
    };
    var $6892236ee0bf6afc$var$eq = function(b) {
        return (b & 240) >> 4 === (b & 15);
    };
    var $6892236ee0bf6afc$var$isShort = function(v) {
        return $6892236ee0bf6afc$var$eq(v.r) && $6892236ee0bf6afc$var$eq(v.g) && $6892236ee0bf6afc$var$eq(v.b) && $6892236ee0bf6afc$var$eq(v.a);
    };
    function $6892236ee0bf6afc$var$hexParse(str) {
        var len = str.length;
        var ret;
        if (str[0] === "#") {
            if (len === 4 || len === 5) ret = {
                r: 255 & $6892236ee0bf6afc$var$map$1[str[1]] * 17,
                g: 255 & $6892236ee0bf6afc$var$map$1[str[2]] * 17,
                b: 255 & $6892236ee0bf6afc$var$map$1[str[3]] * 17,
                a: len === 5 ? $6892236ee0bf6afc$var$map$1[str[4]] * 17 : 255
            };
            else if (len === 7 || len === 9) ret = {
                r: $6892236ee0bf6afc$var$map$1[str[1]] << 4 | $6892236ee0bf6afc$var$map$1[str[2]],
                g: $6892236ee0bf6afc$var$map$1[str[3]] << 4 | $6892236ee0bf6afc$var$map$1[str[4]],
                b: $6892236ee0bf6afc$var$map$1[str[5]] << 4 | $6892236ee0bf6afc$var$map$1[str[6]],
                a: len === 9 ? $6892236ee0bf6afc$var$map$1[str[7]] << 4 | $6892236ee0bf6afc$var$map$1[str[8]] : 255
            };
        }
        return ret;
    }
    var $6892236ee0bf6afc$var$alpha = function(a, f) {
        return a < 255 ? f(a) : "";
    };
    function $6892236ee0bf6afc$var$hexString(v) {
        var f = $6892236ee0bf6afc$var$isShort(v) ? $6892236ee0bf6afc$var$h1 : $6892236ee0bf6afc$var$h2;
        return v ? "#" + f(v.r) + f(v.g) + f(v.b) + $6892236ee0bf6afc$var$alpha(v.a, f) : undefined;
    }
    var $6892236ee0bf6afc$var$HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
    function $6892236ee0bf6afc$var$hsl2rgbn(h, s, l) {
        var a = s * Math.min(l, 1 - l);
        var f = function(n) {
            var k = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : (n + h / 30) % 12;
            return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        };
        return [
            f(0),
            f(8),
            f(4)
        ];
    }
    function $6892236ee0bf6afc$var$hsv2rgbn(h, s, v) {
        var f = function(n) {
            var k = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : (n + h / 60) % 6;
            return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
        };
        return [
            f(5),
            f(3),
            f(1)
        ];
    }
    function $6892236ee0bf6afc$var$hwb2rgbn(h, w, b) {
        var rgb = $6892236ee0bf6afc$var$hsl2rgbn(h, 1, 0.5);
        var i;
        if (w + b > 1) {
            i = 1 / (w + b);
            w *= i;
            b *= i;
        }
        for(i = 0; i < 3; i++){
            rgb[i] *= 1 - w - b;
            rgb[i] += w;
        }
        return rgb;
    }
    function $6892236ee0bf6afc$var$hueValue(r, g, b, d, max) {
        if (r === max) return (g - b) / d + (g < b ? 6 : 0);
        if (g === max) return (b - r) / d + 2;
        return (r - g) / d + 4;
    }
    function $6892236ee0bf6afc$var$rgb2hsl(v) {
        var range = 255;
        var r = v.r / range;
        var g = v.g / range;
        var b = v.b / range;
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var l = (max + min) / 2;
        var h, s, d;
        if (max !== min) {
            d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            h = $6892236ee0bf6afc$var$hueValue(r, g, b, d, max);
            h = h * 60 + 0.5;
        }
        return [
            h | 0,
            s || 0,
            l
        ];
    }
    function $6892236ee0bf6afc$var$calln(f, a, b, c) {
        return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map($6892236ee0bf6afc$var$n2b);
    }
    function $6892236ee0bf6afc$var$hsl2rgb(h, s, l) {
        return $6892236ee0bf6afc$var$calln($6892236ee0bf6afc$var$hsl2rgbn, h, s, l);
    }
    function $6892236ee0bf6afc$var$hwb2rgb(h, w, b) {
        return $6892236ee0bf6afc$var$calln($6892236ee0bf6afc$var$hwb2rgbn, h, w, b);
    }
    function $6892236ee0bf6afc$var$hsv2rgb(h, s, v) {
        return $6892236ee0bf6afc$var$calln($6892236ee0bf6afc$var$hsv2rgbn, h, s, v);
    }
    function $6892236ee0bf6afc$var$hue(h) {
        return (h % 360 + 360) % 360;
    }
    function $6892236ee0bf6afc$var$hueParse(str) {
        var m = $6892236ee0bf6afc$var$HUE_RE.exec(str);
        var a = 255;
        var v;
        if (!m) return;
        if (m[5] !== v) a = m[6] ? $6892236ee0bf6afc$var$p2b(+m[5]) : $6892236ee0bf6afc$var$n2b(+m[5]);
        var h = $6892236ee0bf6afc$var$hue(+m[2]);
        var p1 = +m[3] / 100;
        var p2 = +m[4] / 100;
        if (m[1] === "hwb") v = $6892236ee0bf6afc$var$hwb2rgb(h, p1, p2);
        else if (m[1] === "hsv") v = $6892236ee0bf6afc$var$hsv2rgb(h, p1, p2);
        else v = $6892236ee0bf6afc$var$hsl2rgb(h, p1, p2);
        return {
            r: v[0],
            g: v[1],
            b: v[2],
            a: a
        };
    }
    function $6892236ee0bf6afc$var$rotate(v, deg) {
        var h = $6892236ee0bf6afc$var$rgb2hsl(v);
        h[0] = $6892236ee0bf6afc$var$hue(h[0] + deg);
        h = $6892236ee0bf6afc$var$hsl2rgb(h);
        v.r = h[0];
        v.g = h[1];
        v.b = h[2];
    }
    function $6892236ee0bf6afc$var$hslString(v) {
        if (!v) return;
        var a = $6892236ee0bf6afc$var$rgb2hsl(v);
        var h = a[0];
        var s = $6892236ee0bf6afc$var$n2p(a[1]);
        var l = $6892236ee0bf6afc$var$n2p(a[2]);
        return v.a < 255 ? "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat($6892236ee0bf6afc$var$b2n(v.a), ")") : "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)");
    }
    var $6892236ee0bf6afc$var$map = {
        x: "dark",
        Z: "light",
        Y: "re",
        X: "blu",
        W: "gr",
        V: "medium",
        U: "slate",
        A: "ee",
        T: "ol",
        S: "or",
        B: "ra",
        C: "lateg",
        D: "ights",
        R: "in",
        Q: "turquois",
        E: "hi",
        P: "ro",
        O: "al",
        N: "le",
        M: "de",
        L: "yello",
        F: "en",
        K: "ch",
        G: "arks",
        H: "ea",
        I: "ightg",
        J: "wh"
    };
    var $6892236ee0bf6afc$var$names$1 = {
        OiceXe: "f0f8ff",
        antiquewEte: "faebd7",
        aqua: "ffff",
        aquamarRe: "7fffd4",
        azuY: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "0",
        blanKedOmond: "ffebcd",
        Xe: "ff",
        XeviTet: "8a2be2",
        bPwn: "a52a2a",
        burlywood: "deb887",
        caMtXe: "5f9ea0",
        KartYuse: "7fff00",
        KocTate: "d2691e",
        cSO: "ff7f50",
        cSnflowerXe: "6495ed",
        cSnsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "ffff",
        xXe: "8b",
        xcyan: "8b8b",
        xgTMnPd: "b8860b",
        xWay: "a9a9a9",
        xgYF: "6400",
        xgYy: "a9a9a9",
        xkhaki: "bdb76b",
        xmagFta: "8b008b",
        xTivegYF: "556b2f",
        xSange: "ff8c00",
        xScEd: "9932cc",
        xYd: "8b0000",
        xsOmon: "e9967a",
        xsHgYF: "8fbc8f",
        xUXe: "483d8b",
        xUWay: "2f4f4f",
        xUgYy: "2f4f4f",
        xQe: "ced1",
        xviTet: "9400d3",
        dAppRk: "ff1493",
        dApskyXe: "bfff",
        dimWay: "696969",
        dimgYy: "696969",
        dodgerXe: "1e90ff",
        fiYbrick: "b22222",
        flSOwEte: "fffaf0",
        foYstWAn: "228b22",
        fuKsia: "ff00ff",
        gaRsbSo: "dcdcdc",
        ghostwEte: "f8f8ff",
        gTd: "ffd700",
        gTMnPd: "daa520",
        Way: "808080",
        gYF: "8000",
        gYFLw: "adff2f",
        gYy: "808080",
        honeyMw: "f0fff0",
        hotpRk: "ff69b4",
        RdianYd: "cd5c5c",
        Rdigo: "4b0082",
        ivSy: "fffff0",
        khaki: "f0e68c",
        lavFMr: "e6e6fa",
        lavFMrXsh: "fff0f5",
        lawngYF: "7cfc00",
        NmoncEffon: "fffacd",
        ZXe: "add8e6",
        ZcSO: "f08080",
        Zcyan: "e0ffff",
        ZgTMnPdLw: "fafad2",
        ZWay: "d3d3d3",
        ZgYF: "90ee90",
        ZgYy: "d3d3d3",
        ZpRk: "ffb6c1",
        ZsOmon: "ffa07a",
        ZsHgYF: "20b2aa",
        ZskyXe: "87cefa",
        ZUWay: "778899",
        ZUgYy: "778899",
        ZstAlXe: "b0c4de",
        ZLw: "ffffe0",
        lime: "ff00",
        limegYF: "32cd32",
        lRF: "faf0e6",
        magFta: "ff00ff",
        maPon: "800000",
        VaquamarRe: "66cdaa",
        VXe: "cd",
        VScEd: "ba55d3",
        VpurpN: "9370db",
        VsHgYF: "3cb371",
        VUXe: "7b68ee",
        VsprRggYF: "fa9a",
        VQe: "48d1cc",
        VviTetYd: "c71585",
        midnightXe: "191970",
        mRtcYam: "f5fffa",
        mistyPse: "ffe4e1",
        moccasR: "ffe4b5",
        navajowEte: "ffdead",
        navy: "80",
        Tdlace: "fdf5e6",
        Tive: "808000",
        TivedBb: "6b8e23",
        Sange: "ffa500",
        SangeYd: "ff4500",
        ScEd: "da70d6",
        pOegTMnPd: "eee8aa",
        pOegYF: "98fb98",
        pOeQe: "afeeee",
        pOeviTetYd: "db7093",
        papayawEp: "ffefd5",
        pHKpuff: "ffdab9",
        peru: "cd853f",
        pRk: "ffc0cb",
        plum: "dda0dd",
        powMrXe: "b0e0e6",
        purpN: "800080",
        YbeccapurpN: "663399",
        Yd: "ff0000",
        Psybrown: "bc8f8f",
        PyOXe: "4169e1",
        saddNbPwn: "8b4513",
        sOmon: "fa8072",
        sandybPwn: "f4a460",
        sHgYF: "2e8b57",
        sHshell: "fff5ee",
        siFna: "a0522d",
        silver: "c0c0c0",
        skyXe: "87ceeb",
        UXe: "6a5acd",
        UWay: "708090",
        UgYy: "708090",
        snow: "fffafa",
        sprRggYF: "ff7f",
        stAlXe: "4682b4",
        tan: "d2b48c",
        teO: "8080",
        tEstN: "d8bfd8",
        tomato: "ff6347",
        Qe: "40e0d0",
        viTet: "ee82ee",
        JHt: "f5deb3",
        wEte: "ffffff",
        wEtesmoke: "f5f5f5",
        Lw: "ffff00",
        LwgYF: "9acd32"
    };
    function $6892236ee0bf6afc$var$unpack() {
        var unpacked = {
        };
        var keys = Object.keys($6892236ee0bf6afc$var$names$1);
        var tkeys = Object.keys($6892236ee0bf6afc$var$map);
        var i, j, k, ok, nk;
        for(i = 0; i < keys.length; i++){
            ok = nk = keys[i];
            for(j = 0; j < tkeys.length; j++){
                k = tkeys[j];
                nk = nk.replace(k, $6892236ee0bf6afc$var$map[k]);
            }
            k = parseInt($6892236ee0bf6afc$var$names$1[ok], 16);
            unpacked[nk] = [
                k >> 16 & 255,
                k >> 8 & 255,
                k & 255
            ];
        }
        return unpacked;
    }
    var $6892236ee0bf6afc$var$names;
    function $6892236ee0bf6afc$var$nameParse(str) {
        if (!$6892236ee0bf6afc$var$names) {
            $6892236ee0bf6afc$var$names = $6892236ee0bf6afc$var$unpack();
            $6892236ee0bf6afc$var$names.transparent = [
                0,
                0,
                0,
                0
            ];
        }
        var a = $6892236ee0bf6afc$var$names[str.toLowerCase()];
        return a && {
            r: a[0],
            g: a[1],
            b: a[2],
            a: a.length === 4 ? a[3] : 255
        };
    }
    var $6892236ee0bf6afc$var$RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
    function $6892236ee0bf6afc$var$rgbParse(str) {
        var m = $6892236ee0bf6afc$var$RGB_RE.exec(str);
        var a = 255;
        var r, g, b;
        if (!m) return;
        if (m[7] !== r) {
            var v = +m[7];
            a = m[8] ? $6892236ee0bf6afc$var$p2b(v) : $6892236ee0bf6afc$var$lim(v * 255, 0, 255);
        }
        r = +m[1];
        g = +m[3];
        b = +m[5];
        r = 255 & (m[2] ? $6892236ee0bf6afc$var$p2b(r) : $6892236ee0bf6afc$var$lim(r, 0, 255));
        g = 255 & (m[4] ? $6892236ee0bf6afc$var$p2b(g) : $6892236ee0bf6afc$var$lim(g, 0, 255));
        b = 255 & (m[6] ? $6892236ee0bf6afc$var$p2b(b) : $6892236ee0bf6afc$var$lim(b, 0, 255));
        return {
            r: r,
            g: g,
            b: b,
            a: a
        };
    }
    function $6892236ee0bf6afc$var$rgbString(v) {
        return v && (v.a < 255 ? "rgba(".concat(v.r, ", ").concat(v.g, ", ").concat(v.b, ", ").concat($6892236ee0bf6afc$var$b2n(v.a), ")") : "rgb(".concat(v.r, ", ").concat(v.g, ", ").concat(v.b, ")"));
    }
    var $6892236ee0bf6afc$var$to = function(v) {
        return v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1 / 2.4) * 1.055 - 0.055;
    };
    var $6892236ee0bf6afc$var$from = function(v) {
        return v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
    };
    function $6892236ee0bf6afc$var$interpolate(rgb1, rgb2, t) {
        var r = $6892236ee0bf6afc$var$from($6892236ee0bf6afc$var$b2n(rgb1.r));
        var g = $6892236ee0bf6afc$var$from($6892236ee0bf6afc$var$b2n(rgb1.g));
        var b = $6892236ee0bf6afc$var$from($6892236ee0bf6afc$var$b2n(rgb1.b));
        return {
            r: $6892236ee0bf6afc$var$n2b($6892236ee0bf6afc$var$to(r + t * ($6892236ee0bf6afc$var$from($6892236ee0bf6afc$var$b2n(rgb2.r)) - r))),
            g: $6892236ee0bf6afc$var$n2b($6892236ee0bf6afc$var$to(g + t * ($6892236ee0bf6afc$var$from($6892236ee0bf6afc$var$b2n(rgb2.g)) - g))),
            b: $6892236ee0bf6afc$var$n2b($6892236ee0bf6afc$var$to(b + t * ($6892236ee0bf6afc$var$from($6892236ee0bf6afc$var$b2n(rgb2.b)) - b))),
            a: rgb1.a + t * (rgb2.a - rgb1.a)
        };
    }
    function $6892236ee0bf6afc$var$modHSL(v, i, ratio) {
        if (v) {
            var tmp = $6892236ee0bf6afc$var$rgb2hsl(v);
            tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
            tmp = $6892236ee0bf6afc$var$hsl2rgb(tmp);
            v.r = tmp[0];
            v.g = tmp[1];
            v.b = tmp[2];
        }
    }
    function $6892236ee0bf6afc$var$clone(v, proto) {
        return v ? Object.assign(proto || {
        }, v) : v;
    }
    function $6892236ee0bf6afc$var$fromObject(input) {
        var v = {
            r: 0,
            g: 0,
            b: 0,
            a: 255
        };
        if (Array.isArray(input)) {
            if (input.length >= 3) {
                v = {
                    r: input[0],
                    g: input[1],
                    b: input[2],
                    a: 255
                };
                if (input.length > 3) v.a = $6892236ee0bf6afc$var$n2b(input[3]);
            }
        } else {
            v = $6892236ee0bf6afc$var$clone(input, {
                r: 0,
                g: 0,
                b: 0,
                a: 1
            });
            v.a = $6892236ee0bf6afc$var$n2b(v.a);
        }
        return v;
    }
    function $6892236ee0bf6afc$var$functionParse(str) {
        if (str.charAt(0) === "r") return $6892236ee0bf6afc$var$rgbParse(str);
        return $6892236ee0bf6afc$var$hueParse(str);
    }
    var $6892236ee0bf6afc$var$Color = /*#__PURE__*/ function() {
        function Color(input) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Color);
            if (input instanceof Color) return input;
            var type = typeof input === "undefined" ? "undefined" : /*@__PURE__*/ $parcel$interopDefault($9EtEN)(input);
            var v;
            if (type === "object") v = $6892236ee0bf6afc$var$fromObject(input);
            else if (type === "string") v = $6892236ee0bf6afc$var$hexParse(input) || $6892236ee0bf6afc$var$nameParse(input) || $6892236ee0bf6afc$var$functionParse(input);
            this._rgb = v;
            this._valid = !!v;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Color, [
            {
                key: "valid",
                get: function get() {
                    return this._valid;
                }
            },
            {
                key: "rgb",
                get: function get() {
                    var v = $6892236ee0bf6afc$var$clone(this._rgb);
                    if (v) v.a = $6892236ee0bf6afc$var$b2n(v.a);
                    return v;
                },
                set: function set1(obj) {
                    this._rgb = $6892236ee0bf6afc$var$fromObject(obj);
                }
            },
            {
                key: "rgbString",
                value: function rgbString1() {
                    return this._valid ? $6892236ee0bf6afc$var$rgbString(this._rgb) : undefined;
                }
            },
            {
                key: "hexString",
                value: function hexString1() {
                    return this._valid ? $6892236ee0bf6afc$var$hexString(this._rgb) : undefined;
                }
            },
            {
                key: "hslString",
                value: function hslString1() {
                    return this._valid ? $6892236ee0bf6afc$var$hslString(this._rgb) : undefined;
                }
            },
            {
                key: "mix",
                value: function mix(color1, weight) {
                    if (color1) {
                        var c1 = this.rgb;
                        var c2 = color1.rgb;
                        var w2;
                        var p = weight === w2 ? 0.5 : weight;
                        var w = 2 * p - 1;
                        var a = c1.a - c2.a;
                        var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
                        w2 = 1 - w1;
                        c1.r = 255 & w1 * c1.r + w2 * c2.r + 0.5;
                        c1.g = 255 & w1 * c1.g + w2 * c2.g + 0.5;
                        c1.b = 255 & w1 * c1.b + w2 * c2.b + 0.5;
                        c1.a = p * c1.a + (1 - p) * c2.a;
                        this.rgb = c1;
                    }
                    return this;
                }
            },
            {
                key: "interpolate",
                value: function interpolate1(color2, t) {
                    if (color2) this._rgb = $6892236ee0bf6afc$var$interpolate(this._rgb, color2._rgb, t);
                    return this;
                }
            },
            {
                key: "clone",
                value: function clone() {
                    return new Color(this.rgb);
                }
            },
            {
                key: "alpha",
                value: function alpha(a) {
                    this._rgb.a = $6892236ee0bf6afc$var$n2b(a);
                    return this;
                }
            },
            {
                key: "clearer",
                value: function clearer(ratio) {
                    var rgb = this._rgb;
                    rgb.a *= 1 - ratio;
                    return this;
                }
            },
            {
                key: "greyscale",
                value: function greyscale() {
                    var rgb = this._rgb;
                    var val = $6892236ee0bf6afc$var$round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
                    rgb.r = rgb.g = rgb.b = val;
                    return this;
                }
            },
            {
                key: "opaquer",
                value: function opaquer(ratio) {
                    var rgb = this._rgb;
                    rgb.a *= 1 + ratio;
                    return this;
                }
            },
            {
                key: "negate",
                value: function negate() {
                    var v = this._rgb;
                    v.r = 255 - v.r;
                    v.g = 255 - v.g;
                    v.b = 255 - v.b;
                    return this;
                }
            },
            {
                key: "lighten",
                value: function lighten(ratio) {
                    $6892236ee0bf6afc$var$modHSL(this._rgb, 2, ratio);
                    return this;
                }
            },
            {
                key: "darken",
                value: function darken(ratio) {
                    $6892236ee0bf6afc$var$modHSL(this._rgb, 2, -ratio);
                    return this;
                }
            },
            {
                key: "saturate",
                value: function saturate(ratio) {
                    $6892236ee0bf6afc$var$modHSL(this._rgb, 1, ratio);
                    return this;
                }
            },
            {
                key: "desaturate",
                value: function desaturate(ratio) {
                    $6892236ee0bf6afc$var$modHSL(this._rgb, 1, -ratio);
                    return this;
                }
            },
            {
                key: "rotate",
                value: function rotate1(deg) {
                    $6892236ee0bf6afc$var$rotate(this._rgb, deg);
                    return this;
                }
            }
        ]);
        return Color;
    }();
    function $6892236ee0bf6afc$var$index_esm(input) {
        return new $6892236ee0bf6afc$var$Color(input);
    }
    function $6892236ee0bf6afc$export$9f4f30ee63539e24(value) {
        if (value && typeof value === "object") {
            var type = value.toString();
            return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
        }
        return false;
    }
    function $6892236ee0bf6afc$export$db3b6bfb95261072(value) {
        return $6892236ee0bf6afc$export$9f4f30ee63539e24(value) ? value : $6892236ee0bf6afc$var$index_esm(value);
    }
    function $6892236ee0bf6afc$export$faec65b429be379(value) {
        return $6892236ee0bf6afc$export$9f4f30ee63539e24(value) ? value : $6892236ee0bf6afc$var$index_esm(value).saturate(0.5).darken(0.1).hexString();
    }
    var $6892236ee0bf6afc$export$ce26c07117d59d6a = Object.create(null);
    var $6892236ee0bf6afc$export$a8550f7dbe79f93a = Object.create(null);
    function $6892236ee0bf6afc$var$getScope$1(node, key) {
        if (!key) return node;
        var keys = key.split(".");
        for(var i = 0, n = keys.length; i < n; ++i){
            var k = keys[i];
            node = node[k] || (node[k] = Object.create(null));
        }
        return node;
    }
    function $6892236ee0bf6afc$var$set(root, scope, values) {
        if (typeof scope === "string") return $6892236ee0bf6afc$export$6559d589eb85fbb6($6892236ee0bf6afc$var$getScope$1(root, scope), values);
        return $6892236ee0bf6afc$export$6559d589eb85fbb6($6892236ee0bf6afc$var$getScope$1(root, ""), scope);
    }
    var $6892236ee0bf6afc$var$Defaults = /*#__PURE__*/ function() {
        function Defaults(_descriptors1) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Defaults);
            this.animation = undefined;
            this.backgroundColor = "rgba(0,0,0,0.1)";
            this.borderColor = "rgba(0,0,0,0.1)";
            this.color = "#666";
            this.datasets = {
            };
            this.devicePixelRatio = function(context) {
                return context.chart.platform.getDevicePixelRatio();
            };
            this.elements = {
            };
            this.events = [
                "mousemove",
                "mouseout",
                "click",
                "touchstart",
                "touchmove"
            ];
            this.font = {
                family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                size: 12,
                style: "normal",
                lineHeight: 1.2,
                weight: null
            };
            this.hover = {
            };
            this.hoverBackgroundColor = function(ctx, options) {
                return $6892236ee0bf6afc$export$faec65b429be379(options.backgroundColor);
            };
            this.hoverBorderColor = function(ctx, options) {
                return $6892236ee0bf6afc$export$faec65b429be379(options.borderColor);
            };
            this.hoverColor = function(ctx, options) {
                return $6892236ee0bf6afc$export$faec65b429be379(options.color);
            };
            this.indexAxis = "x";
            this.interaction = {
                mode: "nearest",
                intersect: true,
                includeInvisible: false
            };
            this.maintainAspectRatio = true;
            this.onHover = null;
            this.onClick = null;
            this.parsing = true;
            this.plugins = {
            };
            this.responsive = true;
            this.scale = undefined;
            this.scales = {
            };
            this.showLine = true;
            this.drawActiveElementsOnTop = true;
            this.describe(_descriptors1);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Defaults, [
            {
                key: "set",
                value: function set1(scope, values) {
                    return $6892236ee0bf6afc$var$set(this, scope, values);
                }
            },
            {
                key: "get",
                value: function get(scope) {
                    return $6892236ee0bf6afc$var$getScope$1(this, scope);
                }
            },
            {
                key: "describe",
                value: function describe(scope, values) {
                    return $6892236ee0bf6afc$var$set($6892236ee0bf6afc$export$a8550f7dbe79f93a, scope, values);
                }
            },
            {
                key: "override",
                value: function override(scope, values) {
                    return $6892236ee0bf6afc$var$set($6892236ee0bf6afc$export$ce26c07117d59d6a, scope, values);
                }
            },
            {
                key: "route",
                value: function route(scope, name, targetScope, targetName) {
                    var scopeObject = $6892236ee0bf6afc$var$getScope$1(this, scope);
                    var targetScopeObject = $6892236ee0bf6afc$var$getScope$1(this, targetScope);
                    var privateName = "_" + name;
                    var _obj;
                    Object.defineProperties(scopeObject, (_obj = {
                    }, /*@__PURE__*/ $parcel$interopDefault($1W515)(_obj, privateName, {
                        value: scopeObject[name],
                        writable: true
                    }), /*@__PURE__*/ $parcel$interopDefault($1W515)(_obj, name, {
                        enumerable: true,
                        get: function() {
                            var local = this[privateName];
                            var target = targetScopeObject[targetName];
                            if ($6892236ee0bf6afc$export$23f2a1d2818174ef(local)) return Object.assign({
                            }, target, local);
                            return $6892236ee0bf6afc$export$90a7f3efeed30595(local, target);
                        },
                        set: function(value) {
                            this[privateName] = value;
                        }
                    }), _obj));
                }
            }
        ]);
        return Defaults;
    }();
    var $6892236ee0bf6afc$export$4368d992c4eafac0 = new $6892236ee0bf6afc$var$Defaults({
        _scriptable: function(name) {
            return !name.startsWith("on");
        },
        _indexable: function(name) {
            return name !== "events";
        },
        hover: {
            _fallback: "interaction"
        },
        interaction: {
            _scriptable: false,
            _indexable: false
        }
    });
    function $6892236ee0bf6afc$export$d377dcb2b61d6c4e(font) {
        if (!font || $6892236ee0bf6afc$export$342063e11d6c3cad(font.size) || $6892236ee0bf6afc$export$342063e11d6c3cad(font.family)) return null;
        return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
    }
    function $6892236ee0bf6afc$export$3a6d5c9ae78a2c08(ctx, data, gc, longest, string) {
        var textWidth = data[string];
        if (!textWidth) {
            textWidth = data[string] = ctx.measureText(string).width;
            gc.push(string);
        }
        if (textWidth > longest) longest = textWidth;
        return longest;
    }
    function $6892236ee0bf6afc$export$a05254e7c3aeba6e(ctx, font, arrayOfThings, cache) {
        cache = cache || {
        };
        var data = cache.data = cache.data || {
        };
        var gc = cache.garbageCollect = cache.garbageCollect || [];
        if (cache.font !== font) {
            data = cache.data = {
            };
            gc = cache.garbageCollect = [];
            cache.font = font;
        }
        ctx.save();
        ctx.font = font;
        var longest = 0;
        var ilen = arrayOfThings.length;
        var i, j, jlen, thing, nestedThing;
        for(i = 0; i < ilen; i++){
            thing = arrayOfThings[i];
            if (thing !== undefined && thing !== null && $6892236ee0bf6afc$export$8b22cf2602fb60ce(thing) !== true) longest = $6892236ee0bf6afc$export$3a6d5c9ae78a2c08(ctx, data, gc, longest, thing);
            else if ($6892236ee0bf6afc$export$8b22cf2602fb60ce(thing)) for(j = 0, jlen = thing.length; j < jlen; j++){
                nestedThing = thing[j];
                if (nestedThing !== undefined && nestedThing !== null && !$6892236ee0bf6afc$export$8b22cf2602fb60ce(nestedThing)) longest = $6892236ee0bf6afc$export$3a6d5c9ae78a2c08(ctx, data, gc, longest, nestedThing);
            }
        }
        ctx.restore();
        var gcLen = gc.length / 2;
        if (gcLen > arrayOfThings.length) {
            for(i = 0; i < gcLen; i++)delete data[gc[i]];
            gc.splice(0, gcLen);
        }
        return longest;
    }
    function $6892236ee0bf6afc$export$71cec2538cb2c617(chart, pixel, width) {
        var devicePixelRatio = chart.currentDevicePixelRatio;
        var halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
        return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
    }
    function $6892236ee0bf6afc$export$f787f51d84a910ad(canvas, ctx) {
        ctx = ctx || canvas.getContext("2d");
        ctx.save();
        ctx.resetTransform();
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.restore();
    }
    function $6892236ee0bf6afc$export$6554612db691658e(ctx, options, x, y) {
        var type, xOffset, yOffset, size, cornerRadius;
        var style = options.pointStyle;
        var rotation = options.rotation;
        var radius = options.radius;
        var rad = (rotation || 0) * $6892236ee0bf6afc$export$a17c37559e1db147;
        if (style && typeof style === "object") {
            type = style.toString();
            if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
                ctx.save();
                ctx.translate(x, y);
                ctx.rotate(rad);
                ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
                ctx.restore();
                return;
            }
        }
        if (isNaN(radius) || radius <= 0) return;
        ctx.beginPath();
        switch(style){
            default:
                ctx.arc(x, y, radius, 0, $6892236ee0bf6afc$export$971d5caa766a69d7);
                ctx.closePath();
                break;
            case "triangle":
                ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
                rad += $6892236ee0bf6afc$export$8c78c7c36408ea29;
                ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
                rad += $6892236ee0bf6afc$export$8c78c7c36408ea29;
                ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
                ctx.closePath();
                break;
            case "rectRounded":
                cornerRadius = radius * 0.516;
                size = radius - cornerRadius;
                xOffset = Math.cos(rad + $6892236ee0bf6afc$export$fef3dfd9bad05307) * size;
                yOffset = Math.sin(rad + $6892236ee0bf6afc$export$fef3dfd9bad05307) * size;
                ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - $6892236ee0bf6afc$export$56c0d5a1e737357d, rad - $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd);
                ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd, rad);
                ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd);
                ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd, rad + $6892236ee0bf6afc$export$56c0d5a1e737357d);
                ctx.closePath();
                break;
            case "rect":
                if (!rotation) {
                    size = Math.SQRT1_2 * radius;
                    ctx.rect(x - size, y - size, 2 * size, 2 * size);
                    break;
                }
                rad += $6892236ee0bf6afc$export$fef3dfd9bad05307;
            case "rectRot":
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + yOffset, y - xOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                ctx.lineTo(x - yOffset, y + xOffset);
                ctx.closePath();
                break;
            case "crossRot":
                rad += $6892236ee0bf6afc$export$fef3dfd9bad05307;
            case "cross":
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                ctx.moveTo(x + yOffset, y - xOffset);
                ctx.lineTo(x - yOffset, y + xOffset);
                break;
            case "star":
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                ctx.moveTo(x + yOffset, y - xOffset);
                ctx.lineTo(x - yOffset, y + xOffset);
                rad += $6892236ee0bf6afc$export$fef3dfd9bad05307;
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                ctx.moveTo(x + yOffset, y - xOffset);
                ctx.lineTo(x - yOffset, y + xOffset);
                break;
            case "line":
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                break;
            case "dash":
                ctx.moveTo(x, y);
                ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
                break;
        }
        ctx.fill();
        if (options.borderWidth > 0) ctx.stroke();
    }
    function $6892236ee0bf6afc$export$ef35774e6d314e91(point, area, margin) {
        margin = margin || 0.5;
        return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
    }
    function $6892236ee0bf6afc$export$78acf4525d8a74c4(ctx, area) {
        ctx.save();
        ctx.beginPath();
        ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
        ctx.clip();
    }
    function $6892236ee0bf6afc$export$dc98b0b04f4c7758(ctx) {
        ctx.restore();
    }
    function $6892236ee0bf6afc$export$8a5498727ef6be21(ctx, previous, target, flip, mode) {
        if (!previous) return ctx.lineTo(target.x, target.y);
        if (mode === "middle") {
            var midpoint = (previous.x + target.x) / 2;
            ctx.lineTo(midpoint, previous.y);
            ctx.lineTo(midpoint, target.y);
        } else if (mode === "after" !== !!flip) ctx.lineTo(previous.x, target.y);
        else ctx.lineTo(target.x, previous.y);
        ctx.lineTo(target.x, target.y);
    }
    function $6892236ee0bf6afc$export$d24c54395ce0c509(ctx, previous, target, flip) {
        if (!previous) return ctx.lineTo(target.x, target.y);
        ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
    }
    function $6892236ee0bf6afc$export$8743009a87fcb00f(ctx, text, x, y, font) {
        var opts = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
        };
        var lines = $6892236ee0bf6afc$export$8b22cf2602fb60ce(text) ? text : [
            text
        ];
        var stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
        var i, line;
        ctx.save();
        ctx.font = font.string;
        $6892236ee0bf6afc$var$setRenderOpts(ctx, opts);
        for(i = 0; i < lines.length; ++i){
            line = lines[i];
            if (stroke) {
                if (opts.strokeColor) ctx.strokeStyle = opts.strokeColor;
                if (!$6892236ee0bf6afc$export$342063e11d6c3cad(opts.strokeWidth)) ctx.lineWidth = opts.strokeWidth;
                ctx.strokeText(line, x, y, opts.maxWidth);
            }
            ctx.fillText(line, x, y, opts.maxWidth);
            $6892236ee0bf6afc$var$decorateText(ctx, x, y, line, opts);
            y += font.lineHeight;
        }
        ctx.restore();
    }
    function $6892236ee0bf6afc$var$setRenderOpts(ctx, opts) {
        if (opts.translation) ctx.translate(opts.translation[0], opts.translation[1]);
        if (!$6892236ee0bf6afc$export$342063e11d6c3cad(opts.rotation)) ctx.rotate(opts.rotation);
        if (opts.color) ctx.fillStyle = opts.color;
        if (opts.textAlign) ctx.textAlign = opts.textAlign;
        if (opts.textBaseline) ctx.textBaseline = opts.textBaseline;
    }
    function $6892236ee0bf6afc$var$decorateText(ctx, x, y, line, opts) {
        if (opts.strikethrough || opts.underline) {
            var metrics = ctx.measureText(line);
            var left = x - metrics.actualBoundingBoxLeft;
            var right = x + metrics.actualBoundingBoxRight;
            var top = y - metrics.actualBoundingBoxAscent;
            var bottom = y + metrics.actualBoundingBoxDescent;
            var yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
            ctx.strokeStyle = ctx.fillStyle;
            ctx.beginPath();
            ctx.lineWidth = opts.decorationWidth || 2;
            ctx.moveTo(left, yDecoration);
            ctx.lineTo(right, yDecoration);
            ctx.stroke();
        }
    }
    function $6892236ee0bf6afc$export$493d36ec626b6698(ctx, rect) {
        var x = rect.x, y = rect.y, w = rect.w, h = rect.h, radius = rect.radius;
        ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -$6892236ee0bf6afc$export$7f8ddf7c7c20b3cd, $6892236ee0bf6afc$export$56c0d5a1e737357d, true);
        ctx.lineTo(x, y + h - radius.bottomLeft);
        ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, $6892236ee0bf6afc$export$56c0d5a1e737357d, $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd, true);
        ctx.lineTo(x + w - radius.bottomRight, y + h);
        ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd, 0, true);
        ctx.lineTo(x + w, y + radius.topRight);
        ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -$6892236ee0bf6afc$export$7f8ddf7c7c20b3cd, true);
        ctx.lineTo(x + radius.topLeft, y);
    }
    var $6892236ee0bf6afc$var$LINE_HEIGHT = new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
    var $6892236ee0bf6afc$var$FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);
    function $6892236ee0bf6afc$export$1a8f5705751d8277(value, size) {
        var matches = ("" + value).match($6892236ee0bf6afc$var$LINE_HEIGHT);
        if (!matches || matches[1] === "normal") return size * 1.2;
        value = +matches[2];
        switch(matches[3]){
            case "px":
                return value;
            case "%":
                value /= 100;
                break;
        }
        return size * value;
    }
    var $6892236ee0bf6afc$var$numberOrZero = function(v) {
        return +v || 0;
    };
    function $6892236ee0bf6afc$export$3b513254972cfc9c(value, props) {
        var ret = {
        };
        var objProps = $6892236ee0bf6afc$export$23f2a1d2818174ef(props);
        var keys = objProps ? Object.keys(props) : props;
        var read = $6892236ee0bf6afc$export$23f2a1d2818174ef(value) ? objProps ? function(prop) {
            return $6892236ee0bf6afc$export$90a7f3efeed30595(value[prop], value[props[prop]]);
        } : function(prop) {
            return value[prop];
        } : function() {
            return value;
        };
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var prop1 = _step.value;
                ret[prop1] = $6892236ee0bf6afc$var$numberOrZero(read(prop1));
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
        return ret;
    }
    function $6892236ee0bf6afc$export$1fbe638ecf81657e(value) {
        return $6892236ee0bf6afc$export$3b513254972cfc9c(value, {
            top: "y",
            right: "x",
            bottom: "y",
            left: "x"
        });
    }
    function $6892236ee0bf6afc$export$d66dc83d8cfc8dd(value) {
        return $6892236ee0bf6afc$export$3b513254972cfc9c(value, [
            "topLeft",
            "topRight",
            "bottomLeft",
            "bottomRight"
        ]);
    }
    function $6892236ee0bf6afc$export$96f57966bedc81b4(value) {
        var obj = $6892236ee0bf6afc$export$1fbe638ecf81657e(value);
        obj.width = obj.left + obj.right;
        obj.height = obj.top + obj.bottom;
        return obj;
    }
    function $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(options, fallback) {
        options = options || {
        };
        fallback = fallback || $6892236ee0bf6afc$export$4368d992c4eafac0.font;
        var size = $6892236ee0bf6afc$export$90a7f3efeed30595(options.size, fallback.size);
        if (typeof size === "string") size = parseInt(size, 10);
        var style = $6892236ee0bf6afc$export$90a7f3efeed30595(options.style, fallback.style);
        if (style && !("" + style).match($6892236ee0bf6afc$var$FONT_STYLE)) {
            console.warn('Invalid font style specified: "' + style + '"');
            style = "";
        }
        var font = {
            family: $6892236ee0bf6afc$export$90a7f3efeed30595(options.family, fallback.family),
            lineHeight: $6892236ee0bf6afc$export$1a8f5705751d8277($6892236ee0bf6afc$export$90a7f3efeed30595(options.lineHeight, fallback.lineHeight), size),
            size: size,
            style: style,
            weight: $6892236ee0bf6afc$export$90a7f3efeed30595(options.weight, fallback.weight),
            string: ""
        };
        font.string = $6892236ee0bf6afc$export$d377dcb2b61d6c4e(font);
        return font;
    }
    function $6892236ee0bf6afc$export$407448d2b89b1813(inputs, context, index, info) {
        var cacheable = true;
        var i, ilen, value;
        for(i = 0, ilen = inputs.length; i < ilen; ++i){
            value = inputs[i];
            if (value === undefined) continue;
            if (context !== undefined && typeof value === "function") {
                value = value(context);
                cacheable = false;
            }
            if (index !== undefined && $6892236ee0bf6afc$export$8b22cf2602fb60ce(value)) {
                value = value[index % value.length];
                cacheable = false;
            }
            if (value !== undefined) {
                if (info && !cacheable) info.cacheable = false;
                return value;
            }
        }
    }
    function $6892236ee0bf6afc$export$db202ddc8be9136(minmax, grace, beginAtZero) {
        var min = minmax.min, max = minmax.max;
        var change = $6892236ee0bf6afc$export$7ccc53e8f1e7dfc5(grace, (max - min) / 2);
        var keepZero = function(value, add) {
            return beginAtZero && value === 0 ? 0 : value + add;
        };
        return {
            min: keepZero(min, -Math.abs(change)),
            max: keepZero(max, change)
        };
    }
    function $6892236ee0bf6afc$export$dda1d9f60106f0e9(parentContext, context) {
        return Object.assign(Object.create(parentContext), context);
    }
    function $6892236ee0bf6afc$export$91477dc880baac21(table, value, cmp) {
        cmp = cmp || function(index) {
            return table[index] < value;
        };
        var hi = table.length - 1;
        var lo = 0;
        var mid;
        while(hi - lo > 1){
            mid = lo + hi >> 1;
            if (cmp(mid)) lo = mid;
            else hi = mid;
        }
        return {
            lo: lo,
            hi: hi
        };
    }
    var $6892236ee0bf6afc$export$d141bba7fdc215a3 = function(table, key, value) {
        return $6892236ee0bf6afc$export$91477dc880baac21(table, value, function(index) {
            return table[index][key] < value;
        });
    };
    var $6892236ee0bf6afc$export$ebd11618f299a286 = function(table, key, value) {
        return $6892236ee0bf6afc$export$91477dc880baac21(table, value, function(index) {
            return table[index][key] >= value;
        });
    };
    function $6892236ee0bf6afc$export$23ebac1979863676(values, min, max) {
        var start = 0;
        var end = values.length;
        while(start < end && values[start] < min)start++;
        while(end > start && values[end - 1] > max)end--;
        return start > 0 || end < values.length ? values.slice(start, end) : values;
    }
    var $6892236ee0bf6afc$var$arrayEvents = [
        "push",
        "pop",
        "shift",
        "splice",
        "unshift"
    ];
    function $6892236ee0bf6afc$export$882b5998b3b9117c(array, listener) {
        if (array._chartjs) {
            array._chartjs.listeners.push(listener);
            return;
        }
        Object.defineProperty(array, "_chartjs", {
            configurable: true,
            enumerable: false,
            value: {
                listeners: [
                    listener
                ]
            }
        });
        $6892236ee0bf6afc$var$arrayEvents.forEach(function(key) {
            var method = "_onData" + $6892236ee0bf6afc$export$efca4cbe5dd06740(key);
            var base = array[key];
            Object.defineProperty(array, key, {
                configurable: true,
                enumerable: false,
                value: function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    var res = base.apply(this, args);
                    array._chartjs.listeners.forEach(function(object) {
                        var _object;
                        if (typeof object[method] === "function") (_object = object)[method].apply(_object, /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(args));
                    });
                    return res;
                }
            });
        });
    }
    function $6892236ee0bf6afc$export$3b14a55fb2447963(array, listener) {
        var stub = array._chartjs;
        if (!stub) return;
        var listeners = stub.listeners;
        var index = listeners.indexOf(listener);
        if (index !== -1) listeners.splice(index, 1);
        if (listeners.length > 0) return;
        $6892236ee0bf6afc$var$arrayEvents.forEach(function(key) {
            delete array[key];
        });
        delete array._chartjs;
    }
    function $6892236ee0bf6afc$export$71511d61b312f219(items) {
        var set2 = new Set();
        var i, ilen;
        for(i = 0, ilen = items.length; i < ilen; ++i)set2.add(items[i]);
        if (set2.size === ilen) return items;
        return Array.from(set2);
    }
    function $6892236ee0bf6afc$export$c3950d9923825c02(scopes) {
        var prefixes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [
            ""
        ], rootScopes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : scopes, fallback = arguments.length > 3 ? arguments[3] : void 0, getTarget = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : function() {
            return scopes[0];
        };
        if (!$6892236ee0bf6afc$export$35e795649ee09318(fallback)) fallback = $6892236ee0bf6afc$var$_resolve("_fallback", scopes);
        var _obj;
        var cache = (_obj = {
        }, /*@__PURE__*/ $parcel$interopDefault($1W515)(_obj, Symbol.toStringTag, "Object"), /*@__PURE__*/ $parcel$interopDefault($1W515)(_obj, "_cacheable", true), /*@__PURE__*/ $parcel$interopDefault($1W515)(_obj, "_scopes", scopes), /*@__PURE__*/ $parcel$interopDefault($1W515)(_obj, "_rootScopes", rootScopes), /*@__PURE__*/ $parcel$interopDefault($1W515)(_obj, "_fallback", fallback), /*@__PURE__*/ $parcel$interopDefault($1W515)(_obj, "_getTarget", getTarget), /*@__PURE__*/ $parcel$interopDefault($1W515)(_obj, "override", function(scope) {
            return $6892236ee0bf6afc$export$c3950d9923825c02([
                scope
            ].concat(/*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(scopes)), prefixes, rootScopes, fallback);
        }), _obj);
        return new Proxy(cache, {
            deleteProperty: function(target, prop) {
                delete target[prop];
                delete target._keys;
                delete scopes[0][prop];
                return true;
            },
            get: function(target, prop) {
                return $6892236ee0bf6afc$var$_cached(target, prop, function() {
                    return $6892236ee0bf6afc$var$_resolveWithPrefixes(prop, prefixes, scopes, target);
                });
            },
            getOwnPropertyDescriptor: function(target, prop) {
                return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
            },
            getPrototypeOf: function() {
                return Reflect.getPrototypeOf(scopes[0]);
            },
            has: function(target, prop) {
                return $6892236ee0bf6afc$var$getKeysFromAllScopes(target).includes(prop);
            },
            ownKeys: function(target) {
                return $6892236ee0bf6afc$var$getKeysFromAllScopes(target);
            },
            set: function(target, prop, value) {
                var storage = target._storage || (target._storage = getTarget());
                target[prop] = storage[prop] = value;
                delete target._keys;
                return true;
            }
        });
    }
    function $6892236ee0bf6afc$export$a93c5207d687da10(proxy, context, subProxy, descriptorDefaults) {
        var cache = {
            _cacheable: false,
            _proxy: proxy,
            _context: context,
            _subProxy: subProxy,
            _stack: new Set(),
            _descriptors: $6892236ee0bf6afc$export$a9c996f45e5784d0(proxy, descriptorDefaults),
            setContext: function(ctx) {
                return $6892236ee0bf6afc$export$a93c5207d687da10(proxy, ctx, subProxy, descriptorDefaults);
            },
            override: function(scope) {
                return $6892236ee0bf6afc$export$a93c5207d687da10(proxy.override(scope), context, subProxy, descriptorDefaults);
            }
        };
        return new Proxy(cache, {
            deleteProperty: function(target, prop) {
                delete target[prop];
                delete proxy[prop];
                return true;
            },
            get: function(target, prop, receiver) {
                return $6892236ee0bf6afc$var$_cached(target, prop, function() {
                    return $6892236ee0bf6afc$var$_resolveWithContext(target, prop, receiver);
                });
            },
            getOwnPropertyDescriptor: function(target, prop) {
                return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
                    enumerable: true,
                    configurable: true
                } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);
            },
            getPrototypeOf: function() {
                return Reflect.getPrototypeOf(proxy);
            },
            has: function(target, prop) {
                return Reflect.has(proxy, prop);
            },
            ownKeys: function() {
                return Reflect.ownKeys(proxy);
            },
            set: function(target, prop, value) {
                proxy[prop] = value;
                delete target[prop];
                return true;
            }
        });
    }
    function $6892236ee0bf6afc$export$a9c996f45e5784d0(proxy) {
        var defaults1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
            scriptable: true,
            indexable: true
        };
        var __scriptable = proxy._scriptable, _scriptable = __scriptable === void 0 ? defaults1.scriptable : __scriptable, __indexable = proxy._indexable, _indexable = __indexable === void 0 ? defaults1.indexable : __indexable, __allKeys = proxy._allKeys, _allKeys = __allKeys === void 0 ? defaults1.allKeys : __allKeys;
        return {
            allKeys: _allKeys,
            scriptable: _scriptable,
            indexable: _indexable,
            isScriptable: $6892236ee0bf6afc$export$2e2af4578d910ddf(_scriptable) ? _scriptable : function() {
                return _scriptable;
            },
            isIndexable: $6892236ee0bf6afc$export$2e2af4578d910ddf(_indexable) ? _indexable : function() {
                return _indexable;
            }
        };
    }
    var $6892236ee0bf6afc$var$readKey = function(prefix, name) {
        return prefix ? prefix + $6892236ee0bf6afc$export$efca4cbe5dd06740(name) : name;
    };
    var $6892236ee0bf6afc$var$needsSubResolver = function(prop, value) {
        return $6892236ee0bf6afc$export$23f2a1d2818174ef(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object);
    };
    function $6892236ee0bf6afc$var$_cached(target, prop, resolve1) {
        if (Object.prototype.hasOwnProperty.call(target, prop)) return target[prop];
        var value = resolve1();
        target[prop] = value;
        return value;
    }
    function $6892236ee0bf6afc$var$_resolveWithContext(target, prop, receiver) {
        var _proxy = target._proxy, _context = target._context, _subProxy = target._subProxy, descriptors1 = target._descriptors;
        var value = _proxy[prop];
        if ($6892236ee0bf6afc$export$2e2af4578d910ddf(value) && descriptors1.isScriptable(prop)) value = $6892236ee0bf6afc$var$_resolveScriptable(prop, value, target, receiver);
        if ($6892236ee0bf6afc$export$8b22cf2602fb60ce(value) && value.length) value = $6892236ee0bf6afc$var$_resolveArray(prop, value, target, descriptors1.isIndexable);
        if ($6892236ee0bf6afc$var$needsSubResolver(prop, value)) value = $6892236ee0bf6afc$export$a93c5207d687da10(value, _context, _subProxy && _subProxy[prop], descriptors1);
        return value;
    }
    function $6892236ee0bf6afc$var$_resolveScriptable(prop, value, target, receiver) {
        var _proxy = target._proxy, _context = target._context, _subProxy = target._subProxy, _stack = target._stack;
        if (_stack.has(prop)) throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
        _stack.add(prop);
        value = value(_context, _subProxy || receiver);
        _stack["delete"](prop);
        if ($6892236ee0bf6afc$var$needsSubResolver(prop, value)) value = $6892236ee0bf6afc$var$createSubResolver(_proxy._scopes, _proxy, prop, value);
        return value;
    }
    function $6892236ee0bf6afc$var$_resolveArray(prop, value, target, isIndexable) {
        var _proxy = target._proxy, _context = target._context, _subProxy = target._subProxy, descriptors2 = target._descriptors;
        if ($6892236ee0bf6afc$export$35e795649ee09318(_context.index) && isIndexable(prop)) value = value[_context.index % value.length];
        else if ($6892236ee0bf6afc$export$23f2a1d2818174ef(value[0])) {
            var arr = value;
            var scopes = _proxy._scopes.filter(function(s) {
                return s !== arr;
            });
            value = [];
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var item = _step.value;
                    var resolver = $6892236ee0bf6afc$var$createSubResolver(scopes, _proxy, prop, item);
                    value.push($6892236ee0bf6afc$export$a93c5207d687da10(resolver, _context, _subProxy && _subProxy[prop], descriptors2));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                } finally{
                    if (_didIteratorError) throw _iteratorError;
                }
            }
        }
        return value;
    }
    function $6892236ee0bf6afc$var$resolveFallback(fallback, prop, value) {
        return $6892236ee0bf6afc$export$2e2af4578d910ddf(fallback) ? fallback(prop, value) : fallback;
    }
    var $6892236ee0bf6afc$var$getScope = function(key, parent) {
        return key === true ? parent : typeof key === "string" ? $6892236ee0bf6afc$export$2d1720544b23b823(parent, key) : undefined;
    };
    function $6892236ee0bf6afc$var$addScopes(set3, parentScopes, key, parentFallback, value) {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = parentScopes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var parent = _step.value;
                var scope = $6892236ee0bf6afc$var$getScope(key, parent);
                if (scope) {
                    set3.add(scope);
                    var fallback = $6892236ee0bf6afc$var$resolveFallback(scope._fallback, key, value);
                    if ($6892236ee0bf6afc$export$35e795649ee09318(fallback) && fallback !== key && fallback !== parentFallback) return fallback;
                } else if (scope === false && $6892236ee0bf6afc$export$35e795649ee09318(parentFallback) && key !== parentFallback) return null;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
        return false;
    }
    function $6892236ee0bf6afc$var$createSubResolver(parentScopes, resolver, prop, value) {
        var rootScopes = resolver._rootScopes;
        var fallback = $6892236ee0bf6afc$var$resolveFallback(resolver._fallback, prop, value);
        var allScopes = /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(parentScopes).concat(/*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(rootScopes));
        var set4 = new Set();
        set4.add(value);
        var key = $6892236ee0bf6afc$var$addScopesFromKey(set4, allScopes, prop, fallback || prop, value);
        if (key === null) return false;
        if ($6892236ee0bf6afc$export$35e795649ee09318(fallback) && fallback !== prop) {
            key = $6892236ee0bf6afc$var$addScopesFromKey(set4, allScopes, fallback, key, value);
            if (key === null) return false;
        }
        return $6892236ee0bf6afc$export$c3950d9923825c02(Array.from(set4), [
            ""
        ], rootScopes, fallback, function() {
            return $6892236ee0bf6afc$var$subGetTarget(resolver, prop, value);
        });
    }
    function $6892236ee0bf6afc$var$addScopesFromKey(set5, allScopes, key, fallback, item) {
        while(key)key = $6892236ee0bf6afc$var$addScopes(set5, allScopes, key, fallback, item);
        return key;
    }
    function $6892236ee0bf6afc$var$subGetTarget(resolver, prop, value) {
        var parent = resolver._getTarget();
        if (!(prop in parent)) parent[prop] = {
        };
        var target = parent[prop];
        if ($6892236ee0bf6afc$export$8b22cf2602fb60ce(target) && $6892236ee0bf6afc$export$23f2a1d2818174ef(value)) return value;
        return target;
    }
    function $6892236ee0bf6afc$var$_resolveWithPrefixes(prop, prefixes, scopes, proxy) {
        var value;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = prefixes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var prefix = _step.value;
                value = $6892236ee0bf6afc$var$_resolve($6892236ee0bf6afc$var$readKey(prefix, prop), scopes);
                if ($6892236ee0bf6afc$export$35e795649ee09318(value)) return $6892236ee0bf6afc$var$needsSubResolver(prop, value) ? $6892236ee0bf6afc$var$createSubResolver(scopes, proxy, prop, value) : value;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
    }
    function $6892236ee0bf6afc$var$_resolve(key, scopes) {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = scopes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var scope = _step.value;
                if (!scope) continue;
                var value = scope[key];
                if ($6892236ee0bf6afc$export$35e795649ee09318(value)) return value;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
    }
    function $6892236ee0bf6afc$var$getKeysFromAllScopes(target) {
        var keys = target._keys;
        if (!keys) keys = target._keys = $6892236ee0bf6afc$var$resolveKeysFromAllScopes(target._scopes);
        return keys;
    }
    function $6892236ee0bf6afc$var$resolveKeysFromAllScopes(scopes) {
        var set6 = new Set();
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
        try {
            for(var _iterator = scopes[Symbol.iterator](), _step; !(_iteratorNormalCompletion1 = (_step = _iterator.next()).done); _iteratorNormalCompletion1 = true){
                var scope = _step.value;
                try {
                    for(var _iterator1 = Object.keys(scope).filter(function(k) {
                        return !k.startsWith("_");
                    })[Symbol.iterator](), _step1; !(_iteratorNormalCompletion = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion = true){
                        var key = _step1.value;
                        set6.add(key);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator1["return"] != null) _iterator1["return"]();
                    } finally{
                        if (_didIteratorError) throw _iteratorError;
                    }
                }
            }
        } catch (err) {
            _didIteratorError1 = true;
            _iteratorError1 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion1 && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError1) throw _iteratorError1;
            }
        }
        return Array.from(set6);
    }
    function $6892236ee0bf6afc$export$4a5767248b18ef41(meta, data, start, count) {
        var iScale = meta.iScale;
        var __parsing = this._parsing, _key = __parsing.key, key = _key === void 0 ? "r" : _key;
        var parsed = new Array(count);
        var i, ilen, index, item;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            item = data[index];
            parsed[i] = {
                r: iScale.parse($6892236ee0bf6afc$export$2d1720544b23b823(item, key), index)
            };
        }
        return parsed;
    }
    var $6892236ee0bf6afc$var$EPSILON = Number.EPSILON || 0.00000000000001;
    var $6892236ee0bf6afc$var$getPoint = function(points, i) {
        return i < points.length && !points[i].skip && points[i];
    };
    var $6892236ee0bf6afc$var$getValueAxis = function(indexAxis) {
        return indexAxis === "x" ? "y" : "x";
    };
    function $6892236ee0bf6afc$export$667d3bf0c5f83305(firstPoint, middlePoint, afterPoint, t) {
        var previous = firstPoint.skip ? middlePoint : firstPoint;
        var current = middlePoint;
        var next = afterPoint.skip ? middlePoint : afterPoint;
        var d01 = $6892236ee0bf6afc$export$24baa2b76016ce0e(current, previous);
        var d12 = $6892236ee0bf6afc$export$24baa2b76016ce0e(next, current);
        var s01 = d01 / (d01 + d12);
        var s12 = d12 / (d01 + d12);
        s01 = isNaN(s01) ? 0 : s01;
        s12 = isNaN(s12) ? 0 : s12;
        var fa = t * s01;
        var fb = t * s12;
        return {
            previous: {
                x: current.x - fa * (next.x - previous.x),
                y: current.y - fa * (next.y - previous.y)
            },
            next: {
                x: current.x + fb * (next.x - previous.x),
                y: current.y + fb * (next.y - previous.y)
            }
        };
    }
    function $6892236ee0bf6afc$var$monotoneAdjust(points, deltaK, mK) {
        var pointsLen = points.length;
        var alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
        var pointAfter = $6892236ee0bf6afc$var$getPoint(points, 0);
        for(var i = 0; i < pointsLen - 1; ++i){
            pointCurrent = pointAfter;
            pointAfter = $6892236ee0bf6afc$var$getPoint(points, i + 1);
            if (!pointCurrent || !pointAfter) continue;
            if ($6892236ee0bf6afc$export$a33b77bbdbb8366c(deltaK[i], 0, $6892236ee0bf6afc$var$EPSILON)) {
                mK[i] = mK[i + 1] = 0;
                continue;
            }
            alphaK = mK[i] / deltaK[i];
            betaK = mK[i + 1] / deltaK[i];
            squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
            if (squaredMagnitude <= 9) continue;
            tauK = 3 / Math.sqrt(squaredMagnitude);
            mK[i] = alphaK * tauK * deltaK[i];
            mK[i + 1] = betaK * tauK * deltaK[i];
        }
    }
    function $6892236ee0bf6afc$var$monotoneCompute(points, mK) {
        var indexAxis = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "x";
        var valueAxis = $6892236ee0bf6afc$var$getValueAxis(indexAxis);
        var pointsLen = points.length;
        var delta, pointBefore, pointCurrent;
        var pointAfter = $6892236ee0bf6afc$var$getPoint(points, 0);
        for(var i = 0; i < pointsLen; ++i){
            pointBefore = pointCurrent;
            pointCurrent = pointAfter;
            pointAfter = $6892236ee0bf6afc$var$getPoint(points, i + 1);
            if (!pointCurrent) continue;
            var iPixel = pointCurrent[indexAxis];
            var vPixel = pointCurrent[valueAxis];
            if (pointBefore) {
                delta = (iPixel - pointBefore[indexAxis]) / 3;
                pointCurrent["cp1".concat(indexAxis)] = iPixel - delta;
                pointCurrent["cp1".concat(valueAxis)] = vPixel - delta * mK[i];
            }
            if (pointAfter) {
                delta = (pointAfter[indexAxis] - iPixel) / 3;
                pointCurrent["cp2".concat(indexAxis)] = iPixel + delta;
                pointCurrent["cp2".concat(valueAxis)] = vPixel + delta * mK[i];
            }
        }
    }
    function $6892236ee0bf6afc$export$317a3d46287192d8(points) {
        var indexAxis = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "x";
        var valueAxis = $6892236ee0bf6afc$var$getValueAxis(indexAxis);
        var pointsLen = points.length;
        var deltaK = Array(pointsLen).fill(0);
        var mK = Array(pointsLen);
        var i, pointBefore, pointCurrent;
        var pointAfter = $6892236ee0bf6afc$var$getPoint(points, 0);
        for(i = 0; i < pointsLen; ++i){
            pointBefore = pointCurrent;
            pointCurrent = pointAfter;
            pointAfter = $6892236ee0bf6afc$var$getPoint(points, i + 1);
            if (!pointCurrent) continue;
            if (pointAfter) {
                var slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
                deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
            }
            mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : $6892236ee0bf6afc$export$2408f22a0fab9ae5(deltaK[i - 1]) !== $6892236ee0bf6afc$export$2408f22a0fab9ae5(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
        }
        $6892236ee0bf6afc$var$monotoneAdjust(points, deltaK, mK);
        $6892236ee0bf6afc$var$monotoneCompute(points, mK, indexAxis);
    }
    function $6892236ee0bf6afc$var$capControlPoint(pt, min, max) {
        return Math.max(Math.min(pt, max), min);
    }
    function $6892236ee0bf6afc$var$capBezierPoints(points, area) {
        var i, ilen, point, inArea, inAreaPrev;
        var inAreaNext = $6892236ee0bf6afc$export$ef35774e6d314e91(points[0], area);
        for(i = 0, ilen = points.length; i < ilen; ++i){
            inAreaPrev = inArea;
            inArea = inAreaNext;
            inAreaNext = i < ilen - 1 && $6892236ee0bf6afc$export$ef35774e6d314e91(points[i + 1], area);
            if (!inArea) continue;
            point = points[i];
            if (inAreaPrev) {
                point.cp1x = $6892236ee0bf6afc$var$capControlPoint(point.cp1x, area.left, area.right);
                point.cp1y = $6892236ee0bf6afc$var$capControlPoint(point.cp1y, area.top, area.bottom);
            }
            if (inAreaNext) {
                point.cp2x = $6892236ee0bf6afc$var$capControlPoint(point.cp2x, area.left, area.right);
                point.cp2y = $6892236ee0bf6afc$var$capControlPoint(point.cp2y, area.top, area.bottom);
            }
        }
    }
    function $6892236ee0bf6afc$export$21579262ef46735b(points, options, area, loop, indexAxis) {
        var i, ilen, point, controlPoints;
        if (options.spanGaps) points = points.filter(function(pt) {
            return !pt.skip;
        });
        if (options.cubicInterpolationMode === "monotone") $6892236ee0bf6afc$export$317a3d46287192d8(points, indexAxis);
        else {
            var prev = loop ? points[points.length - 1] : points[0];
            for(i = 0, ilen = points.length; i < ilen; ++i){
                point = points[i];
                controlPoints = $6892236ee0bf6afc$export$667d3bf0c5f83305(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
                point.cp1x = controlPoints.previous.x;
                point.cp1y = controlPoints.previous.y;
                point.cp2x = controlPoints.next.x;
                point.cp2y = controlPoints.next.y;
                prev = point;
            }
        }
        if (options.capBezierPoints) $6892236ee0bf6afc$var$capBezierPoints(points, area);
    }
    function $6892236ee0bf6afc$export$61196ced6d74a310() {
        return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function $6892236ee0bf6afc$export$2329c99376c9d0a4(domNode) {
        var parent = domNode.parentNode;
        if (parent && parent.toString() === "[object ShadowRoot]") parent = parent.host;
        return parent;
    }
    function $6892236ee0bf6afc$var$parseMaxStyle(styleValue, node, parentProperty) {
        var valueInPixels;
        if (typeof styleValue === "string") {
            valueInPixels = parseInt(styleValue, 10);
            if (styleValue.indexOf("%") !== -1) valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
        } else valueInPixels = styleValue;
        return valueInPixels;
    }
    var $6892236ee0bf6afc$var$getComputedStyle = function(element) {
        return window.getComputedStyle(element, null);
    };
    function $6892236ee0bf6afc$export$1ee57be6f6687d2c(el, property) {
        return $6892236ee0bf6afc$var$getComputedStyle(el).getPropertyValue(property);
    }
    var $6892236ee0bf6afc$var$positions = [
        "top",
        "right",
        "bottom",
        "left"
    ];
    function $6892236ee0bf6afc$var$getPositionedStyle(styles, style, suffix) {
        var result = {
        };
        suffix = suffix ? "-" + suffix : "";
        for(var i = 0; i < 4; i++){
            var pos = $6892236ee0bf6afc$var$positions[i];
            result[pos] = parseFloat(styles[style + "-" + pos + suffix]) || 0;
        }
        result.width = result.left + result.right;
        result.height = result.top + result.bottom;
        return result;
    }
    var $6892236ee0bf6afc$var$useOffsetPos = function(x, y, target) {
        return (x > 0 || y > 0) && (!target || !target.shadowRoot);
    };
    function $6892236ee0bf6afc$var$getCanvasPosition(e, canvas) {
        var touches = e.touches;
        var source = touches && touches.length ? touches[0] : e;
        var offsetX = source.offsetX, offsetY = source.offsetY;
        var box = false;
        var x, y;
        if ($6892236ee0bf6afc$var$useOffsetPos(offsetX, offsetY, e.target)) {
            x = offsetX;
            y = offsetY;
        } else {
            var rect = canvas.getBoundingClientRect();
            x = source.clientX - rect.left;
            y = source.clientY - rect.top;
            box = true;
        }
        return {
            x: x,
            y: y,
            box: box
        };
    }
    function $6892236ee0bf6afc$export$df995fae86a55f06(evt, chart) {
        if ("native" in evt) return evt;
        var canvas = chart.canvas, currentDevicePixelRatio = chart.currentDevicePixelRatio;
        var style = $6892236ee0bf6afc$var$getComputedStyle(canvas);
        var borderBox = style.boxSizing === "border-box";
        var paddings = $6892236ee0bf6afc$var$getPositionedStyle(style, "padding");
        var borders = $6892236ee0bf6afc$var$getPositionedStyle(style, "border", "width");
        var ref = $6892236ee0bf6afc$var$getCanvasPosition(evt, canvas), x = ref.x, y = ref.y, box = ref.box;
        var xOffset = paddings.left + (box && borders.left);
        var yOffset = paddings.top + (box && borders.top);
        var width = chart.width, height = chart.height;
        if (borderBox) {
            width -= paddings.width + borders.width;
            height -= paddings.height + borders.height;
        }
        return {
            x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
            y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
        };
    }
    function $6892236ee0bf6afc$var$getContainerSize(canvas, width, height) {
        var maxWidth, maxHeight;
        if (width === undefined || height === undefined) {
            var container = $6892236ee0bf6afc$export$2329c99376c9d0a4(canvas);
            if (!container) {
                width = canvas.clientWidth;
                height = canvas.clientHeight;
            } else {
                var rect = container.getBoundingClientRect();
                var containerStyle = $6892236ee0bf6afc$var$getComputedStyle(container);
                var containerBorder = $6892236ee0bf6afc$var$getPositionedStyle(containerStyle, "border", "width");
                var containerPadding = $6892236ee0bf6afc$var$getPositionedStyle(containerStyle, "padding");
                width = rect.width - containerPadding.width - containerBorder.width;
                height = rect.height - containerPadding.height - containerBorder.height;
                maxWidth = $6892236ee0bf6afc$var$parseMaxStyle(containerStyle.maxWidth, container, "clientWidth");
                maxHeight = $6892236ee0bf6afc$var$parseMaxStyle(containerStyle.maxHeight, container, "clientHeight");
            }
        }
        return {
            width: width,
            height: height,
            maxWidth: maxWidth || $6892236ee0bf6afc$export$527e9aa3390079e9,
            maxHeight: maxHeight || $6892236ee0bf6afc$export$527e9aa3390079e9
        };
    }
    var $6892236ee0bf6afc$var$round1 = function(v) {
        return Math.round(v * 10) / 10;
    };
    function $6892236ee0bf6afc$export$d66501df72047452(canvas, bbWidth, bbHeight, aspectRatio) {
        var style = $6892236ee0bf6afc$var$getComputedStyle(canvas);
        var margins = $6892236ee0bf6afc$var$getPositionedStyle(style, "margin");
        var maxWidth = $6892236ee0bf6afc$var$parseMaxStyle(style.maxWidth, canvas, "clientWidth") || $6892236ee0bf6afc$export$527e9aa3390079e9;
        var maxHeight = $6892236ee0bf6afc$var$parseMaxStyle(style.maxHeight, canvas, "clientHeight") || $6892236ee0bf6afc$export$527e9aa3390079e9;
        var containerSize = $6892236ee0bf6afc$var$getContainerSize(canvas, bbWidth, bbHeight);
        var width = containerSize.width, height = containerSize.height;
        if (style.boxSizing === "content-box") {
            var borders = $6892236ee0bf6afc$var$getPositionedStyle(style, "border", "width");
            var paddings = $6892236ee0bf6afc$var$getPositionedStyle(style, "padding");
            width -= paddings.width + borders.width;
            height -= paddings.height + borders.height;
        }
        width = Math.max(0, width - margins.width);
        height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);
        width = $6892236ee0bf6afc$var$round1(Math.min(width, maxWidth, containerSize.maxWidth));
        height = $6892236ee0bf6afc$var$round1(Math.min(height, maxHeight, containerSize.maxHeight));
        if (width && !height) height = $6892236ee0bf6afc$var$round1(width / 2);
        return {
            width: width,
            height: height
        };
    }
    function $6892236ee0bf6afc$export$4c3d22f3d993c33f(chart, forceRatio, forceStyle) {
        var pixelRatio = forceRatio || 1;
        var deviceHeight = Math.floor(chart.height * pixelRatio);
        var deviceWidth = Math.floor(chart.width * pixelRatio);
        chart.height = deviceHeight / pixelRatio;
        chart.width = deviceWidth / pixelRatio;
        var canvas = chart.canvas;
        if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
            canvas.style.height = "".concat(chart.height, "px");
            canvas.style.width = "".concat(chart.width, "px");
        }
        if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
            chart.currentDevicePixelRatio = pixelRatio;
            canvas.height = deviceHeight;
            canvas.width = deviceWidth;
            chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
            return true;
        }
        return false;
    }
    var $6892236ee0bf6afc$export$3466f893ebf79586 = function() {
        var passiveSupported = false;
        try {
            var options = {
                get passive () {
                    passiveSupported = true;
                    return false;
                }
            };
            window.addEventListener("test", null, options);
            window.removeEventListener("test", null, options);
        } catch (e) {
        }
        return passiveSupported;
    }();
    function $6892236ee0bf6afc$export$9bb611d729802a56(element, property) {
        var value = $6892236ee0bf6afc$export$1ee57be6f6687d2c(element, property);
        var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
        return matches ? +matches[1] : undefined;
    }
    function $6892236ee0bf6afc$export$2f6ca3d3b1f80bf5(p1, p2, t, mode) {
        return {
            x: p1.x + t * (p2.x - p1.x),
            y: p1.y + t * (p2.y - p1.y)
        };
    }
    function $6892236ee0bf6afc$export$306ddfe3a8403e2(p1, p2, t, mode) {
        return {
            x: p1.x + t * (p2.x - p1.x),
            y: mode === "middle" ? t < 0.5 ? p1.y : p2.y : mode === "after" ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y
        };
    }
    function $6892236ee0bf6afc$export$7a38258bbe170828(p1, p2, t, mode) {
        var cp1 = {
            x: p1.cp2x,
            y: p1.cp2y
        };
        var cp2 = {
            x: p2.cp1x,
            y: p2.cp1y
        };
        var a = $6892236ee0bf6afc$export$2f6ca3d3b1f80bf5(p1, cp1, t);
        var b = $6892236ee0bf6afc$export$2f6ca3d3b1f80bf5(cp1, cp2, t);
        var c = $6892236ee0bf6afc$export$2f6ca3d3b1f80bf5(cp2, p2, t);
        var d = $6892236ee0bf6afc$export$2f6ca3d3b1f80bf5(a, b, t);
        var e = $6892236ee0bf6afc$export$2f6ca3d3b1f80bf5(b, c, t);
        return $6892236ee0bf6afc$export$2f6ca3d3b1f80bf5(d, e, t);
    }
    var $6892236ee0bf6afc$var$intlCache = new Map();
    function $6892236ee0bf6afc$var$getNumberFormat(locale, options) {
        options = options || {
        };
        var cacheKey = locale + JSON.stringify(options);
        var formatter = $6892236ee0bf6afc$var$intlCache.get(cacheKey);
        if (!formatter) {
            formatter = new Intl.NumberFormat(locale, options);
            $6892236ee0bf6afc$var$intlCache.set(cacheKey, formatter);
        }
        return formatter;
    }
    function $6892236ee0bf6afc$export$ae1af26003f05816(num, locale, options) {
        return $6892236ee0bf6afc$var$getNumberFormat(locale, options).format(num);
    }
    var $6892236ee0bf6afc$var$getRightToLeftAdapter = function getRightToLeftAdapter(rectX, width) {
        return {
            x: function(x) {
                return rectX + rectX + width - x;
            },
            setWidth: function(w) {
                width = w;
            },
            textAlign: function(align) {
                if (align === "center") return align;
                return align === "right" ? "left" : "right";
            },
            xPlus: function(x, value) {
                return x - value;
            },
            leftForLtr: function(x, itemWidth) {
                return x - itemWidth;
            }
        };
    };
    var $6892236ee0bf6afc$var$getLeftToRightAdapter = function getLeftToRightAdapter() {
        return {
            x: function(x) {
                return x;
            },
            setWidth: function(w) {
            },
            textAlign: function(align) {
                return align;
            },
            xPlus: function(x, value) {
                return x + value;
            },
            leftForLtr: function(x, _itemWidth) {
                return x;
            }
        };
    };
    function $6892236ee0bf6afc$export$28f7fcd39efa255(rtl, rectX, width) {
        return rtl ? $6892236ee0bf6afc$var$getRightToLeftAdapter(rectX, width) : $6892236ee0bf6afc$var$getLeftToRightAdapter();
    }
    function $6892236ee0bf6afc$export$3d12bd131bb975d1(ctx, direction) {
        var style, original;
        if (direction === "ltr" || direction === "rtl") {
            style = ctx.canvas.style;
            original = [
                style.getPropertyValue("direction"),
                style.getPropertyPriority("direction"), 
            ];
            style.setProperty("direction", direction, "important");
            ctx.prevTextDirection = original;
        }
    }
    function $6892236ee0bf6afc$export$9d398bebfec1c039(ctx, original) {
        if (original !== undefined) {
            delete ctx.prevTextDirection;
            ctx.canvas.style.setProperty("direction", original[0], original[1]);
        }
    }
    function $6892236ee0bf6afc$var$propertyFn(property) {
        if (property === "angle") return {
            between: $6892236ee0bf6afc$export$ffb5f4729a158638,
            compare: $6892236ee0bf6afc$export$d29e374196577086,
            normalize: $6892236ee0bf6afc$export$9fa96a7d116ea3ce
        };
        return {
            between: $6892236ee0bf6afc$export$f38c853ae54ed474,
            compare: function(a, b) {
                return a - b;
            },
            normalize: function(x) {
                return x;
            }
        };
    }
    function $6892236ee0bf6afc$var$normalizeSegment(param) {
        var start = param.start, end = param.end, count = param.count, loop = param.loop, style = param.style;
        return {
            start: start % count,
            end: end % count,
            loop: loop && (end - start + 1) % count === 0,
            style: style
        };
    }
    function $6892236ee0bf6afc$var$getSegment(segment, points, bounds) {
        var property = bounds.property, startBound = bounds.start, endBound = bounds.end;
        var ref = $6892236ee0bf6afc$var$propertyFn(property), between = ref.between, normalize = ref.normalize;
        var count = points.length;
        var start = segment.start, end = segment.end, loop = segment.loop;
        var i, ilen;
        if (loop) {
            start += count;
            end += count;
            for(i = 0, ilen = count; i < ilen; ++i){
                if (!between(normalize(points[start % count][property]), startBound, endBound)) break;
                start--;
                end--;
            }
            start %= count;
            end %= count;
        }
        if (end < start) end += count;
        return {
            start: start,
            end: end,
            loop: loop,
            style: segment.style
        };
    }
    function $6892236ee0bf6afc$export$92108d983e8ee699(segment, points, bounds) {
        if (!bounds) return [
            segment
        ];
        var property = bounds.property, startBound = bounds.start, endBound = bounds.end;
        var count = points.length;
        var ref = $6892236ee0bf6afc$var$propertyFn(property), compare = ref.compare, between = ref.between, normalize = ref.normalize;
        var ref1 = $6892236ee0bf6afc$var$getSegment(segment, points, bounds), start = ref1.start, end = ref1.end, loop = ref1.loop, style = ref1.style;
        var result = [];
        var inside = false;
        var subStart = null;
        var value, point, prevValue;
        var startIsBefore = function() {
            return between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
        };
        var endIsBefore = function() {
            return compare(endBound, value) === 0 || between(endBound, prevValue, value);
        };
        var shouldStart = function() {
            return inside || startIsBefore();
        };
        var shouldStop = function() {
            return !inside || endIsBefore();
        };
        for(var i = start, prev = start; i <= end; ++i){
            point = points[i % count];
            if (point.skip) continue;
            value = normalize(point[property]);
            if (value === prevValue) continue;
            inside = between(value, startBound, endBound);
            if (subStart === null && shouldStart()) subStart = compare(value, startBound) === 0 ? i : prev;
            if (subStart !== null && shouldStop()) {
                result.push($6892236ee0bf6afc$var$normalizeSegment({
                    start: subStart,
                    end: i,
                    loop: loop,
                    count: count,
                    style: style
                }));
                subStart = null;
            }
            prev = i;
            prevValue = value;
        }
        if (subStart !== null) result.push($6892236ee0bf6afc$var$normalizeSegment({
            start: subStart,
            end: end,
            loop: loop,
            count: count,
            style: style
        }));
        return result;
    }
    function $6892236ee0bf6afc$export$1a82df3d29112e01(line, bounds) {
        var result = [];
        var segments = line.segments;
        for(var i = 0; i < segments.length; i++){
            var _result;
            var sub = $6892236ee0bf6afc$export$92108d983e8ee699(segments[i], line.points, bounds);
            if (sub.length) (_result = result).push.apply(_result, /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(sub));
        }
        return result;
    }
    function $6892236ee0bf6afc$var$findStartAndEnd(points, count, loop, spanGaps) {
        var start = 0;
        var end = count - 1;
        if (loop && !spanGaps) while(start < count && !points[start].skip)start++;
        while(start < count && points[start].skip)start++;
        start %= count;
        if (loop) end += start;
        while(end > start && points[end % count].skip)end--;
        end %= count;
        return {
            start: start,
            end: end
        };
    }
    function $6892236ee0bf6afc$var$solidSegments(points, start, max, loop) {
        var count = points.length;
        var result = [];
        var last = start;
        var prev = points[start];
        var end;
        for(end = start + 1; end <= max; ++end){
            var cur = points[end % count];
            if (cur.skip || cur.stop) {
                if (!prev.skip) {
                    loop = false;
                    result.push({
                        start: start % count,
                        end: (end - 1) % count,
                        loop: loop
                    });
                    start = last = cur.stop ? end : null;
                }
            } else {
                last = end;
                if (prev.skip) start = end;
            }
            prev = cur;
        }
        if (last !== null) result.push({
            start: start % count,
            end: last % count,
            loop: loop
        });
        return result;
    }
    function $6892236ee0bf6afc$export$ab83b03e4111b1d0(line, segmentOptions) {
        var points = line.points;
        var spanGaps = line.options.spanGaps;
        var count = points.length;
        if (!count) return [];
        var loop = !!line._loop;
        var ref = $6892236ee0bf6afc$var$findStartAndEnd(points, count, loop, spanGaps), start = ref.start, end = ref.end;
        if (spanGaps === true) return $6892236ee0bf6afc$var$splitByStyles(line, [
            {
                start: start,
                end: end,
                loop: loop
            }
        ], points, segmentOptions);
        var max = end < start ? end + count : end;
        var completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
        return $6892236ee0bf6afc$var$splitByStyles(line, $6892236ee0bf6afc$var$solidSegments(points, start, max, completeLoop), points, segmentOptions);
    }
    function $6892236ee0bf6afc$var$splitByStyles(line, segments, points, segmentOptions) {
        if (!segmentOptions || !segmentOptions.setContext || !points) return segments;
        return $6892236ee0bf6afc$var$doSplitByStyles(line, segments, points, segmentOptions);
    }
    function $6892236ee0bf6afc$var$doSplitByStyles(line, segments, points, segmentOptions) {
        var addStyle = function addStyle(s, e, l, st) {
            var dir = spanGaps ? -1 : 1;
            if (s === e) return;
            s += count;
            while(points[s % count].skip)s -= dir;
            while(points[e % count].skip)e += dir;
            if (s % count !== e % count) {
                result.push({
                    start: s % count,
                    end: e % count,
                    loop: l,
                    style: st
                });
                prevStyle = st;
                start = e % count;
            }
        };
        var chartContext = line._chart.getContext();
        var baseStyle = $6892236ee0bf6afc$var$readStyle(line.options);
        var datasetIndex = line._datasetIndex, spanGaps = line.options.spanGaps;
        var count = points.length;
        var result = [];
        var prevStyle = baseStyle;
        var start = segments[0].start;
        var i = start;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = segments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var segment = _step.value;
                start = spanGaps ? start : segment.start;
                var prev = points[start % count];
                var style = void 0;
                for(i = start + 1; i <= segment.end; i++){
                    var pt = points[i % count];
                    style = $6892236ee0bf6afc$var$readStyle(segmentOptions.setContext($6892236ee0bf6afc$export$dda1d9f60106f0e9(chartContext, {
                        type: "segment",
                        p0: prev,
                        p1: pt,
                        p0DataIndex: (i - 1) % count,
                        p1DataIndex: i % count,
                        datasetIndex: datasetIndex
                    })));
                    if ($6892236ee0bf6afc$var$styleChanged(style, prevStyle)) addStyle(start, i - 1, segment.loop, prevStyle);
                    prev = pt;
                    prevStyle = style;
                }
                if (start < i - 1) addStyle(start, i - 1, segment.loop, prevStyle);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
        return result;
    }
    function $6892236ee0bf6afc$var$readStyle(options) {
        return {
            backgroundColor: options.backgroundColor,
            borderCapStyle: options.borderCapStyle,
            borderDash: options.borderDash,
            borderDashOffset: options.borderDashOffset,
            borderJoinStyle: options.borderJoinStyle,
            borderWidth: options.borderWidth,
            borderColor: options.borderColor
        };
    }
    function $6892236ee0bf6afc$var$styleChanged(style, prevStyle) {
        return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);
    }
    var $68fbc1daad5cf8b5$var$Animator = /*#__PURE__*/ function() {
        function Animator() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Animator);
            this._request = null;
            this._charts = new Map();
            this._running = false;
            this._lastDate = undefined;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Animator, [
            {
                key: "_notify",
                value: function _notify(chart, anims, date, type) {
                    var callbacks = anims.listeners[type];
                    var numSteps = anims.duration;
                    callbacks.forEach(function(fn) {
                        return fn({
                            chart: chart,
                            initial: anims.initial,
                            numSteps: numSteps,
                            currentStep: Math.min(date - anims.start, numSteps)
                        });
                    });
                }
            },
            {
                key: "_refresh",
                value: function _refresh() {
                    var _this = this;
                    if (this._request) return;
                    this._running = true;
                    this._request = $6892236ee0bf6afc$export$43caf9889c228507.call(window, function() {
                        _this._update();
                        _this._request = null;
                        if (_this._running) _this._refresh();
                    });
                }
            },
            {
                key: "_update",
                value: function _update() {
                    var date = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Date.now();
                    var _this = this;
                    var remaining = 0;
                    this._charts.forEach(function(anims, chart) {
                        if (!anims.running || !anims.items.length) return;
                        var items = anims.items;
                        var i = items.length - 1;
                        var draw1 = false;
                        var item;
                        for(; i >= 0; --i){
                            item = items[i];
                            if (item._active) {
                                if (item._total > anims.duration) anims.duration = item._total;
                                item.tick(date);
                                draw1 = true;
                            } else {
                                items[i] = items[items.length - 1];
                                items.pop();
                            }
                        }
                        if (draw1) {
                            chart.draw();
                            _this._notify(chart, anims, date, "progress");
                        }
                        if (!items.length) {
                            anims.running = false;
                            _this._notify(chart, anims, date, "complete");
                            anims.initial = false;
                        }
                        remaining += items.length;
                    });
                    this._lastDate = date;
                    if (remaining === 0) this._running = false;
                }
            },
            {
                key: "_getAnims",
                value: function _getAnims(chart) {
                    var charts = this._charts;
                    var anims = charts.get(chart);
                    if (!anims) {
                        anims = {
                            running: false,
                            initial: true,
                            items: [],
                            listeners: {
                                complete: [],
                                progress: []
                            }
                        };
                        charts.set(chart, anims);
                    }
                    return anims;
                }
            },
            {
                key: "listen",
                value: function listen(chart, event, cb) {
                    this._getAnims(chart).listeners[event].push(cb);
                }
            },
            {
                key: "add",
                value: function add(chart, items) {
                    var _items;
                    if (!items || !items.length) return;
                    (_items = this._getAnims(chart).items).push.apply(_items, /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(items));
                }
            },
            {
                key: "has",
                value: function has(chart) {
                    return this._getAnims(chart).items.length > 0;
                }
            },
            {
                key: "start",
                value: function start(chart) {
                    var anims = this._charts.get(chart);
                    if (!anims) return;
                    anims.running = true;
                    anims.start = Date.now();
                    anims.duration = anims.items.reduce(function(acc, cur) {
                        return Math.max(acc, cur._duration);
                    }, 0);
                    this._refresh();
                }
            },
            {
                key: "running",
                value: function running(chart) {
                    if (!this._running) return false;
                    var anims = this._charts.get(chart);
                    if (!anims || !anims.running || !anims.items.length) return false;
                    return true;
                }
            },
            {
                key: "stop",
                value: function stop(chart) {
                    var anims = this._charts.get(chart);
                    if (!anims || !anims.items.length) return;
                    var items = anims.items;
                    var i = items.length - 1;
                    for(; i >= 0; --i)items[i].cancel();
                    anims.items = [];
                    this._notify(chart, anims, Date.now(), "complete");
                }
            },
            {
                key: "remove",
                value: function remove(chart) {
                    return this._charts["delete"](chart);
                }
            }
        ]);
        return Animator;
    }();
    var $68fbc1daad5cf8b5$export$a424a0aa8f687495 = new $68fbc1daad5cf8b5$var$Animator();
    var $68fbc1daad5cf8b5$var$transparent = "transparent";
    var $68fbc1daad5cf8b5$var$interpolators = {
        boolean: function(from, to, factor) {
            return factor > 0.5 ? to : from;
        },
        color: function(from, to, factor) {
            var c0 = $6892236ee0bf6afc$export$db3b6bfb95261072(from || $68fbc1daad5cf8b5$var$transparent);
            var c1 = c0.valid && $6892236ee0bf6afc$export$db3b6bfb95261072(to || $68fbc1daad5cf8b5$var$transparent);
            return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;
        },
        number: function(from, to, factor) {
            return from + (to - from) * factor;
        }
    };
    var $68fbc1daad5cf8b5$export$c35d437ae5945fcd = /*#__PURE__*/ function() {
        function Animation(cfg, target, prop, to) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Animation);
            var currentValue = target[prop];
            to = $6892236ee0bf6afc$export$407448d2b89b1813([
                cfg.to,
                to,
                currentValue,
                cfg.from
            ]);
            var from = $6892236ee0bf6afc$export$407448d2b89b1813([
                cfg.from,
                currentValue,
                to
            ]);
            this._active = true;
            this._fn = cfg.fn || $68fbc1daad5cf8b5$var$interpolators[cfg.type || (typeof from === "undefined" ? "undefined" : /*@__PURE__*/ $parcel$interopDefault($9EtEN)(from))];
            this._easing = $6892236ee0bf6afc$export$f1e1789686576879[cfg.easing] || $6892236ee0bf6afc$export$f1e1789686576879.linear;
            this._start = Math.floor(Date.now() + (cfg.delay || 0));
            this._duration = this._total = Math.floor(cfg.duration);
            this._loop = !!cfg.loop;
            this._target = target;
            this._prop = prop;
            this._from = from;
            this._to = to;
            this._promises = undefined;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Animation, [
            {
                key: "active",
                value: function active() {
                    return this._active;
                }
            },
            {
                key: "update",
                value: function update(cfg, to, date) {
                    if (this._active) {
                        this._notify(false);
                        var currentValue = this._target[this._prop];
                        var elapsed = date - this._start;
                        var remain = this._duration - elapsed;
                        this._start = date;
                        this._duration = Math.floor(Math.max(remain, cfg.duration));
                        this._total += elapsed;
                        this._loop = !!cfg.loop;
                        this._to = $6892236ee0bf6afc$export$407448d2b89b1813([
                            cfg.to,
                            to,
                            currentValue,
                            cfg.from
                        ]);
                        this._from = $6892236ee0bf6afc$export$407448d2b89b1813([
                            cfg.from,
                            currentValue,
                            to
                        ]);
                    }
                }
            },
            {
                key: "cancel",
                value: function cancel() {
                    if (this._active) {
                        this.tick(Date.now());
                        this._active = false;
                        this._notify(false);
                    }
                }
            },
            {
                key: "tick",
                value: function tick(date) {
                    var elapsed = date - this._start;
                    var duration = this._duration;
                    var prop = this._prop;
                    var from = this._from;
                    var loop = this._loop;
                    var to = this._to;
                    var factor;
                    this._active = from !== to && (loop || elapsed < duration);
                    if (!this._active) {
                        this._target[prop] = to;
                        this._notify(true);
                        return;
                    }
                    if (elapsed < 0) {
                        this._target[prop] = from;
                        return;
                    }
                    factor = elapsed / duration % 2;
                    factor = loop && factor > 1 ? 2 - factor : factor;
                    factor = this._easing(Math.min(1, Math.max(0, factor)));
                    this._target[prop] = this._fn(from, to, factor);
                }
            },
            {
                key: "wait",
                value: function wait() {
                    var promises = this._promises || (this._promises = []);
                    return new Promise(function(res, rej) {
                        promises.push({
                            res: res,
                            rej: rej
                        });
                    });
                }
            },
            {
                key: "_notify",
                value: function _notify(resolved) {
                    var method = resolved ? "res" : "rej";
                    var promises = this._promises || [];
                    for(var i = 0; i < promises.length; i++)promises[i][method]();
                }
            }
        ]);
        return Animation;
    }();
    var $68fbc1daad5cf8b5$var$numbers = [
        "x",
        "y",
        "borderWidth",
        "radius",
        "tension"
    ];
    var $68fbc1daad5cf8b5$var$colors = [
        "color",
        "borderColor",
        "backgroundColor"
    ];
    $6892236ee0bf6afc$export$4368d992c4eafac0.set("animation", {
        delay: undefined,
        duration: 1000,
        easing: "easeOutQuart",
        fn: undefined,
        from: undefined,
        loop: undefined,
        to: undefined,
        type: undefined
    });
    var $68fbc1daad5cf8b5$var$animationOptions = Object.keys($6892236ee0bf6afc$export$4368d992c4eafac0.animation);
    $6892236ee0bf6afc$export$4368d992c4eafac0.describe("animation", {
        _fallback: false,
        _indexable: false,
        _scriptable: function(name) {
            return name !== "onProgress" && name !== "onComplete" && name !== "fn";
        }
    });
    $6892236ee0bf6afc$export$4368d992c4eafac0.set("animations", {
        colors: {
            type: "color",
            properties: $68fbc1daad5cf8b5$var$colors
        },
        numbers: {
            type: "number",
            properties: $68fbc1daad5cf8b5$var$numbers
        }
    });
    $6892236ee0bf6afc$export$4368d992c4eafac0.describe("animations", {
        _fallback: "animation"
    });
    $6892236ee0bf6afc$export$4368d992c4eafac0.set("transitions", {
        active: {
            animation: {
                duration: 400
            }
        },
        resize: {
            animation: {
                duration: 0
            }
        },
        show: {
            animations: {
                colors: {
                    from: "transparent"
                },
                visible: {
                    type: "boolean",
                    duration: 0
                }
            }
        },
        hide: {
            animations: {
                colors: {
                    to: "transparent"
                },
                visible: {
                    type: "boolean",
                    easing: "linear",
                    fn: function(v) {
                        return v | 0;
                    }
                }
            }
        }
    });
    var $68fbc1daad5cf8b5$export$8ab227dac26677d = /*#__PURE__*/ function() {
        function Animations(chart, config) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Animations);
            this._chart = chart;
            this._properties = new Map();
            this.configure(config);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Animations, [
            {
                key: "configure",
                value: function configure(config) {
                    if (!$6892236ee0bf6afc$export$23f2a1d2818174ef(config)) return;
                    var animatedProps = this._properties;
                    Object.getOwnPropertyNames(config).forEach(function(key) {
                        var cfg = config[key];
                        if (!$6892236ee0bf6afc$export$23f2a1d2818174ef(cfg)) return;
                        var resolved = {
                        };
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(var _iterator = $68fbc1daad5cf8b5$var$animationOptions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var option = _step.value;
                                resolved[option] = cfg[option];
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                            } finally{
                                if (_didIteratorError) throw _iteratorError;
                            }
                        }
                        ($6892236ee0bf6afc$export$8b22cf2602fb60ce(cfg.properties) && cfg.properties || [
                            key
                        ]).forEach(function(prop) {
                            if (prop === key || !animatedProps.has(prop)) animatedProps.set(prop, resolved);
                        });
                    });
                }
            },
            {
                key: "_animateOptions",
                value: function _animateOptions(target, values) {
                    var newOptions = values.options;
                    var options = $68fbc1daad5cf8b5$var$resolveTargetOptions(target, newOptions);
                    if (!options) return [];
                    var animations = this._createAnimations(options, newOptions);
                    if (newOptions.$shared) $68fbc1daad5cf8b5$var$awaitAll(target.options.$animations, newOptions).then(function() {
                        target.options = newOptions;
                    }, function() {
                    });
                    return animations;
                }
            },
            {
                key: "_createAnimations",
                value: function _createAnimations(target, values) {
                    var animatedProps = this._properties;
                    var animations = [];
                    var running = target.$animations || (target.$animations = {
                    });
                    var props = Object.keys(values);
                    var date = Date.now();
                    var i;
                    for(i = props.length - 1; i >= 0; --i){
                        var prop = props[i];
                        if (prop.charAt(0) === "$") continue;
                        if (prop === "options") {
                            var _animations;
                            (_animations = animations).push.apply(_animations, /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(this._animateOptions(target, values)));
                            continue;
                        }
                        var value = values[prop];
                        var animation = running[prop];
                        var cfg = animatedProps.get(prop);
                        if (animation) {
                            if (cfg && animation.active()) {
                                animation.update(cfg, value, date);
                                continue;
                            } else animation.cancel();
                        }
                        if (!cfg || !cfg.duration) {
                            target[prop] = value;
                            continue;
                        }
                        running[prop] = animation = new $68fbc1daad5cf8b5$export$c35d437ae5945fcd(cfg, target, prop, value);
                        animations.push(animation);
                    }
                    return animations;
                }
            },
            {
                key: "update",
                value: function update(target, values) {
                    if (this._properties.size === 0) {
                        Object.assign(target, values);
                        return;
                    }
                    var animations = this._createAnimations(target, values);
                    if (animations.length) {
                        $68fbc1daad5cf8b5$export$a424a0aa8f687495.add(this._chart, animations);
                        return true;
                    }
                }
            }
        ]);
        return Animations;
    }();
    function $68fbc1daad5cf8b5$var$awaitAll(animations, properties) {
        var running = [];
        var keys = Object.keys(properties);
        for(var i = 0; i < keys.length; i++){
            var anim = animations[keys[i]];
            if (anim && anim.active()) running.push(anim.wait());
        }
        return Promise.all(running);
    }
    function $68fbc1daad5cf8b5$var$resolveTargetOptions(target, newOptions) {
        if (!newOptions) return;
        var options = target.options;
        if (!options) {
            target.options = newOptions;
            return;
        }
        if (options.$shared) target.options = options = Object.assign({
        }, options, {
            $shared: false,
            $animations: {
            }
        });
        return options;
    }
    function $68fbc1daad5cf8b5$var$scaleClip(scale, allowedOverflow) {
        var opts = scale && scale.options || {
        };
        var reverse = opts.reverse;
        var min = opts.min === undefined ? allowedOverflow : 0;
        var max = opts.max === undefined ? allowedOverflow : 0;
        return {
            start: reverse ? max : min,
            end: reverse ? min : max
        };
    }
    function $68fbc1daad5cf8b5$var$defaultClip(xScale, yScale, allowedOverflow) {
        if (allowedOverflow === false) return false;
        var x = $68fbc1daad5cf8b5$var$scaleClip(xScale, allowedOverflow);
        var y = $68fbc1daad5cf8b5$var$scaleClip(yScale, allowedOverflow);
        return {
            top: y.end,
            right: x.end,
            bottom: y.start,
            left: x.start
        };
    }
    function $68fbc1daad5cf8b5$var$toClip(value) {
        var t, r, b, l;
        if ($6892236ee0bf6afc$export$23f2a1d2818174ef(value)) {
            t = value.top;
            r = value.right;
            b = value.bottom;
            l = value.left;
        } else t = r = b = l = value;
        return {
            top: t,
            right: r,
            bottom: b,
            left: l,
            disabled: value === false
        };
    }
    function $68fbc1daad5cf8b5$var$getSortedDatasetIndices(chart, filterVisible) {
        var keys = [];
        var metasets = chart._getSortedDatasetMetas(filterVisible);
        var i, ilen;
        for(i = 0, ilen = metasets.length; i < ilen; ++i)keys.push(metasets[i].index);
        return keys;
    }
    function $68fbc1daad5cf8b5$var$applyStack(stack, value, dsIndex) {
        var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
        };
        var keys = stack.keys;
        var singleMode = options.mode === "single";
        var i, ilen, datasetIndex, otherValue;
        if (value === null) return;
        for(i = 0, ilen = keys.length; i < ilen; ++i){
            datasetIndex = +keys[i];
            if (datasetIndex === dsIndex) {
                if (options.all) continue;
                break;
            }
            otherValue = stack.values[datasetIndex];
            if ($6892236ee0bf6afc$export$39b482c5e57630a8(otherValue) && (singleMode || value === 0 || $6892236ee0bf6afc$export$2408f22a0fab9ae5(value) === $6892236ee0bf6afc$export$2408f22a0fab9ae5(otherValue))) value += otherValue;
        }
        return value;
    }
    function $68fbc1daad5cf8b5$var$convertObjectDataToArray(data) {
        var keys = Object.keys(data);
        var adata = new Array(keys.length);
        var i, ilen, key;
        for(i = 0, ilen = keys.length; i < ilen; ++i){
            key = keys[i];
            adata[i] = {
                x: key,
                y: data[key]
            };
        }
        return adata;
    }
    function $68fbc1daad5cf8b5$var$isStacked(scale, meta) {
        var stacked = scale && scale.options.stacked;
        return stacked || stacked === undefined && meta.stack !== undefined;
    }
    function $68fbc1daad5cf8b5$var$getStackKey(indexScale, valueScale, meta) {
        return "".concat(indexScale.id, ".").concat(valueScale.id, ".").concat(meta.stack || meta.type);
    }
    function $68fbc1daad5cf8b5$var$getUserBounds(scale) {
        var ref = scale.getUserBounds(), min = ref.min, max = ref.max, minDefined = ref.minDefined, maxDefined = ref.maxDefined;
        return {
            min: minDefined ? min : Number.NEGATIVE_INFINITY,
            max: maxDefined ? max : Number.POSITIVE_INFINITY
        };
    }
    function $68fbc1daad5cf8b5$var$getOrCreateStack(stacks, stackKey, indexValue) {
        var subStack = stacks[stackKey] || (stacks[stackKey] = {
        });
        return subStack[indexValue] || (subStack[indexValue] = {
        });
    }
    function $68fbc1daad5cf8b5$var$getLastIndexInStack(stack, vScale, positive, type) {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = vScale.getMatchingVisibleMetas(type).reverse()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var meta = _step.value;
                var value = stack[meta.index];
                if (positive && value > 0 || !positive && value < 0) return meta.index;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
        return null;
    }
    function $68fbc1daad5cf8b5$var$updateStacks(controller, parsed) {
        var chart = controller.chart, meta = controller._cachedMeta;
        var stacks = chart._stacks || (chart._stacks = {
        });
        var iScale = meta.iScale, vScale = meta.vScale, datasetIndex = meta.index;
        var iAxis = iScale.axis;
        var vAxis = vScale.axis;
        var key = $68fbc1daad5cf8b5$var$getStackKey(iScale, vScale, meta);
        var ilen = parsed.length;
        var stack;
        for(var i = 0; i < ilen; ++i){
            var item = parsed[i];
            var index1 = item[iAxis], value = item[vAxis];
            var itemStacks = item._stacks || (item._stacks = {
            });
            stack = itemStacks[vAxis] = $68fbc1daad5cf8b5$var$getOrCreateStack(stacks, key, index1);
            stack[datasetIndex] = value;
            stack._top = $68fbc1daad5cf8b5$var$getLastIndexInStack(stack, vScale, true, meta.type);
            stack._bottom = $68fbc1daad5cf8b5$var$getLastIndexInStack(stack, vScale, false, meta.type);
        }
    }
    function $68fbc1daad5cf8b5$var$getFirstScaleId(chart, axis) {
        var scales1 = chart.scales;
        return Object.keys(scales1).filter(function(key) {
            return scales1[key].axis === axis;
        }).shift();
    }
    function $68fbc1daad5cf8b5$var$createDatasetContext(parent, index2) {
        return $6892236ee0bf6afc$export$dda1d9f60106f0e9(parent, {
            active: false,
            dataset: undefined,
            datasetIndex: index2,
            index: index2,
            mode: "default",
            type: "dataset"
        });
    }
    function $68fbc1daad5cf8b5$var$createDataContext(parent, index3, element) {
        return $6892236ee0bf6afc$export$dda1d9f60106f0e9(parent, {
            active: false,
            dataIndex: index3,
            parsed: undefined,
            raw: undefined,
            element: element,
            index: index3,
            mode: "default",
            type: "data"
        });
    }
    function $68fbc1daad5cf8b5$var$clearStacks(meta, items) {
        var datasetIndex = meta.controller.index;
        var axis = meta.vScale && meta.vScale.axis;
        if (!axis) return;
        items = items || meta._parsed;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var parsed = _step.value;
                var stacks = parsed._stacks;
                if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) return;
                delete stacks[axis][datasetIndex];
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
    }
    var $68fbc1daad5cf8b5$var$isDirectUpdateMode = function(mode) {
        return mode === "reset" || mode === "none";
    };
    var $68fbc1daad5cf8b5$var$cloneIfNotShared = function(cached, shared) {
        return shared ? cached : Object.assign({
        }, cached);
    };
    var $68fbc1daad5cf8b5$var$createStack = function(canStack, meta, chart) {
        return canStack && !meta.hidden && meta._stacked && {
            keys: $68fbc1daad5cf8b5$var$getSortedDatasetIndices(chart, true),
            values: null
        };
    };
    var $68fbc1daad5cf8b5$export$75572ec5c55b4048 = /*#__PURE__*/ function() {
        function DatasetController(chart, datasetIndex) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, DatasetController);
            this.chart = chart;
            this._ctx = chart.ctx;
            this.index = datasetIndex;
            this._cachedDataOpts = {
            };
            this._cachedMeta = this.getMeta();
            this._type = this._cachedMeta.type;
            this.options = undefined;
            this._parsing = false;
            this._data = undefined;
            this._objectData = undefined;
            this._sharedOptions = undefined;
            this._drawStart = undefined;
            this._drawCount = undefined;
            this.enableOptionSharing = false;
            this.supportsDecimation = false;
            this.$context = undefined;
            this._syncList = [];
            this.initialize();
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(DatasetController, [
            {
                key: "initialize",
                value: function initialize() {
                    var meta = this._cachedMeta;
                    this.configure();
                    this.linkScales();
                    meta._stacked = $68fbc1daad5cf8b5$var$isStacked(meta.vScale, meta);
                    this.addElements();
                }
            },
            {
                key: "updateIndex",
                value: function updateIndex(datasetIndex) {
                    if (this.index !== datasetIndex) $68fbc1daad5cf8b5$var$clearStacks(this._cachedMeta);
                    this.index = datasetIndex;
                }
            },
            {
                key: "linkScales",
                value: function linkScales() {
                    var chart = this.chart;
                    var meta = this._cachedMeta;
                    var dataset = this.getDataset();
                    var chooseId = function(axis, x, y, r) {
                        return axis === "x" ? x : axis === "r" ? r : y;
                    };
                    var xid = meta.xAxisID = $6892236ee0bf6afc$export$90a7f3efeed30595(dataset.xAxisID, $68fbc1daad5cf8b5$var$getFirstScaleId(chart, "x"));
                    var yid = meta.yAxisID = $6892236ee0bf6afc$export$90a7f3efeed30595(dataset.yAxisID, $68fbc1daad5cf8b5$var$getFirstScaleId(chart, "y"));
                    var rid = meta.rAxisID = $6892236ee0bf6afc$export$90a7f3efeed30595(dataset.rAxisID, $68fbc1daad5cf8b5$var$getFirstScaleId(chart, "r"));
                    var indexAxis = meta.indexAxis;
                    var iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
                    var vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
                    meta.xScale = this.getScaleForId(xid);
                    meta.yScale = this.getScaleForId(yid);
                    meta.rScale = this.getScaleForId(rid);
                    meta.iScale = this.getScaleForId(iid);
                    meta.vScale = this.getScaleForId(vid);
                }
            },
            {
                key: "getDataset",
                value: function getDataset() {
                    return this.chart.data.datasets[this.index];
                }
            },
            {
                key: "getMeta",
                value: function getMeta() {
                    return this.chart.getDatasetMeta(this.index);
                }
            },
            {
                key: "getScaleForId",
                value: function getScaleForId(scaleID) {
                    return this.chart.scales[scaleID];
                }
            },
            {
                key: "_getOtherScale",
                value: function _getOtherScale(scale) {
                    var meta = this._cachedMeta;
                    return scale === meta.iScale ? meta.vScale : meta.iScale;
                }
            },
            {
                key: "reset",
                value: function reset() {
                    this._update("reset");
                }
            },
            {
                key: "_destroy",
                value: function _destroy() {
                    var meta = this._cachedMeta;
                    if (this._data) $6892236ee0bf6afc$export$3b14a55fb2447963(this._data, this);
                    if (meta._stacked) $68fbc1daad5cf8b5$var$clearStacks(meta);
                }
            },
            {
                key: "_dataCheck",
                value: function _dataCheck() {
                    var dataset = this.getDataset();
                    var data = dataset.data || (dataset.data = []);
                    var _data = this._data;
                    if ($6892236ee0bf6afc$export$23f2a1d2818174ef(data)) this._data = $68fbc1daad5cf8b5$var$convertObjectDataToArray(data);
                    else if (_data !== data) {
                        if (_data) {
                            $6892236ee0bf6afc$export$3b14a55fb2447963(_data, this);
                            var meta = this._cachedMeta;
                            $68fbc1daad5cf8b5$var$clearStacks(meta);
                            meta._parsed = [];
                        }
                        if (data && Object.isExtensible(data)) $6892236ee0bf6afc$export$882b5998b3b9117c(data, this);
                        this._syncList = [];
                        this._data = data;
                    }
                }
            },
            {
                key: "addElements",
                value: function addElements() {
                    var meta = this._cachedMeta;
                    this._dataCheck();
                    if (this.datasetElementType) meta.dataset = new this.datasetElementType();
                }
            },
            {
                key: "buildOrUpdateElements",
                value: function buildOrUpdateElements(resetNewElements) {
                    var meta = this._cachedMeta;
                    var dataset = this.getDataset();
                    var stackChanged = false;
                    this._dataCheck();
                    var oldStacked = meta._stacked;
                    meta._stacked = $68fbc1daad5cf8b5$var$isStacked(meta.vScale, meta);
                    if (meta.stack !== dataset.stack) {
                        stackChanged = true;
                        $68fbc1daad5cf8b5$var$clearStacks(meta);
                        meta.stack = dataset.stack;
                    }
                    this._resyncElements(resetNewElements);
                    if (stackChanged || oldStacked !== meta._stacked) $68fbc1daad5cf8b5$var$updateStacks(this, meta._parsed);
                }
            },
            {
                key: "configure",
                value: function configure() {
                    var config = this.chart.config;
                    var scopeKeys = config.datasetScopeKeys(this._type);
                    var scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
                    this.options = config.createResolver(scopes, this.getContext());
                    this._parsing = this.options.parsing;
                    this._cachedDataOpts = {
                    };
                }
            },
            {
                key: "parse",
                value: function parse1(start, count) {
                    var ref = this, meta = ref._cachedMeta, data = ref._data;
                    var iScale = meta.iScale, _stacked = meta._stacked;
                    var iAxis = iScale.axis;
                    var sorted = start === 0 && count === data.length ? true : meta._sorted;
                    var prev = start > 0 && meta._parsed[start - 1];
                    var i, cur, parsed;
                    if (this._parsing === false) {
                        meta._parsed = data;
                        meta._sorted = true;
                        parsed = data;
                    } else {
                        if ($6892236ee0bf6afc$export$8b22cf2602fb60ce(data[start])) parsed = this.parseArrayData(meta, data, start, count);
                        else if ($6892236ee0bf6afc$export$23f2a1d2818174ef(data[start])) parsed = this.parseObjectData(meta, data, start, count);
                        else parsed = this.parsePrimitiveData(meta, data, start, count);
                        var isNotInOrderComparedToPrev = function() {
                            return cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
                        };
                        for(i = 0; i < count; ++i){
                            meta._parsed[i + start] = cur = parsed[i];
                            if (sorted) {
                                if (isNotInOrderComparedToPrev()) sorted = false;
                                prev = cur;
                            }
                        }
                        meta._sorted = sorted;
                    }
                    if (_stacked) $68fbc1daad5cf8b5$var$updateStacks(this, parsed);
                }
            },
            {
                key: "parsePrimitiveData",
                value: function parsePrimitiveData(meta, data, start, count) {
                    var iScale = meta.iScale, vScale = meta.vScale;
                    var iAxis = iScale.axis;
                    var vAxis = vScale.axis;
                    var labels = iScale.getLabels();
                    var singleScale = iScale === vScale;
                    var parsed = new Array(count);
                    var i, ilen, index4;
                    for(i = 0, ilen = count; i < ilen; ++i){
                        index4 = i + start;
                        var _obj;
                        parsed[i] = (_obj = {
                        }, /*@__PURE__*/ $parcel$interopDefault($1W515)(_obj, iAxis, singleScale || iScale.parse(labels[index4], index4)), /*@__PURE__*/ $parcel$interopDefault($1W515)(_obj, vAxis, vScale.parse(data[index4], index4)), _obj);
                    }
                    return parsed;
                }
            },
            {
                key: "parseArrayData",
                value: function parseArrayData(meta, data, start, count) {
                    var xScale = meta.xScale, yScale = meta.yScale;
                    var parsed = new Array(count);
                    var i, ilen, index5, item;
                    for(i = 0, ilen = count; i < ilen; ++i){
                        index5 = i + start;
                        item = data[index5];
                        parsed[i] = {
                            x: xScale.parse(item[0], index5),
                            y: yScale.parse(item[1], index5)
                        };
                    }
                    return parsed;
                }
            },
            {
                key: "parseObjectData",
                value: function parseObjectData(meta, data, start, count) {
                    var xScale = meta.xScale, yScale = meta.yScale;
                    var __parsing = this._parsing, _xAxisKey = __parsing.xAxisKey, xAxisKey = _xAxisKey === void 0 ? "x" : _xAxisKey, _yAxisKey = __parsing.yAxisKey, yAxisKey = _yAxisKey === void 0 ? "y" : _yAxisKey;
                    var parsed = new Array(count);
                    var i, ilen, index6, item;
                    for(i = 0, ilen = count; i < ilen; ++i){
                        index6 = i + start;
                        item = data[index6];
                        parsed[i] = {
                            x: xScale.parse($6892236ee0bf6afc$export$2d1720544b23b823(item, xAxisKey), index6),
                            y: yScale.parse($6892236ee0bf6afc$export$2d1720544b23b823(item, yAxisKey), index6)
                        };
                    }
                    return parsed;
                }
            },
            {
                key: "getParsed",
                value: function getParsed(index7) {
                    return this._cachedMeta._parsed[index7];
                }
            },
            {
                key: "getDataElement",
                value: function getDataElement(index8) {
                    return this._cachedMeta.data[index8];
                }
            },
            {
                key: "applyStack",
                value: function applyStack1(scale, parsed, mode) {
                    var chart = this.chart;
                    var meta = this._cachedMeta;
                    var value = parsed[scale.axis];
                    var stack = {
                        keys: $68fbc1daad5cf8b5$var$getSortedDatasetIndices(chart, true),
                        values: parsed._stacks[scale.axis]
                    };
                    return $68fbc1daad5cf8b5$var$applyStack(stack, value, meta.index, {
                        mode: mode
                    });
                }
            },
            {
                key: "updateRangeFromParsed",
                value: function updateRangeFromParsed(range, scale, parsed, stack) {
                    var parsedValue = parsed[scale.axis];
                    var value = parsedValue === null ? NaN : parsedValue;
                    var values = stack && parsed._stacks[scale.axis];
                    if (stack && values) {
                        stack.values = values;
                        value = $68fbc1daad5cf8b5$var$applyStack(stack, parsedValue, this._cachedMeta.index);
                    }
                    range.min = Math.min(range.min, value);
                    range.max = Math.max(range.max, value);
                }
            },
            {
                key: "getMinMax",
                value: function getMinMax(scale, canStack) {
                    var _skip = function _skip() {
                        parsed = _parsed[i];
                        var otherValue = parsed[otherScale.axis];
                        return !$6892236ee0bf6afc$export$39b482c5e57630a8(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
                    };
                    var meta = this._cachedMeta;
                    var _parsed = meta._parsed;
                    var sorted = meta._sorted && scale === meta.iScale;
                    var ilen = _parsed.length;
                    var otherScale = this._getOtherScale(scale);
                    var stack = $68fbc1daad5cf8b5$var$createStack(canStack, meta, this.chart);
                    var range = {
                        min: Number.POSITIVE_INFINITY,
                        max: Number.NEGATIVE_INFINITY
                    };
                    var ref = $68fbc1daad5cf8b5$var$getUserBounds(otherScale), otherMin = ref.min, otherMax = ref.max;
                    var i, parsed;
                    for(i = 0; i < ilen; ++i){
                        if (_skip()) continue;
                        this.updateRangeFromParsed(range, scale, parsed, stack);
                        if (sorted) break;
                    }
                    if (sorted) for(i = ilen - 1; i >= 0; --i){
                        if (_skip()) continue;
                        this.updateRangeFromParsed(range, scale, parsed, stack);
                        break;
                    }
                    return range;
                }
            },
            {
                key: "getAllParsedValues",
                value: function getAllParsedValues(scale) {
                    var parsed = this._cachedMeta._parsed;
                    var values = [];
                    var i, ilen, value;
                    for(i = 0, ilen = parsed.length; i < ilen; ++i){
                        value = parsed[i][scale.axis];
                        if ($6892236ee0bf6afc$export$39b482c5e57630a8(value)) values.push(value);
                    }
                    return values;
                }
            },
            {
                key: "getMaxOverflow",
                value: function getMaxOverflow() {
                    return false;
                }
            },
            {
                key: "getLabelAndValue",
                value: function getLabelAndValue(index9) {
                    var meta = this._cachedMeta;
                    var iScale = meta.iScale;
                    var vScale = meta.vScale;
                    var parsed = this.getParsed(index9);
                    return {
                        label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
                        value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
                    };
                }
            },
            {
                key: "_update",
                value: function _update(mode) {
                    var meta = this._cachedMeta;
                    this.update(mode || "default");
                    meta._clip = $68fbc1daad5cf8b5$var$toClip($6892236ee0bf6afc$export$90a7f3efeed30595(this.options.clip, $68fbc1daad5cf8b5$var$defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
                }
            },
            {
                key: "update",
                value: function update(mode) {
                }
            },
            {
                key: "draw",
                value: function draw2() {
                    var ctx = this._ctx;
                    var chart = this.chart;
                    var meta = this._cachedMeta;
                    var elements1 = meta.data || [];
                    var area = chart.chartArea;
                    var active = [];
                    var start = this._drawStart || 0;
                    var count = this._drawCount || elements1.length - start;
                    var drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
                    var i;
                    if (meta.dataset) meta.dataset.draw(ctx, area, start, count);
                    for(i = start; i < start + count; ++i){
                        var element = elements1[i];
                        if (element.hidden) continue;
                        if (element.active && drawActiveElementsOnTop) active.push(element);
                        else element.draw(ctx, area);
                    }
                    for(i = 0; i < active.length; ++i)active[i].draw(ctx, area);
                }
            },
            {
                key: "getStyle",
                value: function getStyle(index10, active) {
                    var mode = active ? "active" : "default";
                    return index10 === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index10 || 0, mode);
                }
            },
            {
                key: "getContext",
                value: function getContext(index11, active, mode) {
                    var dataset = this.getDataset();
                    var context;
                    if (index11 >= 0 && index11 < this._cachedMeta.data.length) {
                        var element = this._cachedMeta.data[index11];
                        context = element.$context || (element.$context = $68fbc1daad5cf8b5$var$createDataContext(this.getContext(), index11, element));
                        context.parsed = this.getParsed(index11);
                        context.raw = dataset.data[index11];
                        context.index = context.dataIndex = index11;
                    } else {
                        context = this.$context || (this.$context = $68fbc1daad5cf8b5$var$createDatasetContext(this.chart.getContext(), this.index));
                        context.dataset = dataset;
                        context.index = context.datasetIndex = this.index;
                    }
                    context.active = !!active;
                    context.mode = mode;
                    return context;
                }
            },
            {
                key: "resolveDatasetElementOptions",
                value: function resolveDatasetElementOptions(mode) {
                    return this._resolveElementOptions(this.datasetElementType.id, mode);
                }
            },
            {
                key: "resolveDataElementOptions",
                value: function resolveDataElementOptions(index12, mode) {
                    return this._resolveElementOptions(this.dataElementType.id, mode, index12);
                }
            },
            {
                key: "_resolveElementOptions",
                value: function _resolveElementOptions(elementType) {
                    var mode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "default", index13 = arguments.length > 2 ? arguments[2] : void 0;
                    var _this = this;
                    var active = mode === "active";
                    var cache = this._cachedDataOpts;
                    var cacheKey = elementType + "-" + mode;
                    var cached = cache[cacheKey];
                    var sharing = this.enableOptionSharing && $6892236ee0bf6afc$export$35e795649ee09318(index13);
                    if (cached) return $68fbc1daad5cf8b5$var$cloneIfNotShared(cached, sharing);
                    var config = this.chart.config;
                    var scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
                    var prefixes = active ? [
                        "".concat(elementType, "Hover"),
                        "hover",
                        elementType,
                        ""
                    ] : [
                        elementType,
                        ""
                    ];
                    var scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
                    var names = Object.keys($6892236ee0bf6afc$export$4368d992c4eafac0.elements[elementType]);
                    var context = function() {
                        return _this.getContext(index13, active);
                    };
                    var values = config.resolveNamedOptions(scopes, names, context, prefixes);
                    if (values.$shared) {
                        values.$shared = sharing;
                        cache[cacheKey] = Object.freeze($68fbc1daad5cf8b5$var$cloneIfNotShared(values, sharing));
                    }
                    return values;
                }
            },
            {
                key: "_resolveAnimations",
                value: function _resolveAnimations(index14, transition, active) {
                    var chart = this.chart;
                    var cache = this._cachedDataOpts;
                    var cacheKey = "animation-".concat(transition);
                    var cached = cache[cacheKey];
                    if (cached) return cached;
                    var options;
                    if (chart.options.animation !== false) {
                        var config = this.chart.config;
                        var scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
                        var scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
                        options = config.createResolver(scopes, this.getContext(index14, active, transition));
                    }
                    var animations = new $68fbc1daad5cf8b5$export$8ab227dac26677d(chart, options && options.animations);
                    if (options && options._cacheable) cache[cacheKey] = Object.freeze(animations);
                    return animations;
                }
            },
            {
                key: "getSharedOptions",
                value: function getSharedOptions(options) {
                    if (!options.$shared) return;
                    return this._sharedOptions || (this._sharedOptions = Object.assign({
                    }, options));
                }
            },
            {
                key: "includeOptions",
                value: function includeOptions(mode, sharedOptions) {
                    return !sharedOptions || $68fbc1daad5cf8b5$var$isDirectUpdateMode(mode) || this.chart._animationsDisabled;
                }
            },
            {
                key: "updateElement",
                value: function updateElement(element, index15, properties, mode) {
                    if ($68fbc1daad5cf8b5$var$isDirectUpdateMode(mode)) Object.assign(element, properties);
                    else this._resolveAnimations(index15, mode).update(element, properties);
                }
            },
            {
                key: "updateSharedOptions",
                value: function updateSharedOptions(sharedOptions, mode, newOptions) {
                    if (sharedOptions && !$68fbc1daad5cf8b5$var$isDirectUpdateMode(mode)) this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
                }
            },
            {
                key: "_setStyle",
                value: function _setStyle(element, index16, mode, active) {
                    element.active = active;
                    var options = this.getStyle(index16, active);
                    this._resolveAnimations(index16, mode, active).update(element, {
                        options: !active && this.getSharedOptions(options) || options
                    });
                }
            },
            {
                key: "removeHoverStyle",
                value: function removeHoverStyle(element, datasetIndex, index17) {
                    this._setStyle(element, index17, "active", false);
                }
            },
            {
                key: "setHoverStyle",
                value: function setHoverStyle(element, datasetIndex, index18) {
                    this._setStyle(element, index18, "active", true);
                }
            },
            {
                key: "_removeDatasetHoverStyle",
                value: function _removeDatasetHoverStyle() {
                    var element = this._cachedMeta.dataset;
                    if (element) this._setStyle(element, undefined, "active", false);
                }
            },
            {
                key: "_setDatasetHoverStyle",
                value: function _setDatasetHoverStyle() {
                    var element = this._cachedMeta.dataset;
                    if (element) this._setStyle(element, undefined, "active", true);
                }
            },
            {
                key: "_resyncElements",
                value: function _resyncElements(resetNewElements) {
                    var data = this._data;
                    var elements2 = this._cachedMeta.data;
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = this._syncList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var _value = /*@__PURE__*/ $parcel$interopDefault($ffe0db64804a4aa2$exports)(_step.value, 3), method = _value[0], arg1 = _value[1], arg2 = _value[2];
                            this[method](arg1, arg2);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                        } finally{
                            if (_didIteratorError) throw _iteratorError;
                        }
                    }
                    this._syncList = [];
                    var numMeta = elements2.length;
                    var numData = data.length;
                    var count = Math.min(numData, numMeta);
                    if (count) this.parse(0, count);
                    if (numData > numMeta) this._insertElements(numMeta, numData - numMeta, resetNewElements);
                    else if (numData < numMeta) this._removeElements(numData, numMeta - numData);
                }
            },
            {
                key: "_insertElements",
                value: function _insertElements(start, count) {
                    var resetNewElements = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
                    var meta = this._cachedMeta;
                    var data = meta.data;
                    var end = start + count;
                    var i;
                    var move = function(arr) {
                        arr.length += count;
                        for(i = arr.length - 1; i >= end; i--)arr[i] = arr[i - count];
                    };
                    move(data);
                    for(i = start; i < end; ++i)data[i] = new this.dataElementType();
                    if (this._parsing) move(meta._parsed);
                    this.parse(start, count);
                    if (resetNewElements) this.updateElements(data, start, count, "reset");
                }
            },
            {
                key: "updateElements",
                value: function updateElements(element, start, count, mode) {
                }
            },
            {
                key: "_removeElements",
                value: function _removeElements(start, count) {
                    var meta = this._cachedMeta;
                    if (this._parsing) {
                        var removed = meta._parsed.splice(start, count);
                        if (meta._stacked) $68fbc1daad5cf8b5$var$clearStacks(meta, removed);
                    }
                    meta.data.splice(start, count);
                }
            },
            {
                key: "_sync",
                value: function _sync(args) {
                    if (this._parsing) this._syncList.push(args);
                    else {
                        var _args = /*@__PURE__*/ $parcel$interopDefault($ffe0db64804a4aa2$exports)(args, 3), method = _args[0], arg1 = _args[1], arg2 = _args[2];
                        this[method](arg1, arg2);
                    }
                    this.chart._dataChanges.push([
                        this.index
                    ].concat(/*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(args)));
                }
            },
            {
                key: "_onDataPush",
                value: function _onDataPush() {
                    var count = arguments.length;
                    this._sync([
                        "_insertElements",
                        this.getDataset().data.length - count,
                        count
                    ]);
                }
            },
            {
                key: "_onDataPop",
                value: function _onDataPop() {
                    this._sync([
                        "_removeElements",
                        this._cachedMeta.data.length - 1,
                        1
                    ]);
                }
            },
            {
                key: "_onDataShift",
                value: function _onDataShift() {
                    this._sync([
                        "_removeElements",
                        0,
                        1
                    ]);
                }
            },
            {
                key: "_onDataSplice",
                value: function _onDataSplice(start, count) {
                    if (count) this._sync([
                        "_removeElements",
                        start,
                        count
                    ]);
                    var newCount = arguments.length - 2;
                    if (newCount) this._sync([
                        "_insertElements",
                        start,
                        newCount
                    ]);
                }
            },
            {
                key: "_onDataUnshift",
                value: function _onDataUnshift() {
                    this._sync([
                        "_insertElements",
                        0,
                        arguments.length
                    ]);
                }
            }
        ]);
        return DatasetController;
    }();
    $68fbc1daad5cf8b5$export$75572ec5c55b4048.defaults = {
    };
    $68fbc1daad5cf8b5$export$75572ec5c55b4048.prototype.datasetElementType = null;
    $68fbc1daad5cf8b5$export$75572ec5c55b4048.prototype.dataElementType = null;
    function $68fbc1daad5cf8b5$var$getAllScaleValues(scale, type) {
        if (!scale._cache.$bar) {
            var visibleMetas = scale.getMatchingVisibleMetas(type);
            var values = [];
            for(var i = 0, ilen = visibleMetas.length; i < ilen; i++)values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));
            scale._cache.$bar = $6892236ee0bf6afc$export$71511d61b312f219(values.sort(function(a, b) {
                return a - b;
            }));
        }
        return scale._cache.$bar;
    }
    function $68fbc1daad5cf8b5$var$computeMinSampleSize(meta) {
        var scale = meta.iScale;
        var values = $68fbc1daad5cf8b5$var$getAllScaleValues(scale, meta.type);
        var min = scale._length;
        var i, ilen, curr, prev;
        var updateMinAndPrev = function() {
            if (curr === 32767 || curr === -32768) return;
            if ($6892236ee0bf6afc$export$35e795649ee09318(prev)) min = Math.min(min, Math.abs(curr - prev) || min);
            prev = curr;
        };
        for(i = 0, ilen = values.length; i < ilen; ++i){
            curr = scale.getPixelForValue(values[i]);
            updateMinAndPrev();
        }
        prev = undefined;
        for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){
            curr = scale.getPixelForTick(i);
            updateMinAndPrev();
        }
        return min;
    }
    function $68fbc1daad5cf8b5$var$computeFitCategoryTraits(index19, ruler, options, stackCount) {
        var thickness = options.barThickness;
        var size, ratio;
        if ($6892236ee0bf6afc$export$342063e11d6c3cad(thickness)) {
            size = ruler.min * options.categoryPercentage;
            ratio = options.barPercentage;
        } else {
            size = thickness * stackCount;
            ratio = 1;
        }
        return {
            chunk: size / stackCount,
            ratio: ratio,
            start: ruler.pixels[index19] - size / 2
        };
    }
    function $68fbc1daad5cf8b5$var$computeFlexCategoryTraits(index20, ruler, options, stackCount) {
        var pixels = ruler.pixels;
        var curr = pixels[index20];
        var prev = index20 > 0 ? pixels[index20 - 1] : null;
        var next = index20 < pixels.length - 1 ? pixels[index20 + 1] : null;
        var percent = options.categoryPercentage;
        if (prev === null) prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
        if (next === null) next = curr + curr - prev;
        var start = curr - (curr - Math.min(prev, next)) / 2 * percent;
        var size = Math.abs(next - prev) / 2 * percent;
        return {
            chunk: size / stackCount,
            ratio: options.barPercentage,
            start: start
        };
    }
    function $68fbc1daad5cf8b5$var$parseFloatBar(entry, item, vScale, i) {
        var startValue = vScale.parse(entry[0], i);
        var endValue = vScale.parse(entry[1], i);
        var min = Math.min(startValue, endValue);
        var max = Math.max(startValue, endValue);
        var barStart = min;
        var barEnd = max;
        if (Math.abs(min) > Math.abs(max)) {
            barStart = max;
            barEnd = min;
        }
        item[vScale.axis] = barEnd;
        item._custom = {
            barStart: barStart,
            barEnd: barEnd,
            start: startValue,
            end: endValue,
            min: min,
            max: max
        };
    }
    function $68fbc1daad5cf8b5$var$parseValue(entry, item, vScale, i) {
        if ($6892236ee0bf6afc$export$8b22cf2602fb60ce(entry)) $68fbc1daad5cf8b5$var$parseFloatBar(entry, item, vScale, i);
        else item[vScale.axis] = vScale.parse(entry, i);
        return item;
    }
    function $68fbc1daad5cf8b5$var$parseArrayOrPrimitive(meta, data, start, count) {
        var iScale = meta.iScale;
        var vScale = meta.vScale;
        var labels = iScale.getLabels();
        var singleScale = iScale === vScale;
        var parsed = [];
        var i, ilen, item, entry;
        for(i = start, ilen = start + count; i < ilen; ++i){
            entry = data[i];
            item = {
            };
            item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
            parsed.push($68fbc1daad5cf8b5$var$parseValue(entry, item, vScale, i));
        }
        return parsed;
    }
    function $68fbc1daad5cf8b5$var$isFloatBar(custom) {
        return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
    }
    function $68fbc1daad5cf8b5$var$barSign(size, vScale, actualBase) {
        if (size !== 0) return $6892236ee0bf6afc$export$2408f22a0fab9ae5(size);
        return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
    }
    function $68fbc1daad5cf8b5$var$borderProps(properties) {
        var reverse, start, end, top, bottom;
        if (properties.horizontal) {
            reverse = properties.base > properties.x;
            start = "left";
            end = "right";
        } else {
            reverse = properties.base < properties.y;
            start = "bottom";
            end = "top";
        }
        if (reverse) {
            top = "end";
            bottom = "start";
        } else {
            top = "start";
            bottom = "end";
        }
        return {
            start: start,
            end: end,
            reverse: reverse,
            top: top,
            bottom: bottom
        };
    }
    function $68fbc1daad5cf8b5$var$setBorderSkipped(properties, options, stack, index21) {
        var edge = options.borderSkipped;
        var res = {
        };
        if (!edge) {
            properties.borderSkipped = res;
            return;
        }
        var ref = $68fbc1daad5cf8b5$var$borderProps(properties), start = ref.start, end = ref.end, reverse = ref.reverse, top = ref.top, bottom = ref.bottom;
        if (edge === "middle" && stack) {
            properties.enableBorderRadius = true;
            if ((stack._top || 0) === index21) edge = top;
            else if ((stack._bottom || 0) === index21) edge = bottom;
            else {
                res[$68fbc1daad5cf8b5$var$parseEdge(bottom, start, end, reverse)] = true;
                edge = top;
            }
        }
        res[$68fbc1daad5cf8b5$var$parseEdge(edge, start, end, reverse)] = true;
        properties.borderSkipped = res;
    }
    function $68fbc1daad5cf8b5$var$parseEdge(edge, a, b, reverse) {
        if (reverse) {
            edge = $68fbc1daad5cf8b5$var$swap(edge, a, b);
            edge = $68fbc1daad5cf8b5$var$startEnd(edge, b, a);
        } else edge = $68fbc1daad5cf8b5$var$startEnd(edge, a, b);
        return edge;
    }
    function $68fbc1daad5cf8b5$var$swap(orig, v1, v2) {
        return orig === v1 ? v2 : orig === v2 ? v1 : orig;
    }
    function $68fbc1daad5cf8b5$var$startEnd(v, start, end) {
        return v === "start" ? start : v === "end" ? end : v;
    }
    function $68fbc1daad5cf8b5$var$setInflateAmount(properties, param, ratio) {
        var inflateAmount = param.inflateAmount;
        properties.inflateAmount = inflateAmount === "auto" ? ratio === 1 ? 0.33 : 0 : inflateAmount;
    }
    var $68fbc1daad5cf8b5$export$e97d5dc64e999004 = /*#__PURE__*/ function(DatasetController) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(BarController, DatasetController);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(BarController);
        function BarController() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, BarController);
            return _super.apply(this, arguments);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(BarController, [
            {
                key: "parsePrimitiveData",
                value: function parsePrimitiveData(meta, data, start, count) {
                    return $68fbc1daad5cf8b5$var$parseArrayOrPrimitive(meta, data, start, count);
                }
            },
            {
                key: "parseArrayData",
                value: function parseArrayData(meta, data, start, count) {
                    return $68fbc1daad5cf8b5$var$parseArrayOrPrimitive(meta, data, start, count);
                }
            },
            {
                key: "parseObjectData",
                value: function parseObjectData(meta, data, start, count) {
                    var iScale = meta.iScale, vScale = meta.vScale;
                    var __parsing = this._parsing, _xAxisKey = __parsing.xAxisKey, xAxisKey = _xAxisKey === void 0 ? "x" : _xAxisKey, _yAxisKey = __parsing.yAxisKey, yAxisKey = _yAxisKey === void 0 ? "y" : _yAxisKey;
                    var iAxisKey = iScale.axis === "x" ? xAxisKey : yAxisKey;
                    var vAxisKey = vScale.axis === "x" ? xAxisKey : yAxisKey;
                    var parsed = [];
                    var i, ilen, item, obj;
                    for(i = start, ilen = start + count; i < ilen; ++i){
                        obj = data[i];
                        item = {
                        };
                        item[iScale.axis] = iScale.parse($6892236ee0bf6afc$export$2d1720544b23b823(obj, iAxisKey), i);
                        parsed.push($68fbc1daad5cf8b5$var$parseValue($6892236ee0bf6afc$export$2d1720544b23b823(obj, vAxisKey), item, vScale, i));
                    }
                    return parsed;
                }
            },
            {
                key: "updateRangeFromParsed",
                value: function updateRangeFromParsed(range, scale, parsed, stack) {
                    /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(BarController.prototype), "updateRangeFromParsed", this).call(this, range, scale, parsed, stack);
                    var custom = parsed._custom;
                    if (custom && scale === this._cachedMeta.vScale) {
                        range.min = Math.min(range.min, custom.min);
                        range.max = Math.max(range.max, custom.max);
                    }
                }
            },
            {
                key: "getMaxOverflow",
                value: function getMaxOverflow() {
                    return 0;
                }
            },
            {
                key: "getLabelAndValue",
                value: function getLabelAndValue(index22) {
                    var meta = this._cachedMeta;
                    var iScale = meta.iScale, vScale = meta.vScale;
                    var parsed = this.getParsed(index22);
                    var custom = parsed._custom;
                    var value = $68fbc1daad5cf8b5$var$isFloatBar(custom) ? "[" + custom.start + ", " + custom.end + "]" : "" + vScale.getLabelForValue(parsed[vScale.axis]);
                    return {
                        label: "" + iScale.getLabelForValue(parsed[iScale.axis]),
                        value: value
                    };
                }
            },
            {
                key: "initialize",
                value: function initialize() {
                    this.enableOptionSharing = true;
                    /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(BarController.prototype), "initialize", this).call(this);
                    var meta = this._cachedMeta;
                    meta.stack = this.getDataset().stack;
                }
            },
            {
                key: "update",
                value: function update(mode) {
                    var meta = this._cachedMeta;
                    this.updateElements(meta.data, 0, meta.data.length, mode);
                }
            },
            {
                key: "updateElements",
                value: function updateElements(bars, start, count, mode) {
                    var reset = mode === "reset";
                    var ref = this, index23 = ref.index, vScale = ref._cachedMeta.vScale;
                    var base = vScale.getBasePixel();
                    var horizontal = vScale.isHorizontal();
                    var ruler = this._getRuler();
                    var firstOpts = this.resolveDataElementOptions(start, mode);
                    var sharedOptions = this.getSharedOptions(firstOpts);
                    var includeOptions = this.includeOptions(mode, sharedOptions);
                    this.updateSharedOptions(sharedOptions, mode, firstOpts);
                    for(var i = start; i < start + count; i++){
                        var parsed = this.getParsed(i);
                        var vpixels = reset || $6892236ee0bf6afc$export$342063e11d6c3cad(parsed[vScale.axis]) ? {
                            base: base,
                            head: base
                        } : this._calculateBarValuePixels(i);
                        var ipixels = this._calculateBarIndexPixels(i, ruler);
                        var stack = (parsed._stacks || {
                        })[vScale.axis];
                        var properties = {
                            horizontal: horizontal,
                            base: vpixels.base,
                            enableBorderRadius: !stack || $68fbc1daad5cf8b5$var$isFloatBar(parsed._custom) || index23 === stack._top || index23 === stack._bottom,
                            x: horizontal ? vpixels.head : ipixels.center,
                            y: horizontal ? ipixels.center : vpixels.head,
                            height: horizontal ? ipixels.size : Math.abs(vpixels.size),
                            width: horizontal ? Math.abs(vpixels.size) : ipixels.size
                        };
                        if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? "active" : mode);
                        var options = properties.options || bars[i].options;
                        $68fbc1daad5cf8b5$var$setBorderSkipped(properties, options, stack, index23);
                        $68fbc1daad5cf8b5$var$setInflateAmount(properties, options, ruler.ratio);
                        this.updateElement(bars[i], i, properties, mode);
                    }
                }
            },
            {
                key: "_getStacks",
                value: function _getStacks(last, dataIndex) {
                    var meta = this._cachedMeta;
                    var iScale = meta.iScale;
                    var metasets = iScale.getMatchingVisibleMetas(this._type);
                    var stacked = iScale.options.stacked;
                    var ilen = metasets.length;
                    var stacks = [];
                    var i, item;
                    for(i = 0; i < ilen; ++i){
                        item = metasets[i];
                        if (!item.controller.options.grouped) continue;
                        if (typeof dataIndex !== "undefined") {
                            var val = item.controller.getParsed(dataIndex)[item.controller._cachedMeta.vScale.axis];
                            if ($6892236ee0bf6afc$export$342063e11d6c3cad(val) || isNaN(val)) continue;
                        }
                        if (stacked === false || stacks.indexOf(item.stack) === -1 || stacked === undefined && item.stack === undefined) stacks.push(item.stack);
                        if (item.index === last) break;
                    }
                    if (!stacks.length) stacks.push(undefined);
                    return stacks;
                }
            },
            {
                key: "_getStackCount",
                value: function _getStackCount(index24) {
                    return this._getStacks(undefined, index24).length;
                }
            },
            {
                key: "_getStackIndex",
                value: function _getStackIndex(datasetIndex, name, dataIndex) {
                    var stacks = this._getStacks(datasetIndex, dataIndex);
                    var index25 = name !== undefined ? stacks.indexOf(name) : -1;
                    return index25 === -1 ? stacks.length - 1 : index25;
                }
            },
            {
                key: "_getRuler",
                value: function _getRuler() {
                    var opts = this.options;
                    var meta = this._cachedMeta;
                    var iScale = meta.iScale;
                    var pixels = [];
                    var i, ilen;
                    for(i = 0, ilen = meta.data.length; i < ilen; ++i)pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
                    var barThickness = opts.barThickness;
                    var min = barThickness || $68fbc1daad5cf8b5$var$computeMinSampleSize(meta);
                    return {
                        min: min,
                        pixels: pixels,
                        start: iScale._startPixel,
                        end: iScale._endPixel,
                        stackCount: this._getStackCount(),
                        scale: iScale,
                        grouped: opts.grouped,
                        ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
                    };
                }
            },
            {
                key: "_calculateBarValuePixels",
                value: function _calculateBarValuePixels(index26) {
                    var ref = this, __cachedMeta = ref._cachedMeta, vScale = __cachedMeta.vScale, _stacked = __cachedMeta._stacked, _options = ref.options, baseValue = _options.base, minBarLength = _options.minBarLength;
                    var actualBase = baseValue || 0;
                    var parsed = this.getParsed(index26);
                    var custom = parsed._custom;
                    var floating = $68fbc1daad5cf8b5$var$isFloatBar(custom);
                    var value = parsed[vScale.axis];
                    var start = 0;
                    var length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
                    var head, size;
                    if (length !== value) {
                        start = length - value;
                        length = value;
                    }
                    if (floating) {
                        value = custom.barStart;
                        length = custom.barEnd - custom.barStart;
                        if (value !== 0 && $6892236ee0bf6afc$export$2408f22a0fab9ae5(value) !== $6892236ee0bf6afc$export$2408f22a0fab9ae5(custom.barEnd)) start = 0;
                        start += value;
                    }
                    var startValue = !$6892236ee0bf6afc$export$342063e11d6c3cad(baseValue) && !floating ? baseValue : start;
                    var base = vScale.getPixelForValue(startValue);
                    if (this.chart.getDataVisibility(index26)) head = vScale.getPixelForValue(start + length);
                    else head = base;
                    size = head - base;
                    if (Math.abs(size) < minBarLength) {
                        size = $68fbc1daad5cf8b5$var$barSign(size, vScale, actualBase) * minBarLength;
                        if (value === actualBase) base -= size / 2;
                        var startPixel = vScale.getPixelForDecimal(0);
                        var endPixel = vScale.getPixelForDecimal(1);
                        var min = Math.min(startPixel, endPixel);
                        var max = Math.max(startPixel, endPixel);
                        base = Math.max(Math.min(base, max), min);
                        head = base + size;
                    }
                    if (base === vScale.getPixelForValue(actualBase)) {
                        var halfGrid = $6892236ee0bf6afc$export$2408f22a0fab9ae5(size) * vScale.getLineWidthForValue(actualBase) / 2;
                        base += halfGrid;
                        size -= halfGrid;
                    }
                    return {
                        size: size,
                        base: base,
                        head: head,
                        center: head + size / 2
                    };
                }
            },
            {
                key: "_calculateBarIndexPixels",
                value: function _calculateBarIndexPixels(index27, ruler) {
                    var scale = ruler.scale;
                    var options = this.options;
                    var skipNull = options.skipNull;
                    var maxBarThickness = $6892236ee0bf6afc$export$90a7f3efeed30595(options.maxBarThickness, Infinity);
                    var center, size;
                    if (ruler.grouped) {
                        var stackCount = skipNull ? this._getStackCount(index27) : ruler.stackCount;
                        var range = options.barThickness === "flex" ? $68fbc1daad5cf8b5$var$computeFlexCategoryTraits(index27, ruler, options, stackCount) : $68fbc1daad5cf8b5$var$computeFitCategoryTraits(index27, ruler, options, stackCount);
                        var stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index27 : undefined);
                        center = range.start + range.chunk * stackIndex + range.chunk / 2;
                        size = Math.min(maxBarThickness, range.chunk * range.ratio);
                    } else {
                        center = scale.getPixelForValue(this.getParsed(index27)[scale.axis], index27);
                        size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
                    }
                    return {
                        base: center - size / 2,
                        head: center + size / 2,
                        center: center,
                        size: size
                    };
                }
            },
            {
                key: "draw",
                value: function draw2() {
                    var meta = this._cachedMeta;
                    var vScale = meta.vScale;
                    var rects = meta.data;
                    var ilen = rects.length;
                    var i = 0;
                    for(; i < ilen; ++i)if (this.getParsed(i)[vScale.axis] !== null) rects[i].draw(this._ctx);
                }
            }
        ]);
        return BarController;
    }($68fbc1daad5cf8b5$export$75572ec5c55b4048);
    $68fbc1daad5cf8b5$export$e97d5dc64e999004.id = "bar";
    $68fbc1daad5cf8b5$export$e97d5dc64e999004.defaults = {
        datasetElementType: false,
        dataElementType: "bar",
        categoryPercentage: 0.8,
        barPercentage: 0.9,
        grouped: true,
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "x",
                    "y",
                    "base",
                    "width",
                    "height"
                ]
            }
        }
    };
    $68fbc1daad5cf8b5$export$e97d5dc64e999004.overrides = {
        scales: {
            _index_: {
                type: "category",
                offset: true,
                grid: {
                    offset: true
                }
            },
            _value_: {
                type: "linear",
                beginAtZero: true
            }
        }
    };
    var $68fbc1daad5cf8b5$export$19b5c4773f17abe = /*#__PURE__*/ function(DatasetController) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(BubbleController, DatasetController);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(BubbleController);
        function BubbleController() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, BubbleController);
            return _super.apply(this, arguments);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(BubbleController, [
            {
                key: "initialize",
                value: function initialize() {
                    this.enableOptionSharing = true;
                    /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(BubbleController.prototype), "initialize", this).call(this);
                }
            },
            {
                key: "parsePrimitiveData",
                value: function parsePrimitiveData(meta, data, start, count) {
                    var parsed = /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(BubbleController.prototype), "parsePrimitiveData", this).call(this, meta, data, start, count);
                    for(var i = 0; i < parsed.length; i++)parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;
                    return parsed;
                }
            },
            {
                key: "parseArrayData",
                value: function parseArrayData(meta, data, start, count) {
                    var parsed = /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(BubbleController.prototype), "parseArrayData", this).call(this, meta, data, start, count);
                    for(var i = 0; i < parsed.length; i++){
                        var item = data[start + i];
                        parsed[i]._custom = $6892236ee0bf6afc$export$90a7f3efeed30595(item[2], this.resolveDataElementOptions(i + start).radius);
                    }
                    return parsed;
                }
            },
            {
                key: "parseObjectData",
                value: function parseObjectData(meta, data, start, count) {
                    var parsed = /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(BubbleController.prototype), "parseObjectData", this).call(this, meta, data, start, count);
                    for(var i = 0; i < parsed.length; i++){
                        var item = data[start + i];
                        parsed[i]._custom = $6892236ee0bf6afc$export$90a7f3efeed30595(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);
                    }
                    return parsed;
                }
            },
            {
                key: "getMaxOverflow",
                value: function getMaxOverflow() {
                    var data = this._cachedMeta.data;
                    var max = 0;
                    for(var i = data.length - 1; i >= 0; --i)max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
                    return max > 0 && max;
                }
            },
            {
                key: "getLabelAndValue",
                value: function getLabelAndValue(index28) {
                    var meta = this._cachedMeta;
                    var xScale = meta.xScale, yScale = meta.yScale;
                    var parsed = this.getParsed(index28);
                    var x = xScale.getLabelForValue(parsed.x);
                    var y = yScale.getLabelForValue(parsed.y);
                    var r = parsed._custom;
                    return {
                        label: meta.label,
                        value: "(" + x + ", " + y + (r ? ", " + r : "") + ")"
                    };
                }
            },
            {
                key: "update",
                value: function update(mode) {
                    var points = this._cachedMeta.data;
                    this.updateElements(points, 0, points.length, mode);
                }
            },
            {
                key: "updateElements",
                value: function updateElements(points, start, count, mode) {
                    var reset = mode === "reset";
                    var __cachedMeta = this._cachedMeta, iScale = __cachedMeta.iScale, vScale = __cachedMeta.vScale;
                    var firstOpts = this.resolveDataElementOptions(start, mode);
                    var sharedOptions = this.getSharedOptions(firstOpts);
                    var includeOptions = this.includeOptions(mode, sharedOptions);
                    var iAxis = iScale.axis;
                    var vAxis = vScale.axis;
                    for(var i = start; i < start + count; i++){
                        var point = points[i];
                        var parsed = !reset && this.getParsed(i);
                        var properties = {
                        };
                        var iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
                        var vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
                        properties.skip = isNaN(iPixel) || isNaN(vPixel);
                        if (includeOptions) {
                            properties.options = this.resolveDataElementOptions(i, point.active ? "active" : mode);
                            if (reset) properties.options.radius = 0;
                        }
                        this.updateElement(point, i, properties, mode);
                    }
                    this.updateSharedOptions(sharedOptions, mode, firstOpts);
                }
            },
            {
                key: "resolveDataElementOptions",
                value: function resolveDataElementOptions(index29, mode) {
                    var parsed = this.getParsed(index29);
                    var values = /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(BubbleController.prototype), "resolveDataElementOptions", this).call(this, index29, mode);
                    if (values.$shared) values = Object.assign({
                    }, values, {
                        $shared: false
                    });
                    var radius = values.radius;
                    if (mode !== "active") values.radius = 0;
                    values.radius += $6892236ee0bf6afc$export$90a7f3efeed30595(parsed && parsed._custom, radius);
                    return values;
                }
            }
        ]);
        return BubbleController;
    }($68fbc1daad5cf8b5$export$75572ec5c55b4048);
    $68fbc1daad5cf8b5$export$19b5c4773f17abe.id = "bubble";
    $68fbc1daad5cf8b5$export$19b5c4773f17abe.defaults = {
        datasetElementType: false,
        dataElementType: "point",
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "x",
                    "y",
                    "borderWidth",
                    "radius"
                ]
            }
        }
    };
    $68fbc1daad5cf8b5$export$19b5c4773f17abe.overrides = {
        scales: {
            x: {
                type: "linear"
            },
            y: {
                type: "linear"
            }
        },
        plugins: {
            tooltip: {
                callbacks: {
                    title: function() {
                        return "";
                    }
                }
            }
        }
    };
    function $68fbc1daad5cf8b5$var$getRatioAndOffset(rotation, circumference, cutout) {
        var ratioX = 1;
        var ratioY = 1;
        var offsetX = 0;
        var offsetY = 0;
        if (circumference < $6892236ee0bf6afc$export$971d5caa766a69d7) {
            var startAngle = rotation;
            var endAngle = startAngle + circumference;
            var startX = Math.cos(startAngle);
            var startY = Math.sin(startAngle);
            var endX = Math.cos(endAngle);
            var endY = Math.sin(endAngle);
            var calcMax = function(angle, a, b) {
                return $6892236ee0bf6afc$export$ffb5f4729a158638(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);
            };
            var calcMin = function(angle, a, b) {
                return $6892236ee0bf6afc$export$ffb5f4729a158638(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);
            };
            var maxX = calcMax(0, startX, endX);
            var maxY = calcMax($6892236ee0bf6afc$export$7f8ddf7c7c20b3cd, startY, endY);
            var minX = calcMin($6892236ee0bf6afc$export$56c0d5a1e737357d, startX, endX);
            var minY = calcMin($6892236ee0bf6afc$export$56c0d5a1e737357d + $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd, startY, endY);
            ratioX = (maxX - minX) / 2;
            ratioY = (maxY - minY) / 2;
            offsetX = -(maxX + minX) / 2;
            offsetY = -(maxY + minY) / 2;
        }
        return {
            ratioX: ratioX,
            ratioY: ratioY,
            offsetX: offsetX,
            offsetY: offsetY
        };
    }
    var $68fbc1daad5cf8b5$export$e04603e7d8b77172 = /*#__PURE__*/ function(DatasetController) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(DoughnutController, DatasetController);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(DoughnutController);
        function DoughnutController(chart, datasetIndex) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, DoughnutController);
            var _this;
            _this = _super.call(this, chart, datasetIndex);
            _this.enableOptionSharing = true;
            _this.innerRadius = undefined;
            _this.outerRadius = undefined;
            _this.offsetX = undefined;
            _this.offsetY = undefined;
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(DoughnutController, [
            {
                key: "linkScales",
                value: function linkScales() {
                }
            },
            {
                key: "parse",
                value: function parse1(start, count) {
                    var data = this.getDataset().data;
                    var meta = this._cachedMeta;
                    if (this._parsing === false) meta._parsed = data;
                    else {
                        var getter = function(i) {
                            return +data[i];
                        };
                        if ($6892236ee0bf6afc$export$23f2a1d2818174ef(data[start])) {
                            var __parsing = this._parsing, _key = __parsing.key, key = _key === void 0 ? "value" : _key;
                            getter = function(i) {
                                return +$6892236ee0bf6afc$export$2d1720544b23b823(data[i], key);
                            };
                        }
                        var i1, ilen;
                        for(i1 = start, ilen = start + count; i1 < ilen; ++i1)meta._parsed[i1] = getter(i1);
                    }
                }
            },
            {
                key: "_getRotation",
                value: function _getRotation() {
                    return $6892236ee0bf6afc$export$625550452a3fa3ec(this.options.rotation - 90);
                }
            },
            {
                key: "_getCircumference",
                value: function _getCircumference() {
                    return $6892236ee0bf6afc$export$625550452a3fa3ec(this.options.circumference);
                }
            },
            {
                key: "_getRotationExtents",
                value: function _getRotationExtents() {
                    var min = $6892236ee0bf6afc$export$971d5caa766a69d7;
                    var max = -$6892236ee0bf6afc$export$971d5caa766a69d7;
                    for(var i = 0; i < this.chart.data.datasets.length; ++i)if (this.chart.isDatasetVisible(i)) {
                        var controller = this.chart.getDatasetMeta(i).controller;
                        var rotation = controller._getRotation();
                        var circumference = controller._getCircumference();
                        min = Math.min(min, rotation);
                        max = Math.max(max, rotation + circumference);
                    }
                    return {
                        rotation: min,
                        circumference: max - min
                    };
                }
            },
            {
                key: "update",
                value: function update(mode) {
                    var chart = this.chart;
                    var chartArea = chart.chartArea;
                    var meta = this._cachedMeta;
                    var arcs = meta.data;
                    var spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
                    var maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
                    var cutout = Math.min($6892236ee0bf6afc$export$953cecd6e717a553(this.options.cutout, maxSize), 1);
                    var chartWeight = this._getRingWeight(this.index);
                    var ref = this._getRotationExtents(), circumference = ref.circumference, rotation = ref.rotation;
                    var ref1 = $68fbc1daad5cf8b5$var$getRatioAndOffset(rotation, circumference, cutout), ratioX = ref1.ratioX, ratioY = ref1.ratioY, offsetX = ref1.offsetX, offsetY = ref1.offsetY;
                    var maxWidth = (chartArea.width - spacing) / ratioX;
                    var maxHeight = (chartArea.height - spacing) / ratioY;
                    var maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
                    var outerRadius = $6892236ee0bf6afc$export$7ccc53e8f1e7dfc5(this.options.radius, maxRadius);
                    var innerRadius = Math.max(outerRadius * cutout, 0);
                    var radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
                    this.offsetX = offsetX * outerRadius;
                    this.offsetY = offsetY * outerRadius;
                    meta.total = this.calculateTotal();
                    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
                    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
                    this.updateElements(arcs, 0, arcs.length, mode);
                }
            },
            {
                key: "_circumference",
                value: function _circumference(i, reset) {
                    var opts = this.options;
                    var meta = this._cachedMeta;
                    var circumference = this._getCircumference();
                    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) return 0;
                    return this.calculateCircumference(meta._parsed[i] * circumference / $6892236ee0bf6afc$export$971d5caa766a69d7);
                }
            },
            {
                key: "updateElements",
                value: function updateElements(arcs, start, count, mode) {
                    var reset = mode === "reset";
                    var chart = this.chart;
                    var chartArea = chart.chartArea;
                    var opts = chart.options;
                    var animationOpts = opts.animation;
                    var centerX = (chartArea.left + chartArea.right) / 2;
                    var centerY = (chartArea.top + chartArea.bottom) / 2;
                    var animateScale = reset && animationOpts.animateScale;
                    var innerRadius = animateScale ? 0 : this.innerRadius;
                    var outerRadius = animateScale ? 0 : this.outerRadius;
                    var firstOpts = this.resolveDataElementOptions(start, mode);
                    var sharedOptions = this.getSharedOptions(firstOpts);
                    var includeOptions = this.includeOptions(mode, sharedOptions);
                    var startAngle = this._getRotation();
                    var i;
                    for(i = 0; i < start; ++i)startAngle += this._circumference(i, reset);
                    for(i = start; i < start + count; ++i){
                        var circumference = this._circumference(i, reset);
                        var arc = arcs[i];
                        var properties = {
                            x: centerX + this.offsetX,
                            y: centerY + this.offsetY,
                            startAngle: startAngle,
                            endAngle: startAngle + circumference,
                            circumference: circumference,
                            outerRadius: outerRadius,
                            innerRadius: innerRadius
                        };
                        if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? "active" : mode);
                        startAngle += circumference;
                        this.updateElement(arc, i, properties, mode);
                    }
                    this.updateSharedOptions(sharedOptions, mode, firstOpts);
                }
            },
            {
                key: "calculateTotal",
                value: function calculateTotal() {
                    var meta = this._cachedMeta;
                    var metaData = meta.data;
                    var total = 0;
                    var i;
                    for(i = 0; i < metaData.length; i++){
                        var value = meta._parsed[i];
                        if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) total += Math.abs(value);
                    }
                    return total;
                }
            },
            {
                key: "calculateCircumference",
                value: function calculateCircumference(value) {
                    var total = this._cachedMeta.total;
                    if (total > 0 && !isNaN(value)) return $6892236ee0bf6afc$export$971d5caa766a69d7 * (Math.abs(value) / total);
                    return 0;
                }
            },
            {
                key: "getLabelAndValue",
                value: function getLabelAndValue(index30) {
                    var meta = this._cachedMeta;
                    var chart = this.chart;
                    var labels = chart.data.labels || [];
                    var value = $6892236ee0bf6afc$export$ae1af26003f05816(meta._parsed[index30], chart.options.locale);
                    return {
                        label: labels[index30] || "",
                        value: value
                    };
                }
            },
            {
                key: "getMaxBorderWidth",
                value: function getMaxBorderWidth(arcs) {
                    var max = 0;
                    var chart = this.chart;
                    var i, ilen, meta, controller, options;
                    if (!arcs) {
                        for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i)if (chart.isDatasetVisible(i)) {
                            meta = chart.getDatasetMeta(i);
                            arcs = meta.data;
                            controller = meta.controller;
                            break;
                        }
                    }
                    if (!arcs) return 0;
                    for(i = 0, ilen = arcs.length; i < ilen; ++i){
                        options = controller.resolveDataElementOptions(i);
                        if (options.borderAlign !== "inner") max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
                    }
                    return max;
                }
            },
            {
                key: "getMaxOffset",
                value: function getMaxOffset(arcs) {
                    var max = 0;
                    for(var i = 0, ilen = arcs.length; i < ilen; ++i){
                        var options = this.resolveDataElementOptions(i);
                        max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
                    }
                    return max;
                }
            },
            {
                key: "_getRingWeightOffset",
                value: function _getRingWeightOffset(datasetIndex) {
                    var ringWeightOffset = 0;
                    for(var i = 0; i < datasetIndex; ++i)if (this.chart.isDatasetVisible(i)) ringWeightOffset += this._getRingWeight(i);
                    return ringWeightOffset;
                }
            },
            {
                key: "_getRingWeight",
                value: function _getRingWeight(datasetIndex) {
                    return Math.max($6892236ee0bf6afc$export$90a7f3efeed30595(this.chart.data.datasets[datasetIndex].weight, 1), 0);
                }
            },
            {
                key: "_getVisibleDatasetWeightTotal",
                value: function _getVisibleDatasetWeightTotal() {
                    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
                }
            }
        ]);
        return DoughnutController;
    }($68fbc1daad5cf8b5$export$75572ec5c55b4048);
    $68fbc1daad5cf8b5$export$e04603e7d8b77172.id = "doughnut";
    $68fbc1daad5cf8b5$export$e04603e7d8b77172.defaults = {
        datasetElementType: false,
        dataElementType: "arc",
        animation: {
            animateRotate: true,
            animateScale: false
        },
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "circumference",
                    "endAngle",
                    "innerRadius",
                    "outerRadius",
                    "startAngle",
                    "x",
                    "y",
                    "offset",
                    "borderWidth",
                    "spacing"
                ]
            }
        },
        cutout: "50%",
        rotation: 0,
        circumference: 360,
        radius: "100%",
        spacing: 0,
        indexAxis: "r"
    };
    $68fbc1daad5cf8b5$export$e04603e7d8b77172.descriptors = {
        _scriptable: function(name) {
            return name !== "spacing";
        },
        _indexable: function(name) {
            return name !== "spacing";
        }
    };
    $68fbc1daad5cf8b5$export$e04603e7d8b77172.overrides = {
        aspectRatio: 1,
        plugins: {
            legend: {
                labels: {
                    generateLabels: function(chart) {
                        var data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                            var _options = chart.legend.options, pointStyle = _options.labels.pointStyle;
                            return data.labels.map(function(label, i) {
                                var meta = chart.getDatasetMeta(0);
                                var style = meta.controller.getStyle(i);
                                return {
                                    text: label,
                                    fillStyle: style.backgroundColor,
                                    strokeStyle: style.borderColor,
                                    lineWidth: style.borderWidth,
                                    pointStyle: pointStyle,
                                    hidden: !chart.getDataVisibility(i),
                                    index: i
                                };
                            });
                        }
                        return [];
                    }
                },
                onClick: function(e, legendItem, legend) {
                    legend.chart.toggleDataVisibility(legendItem.index);
                    legend.chart.update();
                }
            },
            tooltip: {
                callbacks: {
                    title: function() {
                        return "";
                    },
                    label: function(tooltipItem) {
                        var dataLabel = tooltipItem.label;
                        var value = ": " + tooltipItem.formattedValue;
                        if ($6892236ee0bf6afc$export$8b22cf2602fb60ce(dataLabel)) {
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else dataLabel += value;
                        return dataLabel;
                    }
                }
            }
        }
    };
    var $68fbc1daad5cf8b5$export$3c9b5d28c11cbfd0 = /*#__PURE__*/ function(DatasetController) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(LineController, DatasetController);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(LineController);
        function LineController() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, LineController);
            return _super.apply(this, arguments);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(LineController, [
            {
                key: "initialize",
                value: function initialize() {
                    this.enableOptionSharing = true;
                    this.supportsDecimation = true;
                    /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(LineController.prototype), "initialize", this).call(this);
                }
            },
            {
                key: "update",
                value: function update(mode) {
                    var meta = this._cachedMeta;
                    var line = meta.dataset, tmp = meta.data, points = tmp === void 0 ? [] : tmp, _dataset = meta._dataset;
                    var animationsDisabled = this.chart._animationsDisabled;
                    var ref = $68fbc1daad5cf8b5$var$getStartAndCountOfVisiblePoints(meta, points, animationsDisabled), start = ref.start, count = ref.count;
                    this._drawStart = start;
                    this._drawCount = count;
                    if ($68fbc1daad5cf8b5$var$scaleRangesChanged(meta)) {
                        start = 0;
                        count = points.length;
                    }
                    line._chart = this.chart;
                    line._datasetIndex = this.index;
                    line._decimated = !!_dataset._decimated;
                    line.points = points;
                    var options = this.resolveDatasetElementOptions(mode);
                    if (!this.options.showLine) options.borderWidth = 0;
                    options.segment = this.options.segment;
                    this.updateElement(line, undefined, {
                        animated: !animationsDisabled,
                        options: options
                    }, mode);
                    this.updateElements(points, start, count, mode);
                }
            },
            {
                key: "updateElements",
                value: function updateElements(points, start, count, mode) {
                    var reset = mode === "reset";
                    var __cachedMeta = this._cachedMeta, iScale = __cachedMeta.iScale, vScale = __cachedMeta.vScale, _stacked = __cachedMeta._stacked, _dataset = __cachedMeta._dataset;
                    var firstOpts = this.resolveDataElementOptions(start, mode);
                    var sharedOptions = this.getSharedOptions(firstOpts);
                    var includeOptions = this.includeOptions(mode, sharedOptions);
                    var iAxis = iScale.axis;
                    var vAxis = vScale.axis;
                    var _options = this.options, spanGaps = _options.spanGaps, segment = _options.segment;
                    var maxGapLength = $6892236ee0bf6afc$export$9e5f44173e64f162(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
                    var directUpdate = this.chart._animationsDisabled || reset || mode === "none";
                    var prevParsed = start > 0 && this.getParsed(start - 1);
                    for(var i = start; i < start + count; ++i){
                        var point = points[i];
                        var parsed = this.getParsed(i);
                        var properties = directUpdate ? point : {
                        };
                        var nullData = $6892236ee0bf6afc$export$342063e11d6c3cad(parsed[vAxis]);
                        var iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
                        var vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
                        properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
                        properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
                        if (segment) {
                            properties.parsed = parsed;
                            properties.raw = _dataset.data[i];
                        }
                        if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode);
                        if (!directUpdate) this.updateElement(point, i, properties, mode);
                        prevParsed = parsed;
                    }
                    this.updateSharedOptions(sharedOptions, mode, firstOpts);
                }
            },
            {
                key: "getMaxOverflow",
                value: function getMaxOverflow() {
                    var meta = this._cachedMeta;
                    var dataset = meta.dataset;
                    var border = dataset.options && dataset.options.borderWidth || 0;
                    var data = meta.data || [];
                    if (!data.length) return border;
                    var firstPoint = data[0].size(this.resolveDataElementOptions(0));
                    var lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
                    return Math.max(border, firstPoint, lastPoint) / 2;
                }
            },
            {
                key: "draw",
                value: function draw2() {
                    var meta = this._cachedMeta;
                    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
                    /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(LineController.prototype), "draw", this).call(this);
                }
            }
        ]);
        return LineController;
    }($68fbc1daad5cf8b5$export$75572ec5c55b4048);
    $68fbc1daad5cf8b5$export$3c9b5d28c11cbfd0.id = "line";
    $68fbc1daad5cf8b5$export$3c9b5d28c11cbfd0.defaults = {
        datasetElementType: "line",
        dataElementType: "point",
        showLine: true,
        spanGaps: false
    };
    $68fbc1daad5cf8b5$export$3c9b5d28c11cbfd0.overrides = {
        scales: {
            _index_: {
                type: "category"
            },
            _value_: {
                type: "linear"
            }
        }
    };
    function $68fbc1daad5cf8b5$var$getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
        var pointCount = points.length;
        var start = 0;
        var count = pointCount;
        if (meta._sorted) {
            var iScale = meta.iScale, _parsed = meta._parsed;
            var axis = iScale.axis;
            var ref = iScale.getUserBounds(), min = ref.min, max = ref.max, minDefined = ref.minDefined, maxDefined = ref.maxDefined;
            if (minDefined) start = $6892236ee0bf6afc$export$efccba1c4a2ef57b(Math.min($6892236ee0bf6afc$export$d141bba7fdc215a3(_parsed, iScale.axis, min).lo, animationsDisabled ? pointCount : $6892236ee0bf6afc$export$d141bba7fdc215a3(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);
            if (maxDefined) count = $6892236ee0bf6afc$export$efccba1c4a2ef57b(Math.max($6892236ee0bf6afc$export$d141bba7fdc215a3(_parsed, iScale.axis, max).hi + 1, animationsDisabled ? 0 : $6892236ee0bf6afc$export$d141bba7fdc215a3(points, axis, iScale.getPixelForValue(max)).hi + 1), start, pointCount) - start;
            else count = pointCount - start;
        }
        return {
            start: start,
            count: count
        };
    }
    function $68fbc1daad5cf8b5$var$scaleRangesChanged(meta) {
        var xScale = meta.xScale, yScale = meta.yScale, _scaleRanges = meta._scaleRanges;
        var newRanges = {
            xmin: xScale.min,
            xmax: xScale.max,
            ymin: yScale.min,
            ymax: yScale.max
        };
        if (!_scaleRanges) {
            meta._scaleRanges = newRanges;
            return true;
        }
        var changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
        Object.assign(_scaleRanges, newRanges);
        return changed;
    }
    var $68fbc1daad5cf8b5$export$2a270b3a0d973c85 = /*#__PURE__*/ function(DatasetController) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(PolarAreaController, DatasetController);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(PolarAreaController);
        function PolarAreaController(chart, datasetIndex) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, PolarAreaController);
            var _this;
            _this = _super.call(this, chart, datasetIndex);
            _this.innerRadius = undefined;
            _this.outerRadius = undefined;
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(PolarAreaController, [
            {
                key: "getLabelAndValue",
                value: function getLabelAndValue(index31) {
                    var meta = this._cachedMeta;
                    var chart = this.chart;
                    var labels = chart.data.labels || [];
                    var value = $6892236ee0bf6afc$export$ae1af26003f05816(meta._parsed[index31].r, chart.options.locale);
                    return {
                        label: labels[index31] || "",
                        value: value
                    };
                }
            },
            {
                key: "parseObjectData",
                value: function parseObjectData(meta, data, start, count) {
                    return $6892236ee0bf6afc$export$4a5767248b18ef41.bind(this)(meta, data, start, count);
                }
            },
            {
                key: "update",
                value: function update(mode) {
                    var arcs = this._cachedMeta.data;
                    this._updateRadius();
                    this.updateElements(arcs, 0, arcs.length, mode);
                }
            },
            {
                key: "getMinMax",
                value: function getMinMax() {
                    var _this = this;
                    var meta = this._cachedMeta;
                    var range = {
                        min: Number.POSITIVE_INFINITY,
                        max: Number.NEGATIVE_INFINITY
                    };
                    meta.data.forEach(function(element, index32) {
                        var parsed = _this.getParsed(index32).r;
                        if (!isNaN(parsed) && _this.chart.getDataVisibility(index32)) {
                            if (parsed < range.min) range.min = parsed;
                            if (parsed > range.max) range.max = parsed;
                        }
                    });
                    return range;
                }
            },
            {
                key: "_updateRadius",
                value: function _updateRadius() {
                    var chart = this.chart;
                    var chartArea = chart.chartArea;
                    var opts = chart.options;
                    var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
                    var outerRadius = Math.max(minSize / 2, 0);
                    var innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
                    var radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
                    this.outerRadius = outerRadius - radiusLength * this.index;
                    this.innerRadius = this.outerRadius - radiusLength;
                }
            },
            {
                key: "updateElements",
                value: function updateElements(arcs, start, count, mode) {
                    var reset = mode === "reset";
                    var chart = this.chart;
                    var opts = chart.options;
                    var animationOpts = opts.animation;
                    var scale = this._cachedMeta.rScale;
                    var centerX = scale.xCenter;
                    var centerY = scale.yCenter;
                    var datasetStartAngle = scale.getIndexAngle(0) - 0.5 * $6892236ee0bf6afc$export$56c0d5a1e737357d;
                    var angle = datasetStartAngle;
                    var i;
                    var defaultAngle = 360 / this.countVisibleElements();
                    for(i = 0; i < start; ++i)angle += this._computeAngle(i, mode, defaultAngle);
                    for(i = start; i < start + count; i++){
                        var arc = arcs[i];
                        var startAngle = angle;
                        var endAngle = angle + this._computeAngle(i, mode, defaultAngle);
                        var outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;
                        angle = endAngle;
                        if (reset) {
                            if (animationOpts.animateScale) outerRadius = 0;
                            if (animationOpts.animateRotate) startAngle = endAngle = datasetStartAngle;
                        }
                        var properties = {
                            x: centerX,
                            y: centerY,
                            innerRadius: 0,
                            outerRadius: outerRadius,
                            startAngle: startAngle,
                            endAngle: endAngle,
                            options: this.resolveDataElementOptions(i, arc.active ? "active" : mode)
                        };
                        this.updateElement(arc, i, properties, mode);
                    }
                }
            },
            {
                key: "countVisibleElements",
                value: function countVisibleElements() {
                    var _this = this;
                    var meta = this._cachedMeta;
                    var count = 0;
                    meta.data.forEach(function(element, index33) {
                        if (!isNaN(_this.getParsed(index33).r) && _this.chart.getDataVisibility(index33)) count++;
                    });
                    return count;
                }
            },
            {
                key: "_computeAngle",
                value: function _computeAngle(index34, mode, defaultAngle) {
                    return this.chart.getDataVisibility(index34) ? $6892236ee0bf6afc$export$625550452a3fa3ec(this.resolveDataElementOptions(index34, mode).angle || defaultAngle) : 0;
                }
            }
        ]);
        return PolarAreaController;
    }($68fbc1daad5cf8b5$export$75572ec5c55b4048);
    $68fbc1daad5cf8b5$export$2a270b3a0d973c85.id = "polarArea";
    $68fbc1daad5cf8b5$export$2a270b3a0d973c85.defaults = {
        dataElementType: "arc",
        animation: {
            animateRotate: true,
            animateScale: true
        },
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "x",
                    "y",
                    "startAngle",
                    "endAngle",
                    "innerRadius",
                    "outerRadius"
                ]
            }
        },
        indexAxis: "r",
        startAngle: 0
    };
    $68fbc1daad5cf8b5$export$2a270b3a0d973c85.overrides = {
        aspectRatio: 1,
        plugins: {
            legend: {
                labels: {
                    generateLabels: function(chart) {
                        var data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                            var _options = chart.legend.options, pointStyle = _options.labels.pointStyle;
                            return data.labels.map(function(label, i) {
                                var meta = chart.getDatasetMeta(0);
                                var style = meta.controller.getStyle(i);
                                return {
                                    text: label,
                                    fillStyle: style.backgroundColor,
                                    strokeStyle: style.borderColor,
                                    lineWidth: style.borderWidth,
                                    pointStyle: pointStyle,
                                    hidden: !chart.getDataVisibility(i),
                                    index: i
                                };
                            });
                        }
                        return [];
                    }
                },
                onClick: function(e, legendItem, legend) {
                    legend.chart.toggleDataVisibility(legendItem.index);
                    legend.chart.update();
                }
            },
            tooltip: {
                callbacks: {
                    title: function() {
                        return "";
                    },
                    label: function(context) {
                        return context.chart.data.labels[context.dataIndex] + ": " + context.formattedValue;
                    }
                }
            }
        },
        scales: {
            r: {
                type: "radialLinear",
                angleLines: {
                    display: false
                },
                beginAtZero: true,
                grid: {
                    circular: true
                },
                pointLabels: {
                    display: false
                },
                startAngle: 0
            }
        }
    };
    var $68fbc1daad5cf8b5$export$b21a3f1286706191 = /*#__PURE__*/ function(DoughnutController) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(PieController, DoughnutController);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(PieController);
        function PieController() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, PieController);
            return _super.apply(this, arguments);
        }
        return PieController;
    }($68fbc1daad5cf8b5$export$e04603e7d8b77172);
    $68fbc1daad5cf8b5$export$b21a3f1286706191.id = "pie";
    $68fbc1daad5cf8b5$export$b21a3f1286706191.defaults = {
        cutout: 0,
        rotation: 0,
        circumference: 360,
        radius: "100%"
    };
    var $68fbc1daad5cf8b5$export$48dbc6ac651bf8be = /*#__PURE__*/ function(DatasetController) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(RadarController, DatasetController);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(RadarController);
        function RadarController() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, RadarController);
            return _super.apply(this, arguments);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(RadarController, [
            {
                key: "getLabelAndValue",
                value: function getLabelAndValue(index35) {
                    var vScale = this._cachedMeta.vScale;
                    var parsed = this.getParsed(index35);
                    return {
                        label: vScale.getLabels()[index35],
                        value: "" + vScale.getLabelForValue(parsed[vScale.axis])
                    };
                }
            },
            {
                key: "parseObjectData",
                value: function parseObjectData(meta, data, start, count) {
                    return $6892236ee0bf6afc$export$4a5767248b18ef41.bind(this)(meta, data, start, count);
                }
            },
            {
                key: "update",
                value: function update(mode) {
                    var meta = this._cachedMeta;
                    var line = meta.dataset;
                    var points = meta.data || [];
                    var labels = meta.iScale.getLabels();
                    line.points = points;
                    if (mode !== "resize") {
                        var options = this.resolveDatasetElementOptions(mode);
                        if (!this.options.showLine) options.borderWidth = 0;
                        var properties = {
                            _loop: true,
                            _fullLoop: labels.length === points.length,
                            options: options
                        };
                        this.updateElement(line, undefined, properties, mode);
                    }
                    this.updateElements(points, 0, points.length, mode);
                }
            },
            {
                key: "updateElements",
                value: function updateElements(points, start, count, mode) {
                    var scale = this._cachedMeta.rScale;
                    var reset = mode === "reset";
                    for(var i = start; i < start + count; i++){
                        var point = points[i];
                        var options = this.resolveDataElementOptions(i, point.active ? "active" : mode);
                        var pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);
                        var x = reset ? scale.xCenter : pointPosition.x;
                        var y = reset ? scale.yCenter : pointPosition.y;
                        var properties = {
                            x: x,
                            y: y,
                            angle: pointPosition.angle,
                            skip: isNaN(x) || isNaN(y),
                            options: options
                        };
                        this.updateElement(point, i, properties, mode);
                    }
                }
            }
        ]);
        return RadarController;
    }($68fbc1daad5cf8b5$export$75572ec5c55b4048);
    $68fbc1daad5cf8b5$export$48dbc6ac651bf8be.id = "radar";
    $68fbc1daad5cf8b5$export$48dbc6ac651bf8be.defaults = {
        datasetElementType: "line",
        dataElementType: "point",
        indexAxis: "r",
        showLine: true,
        elements: {
            line: {
                fill: "start"
            }
        }
    };
    $68fbc1daad5cf8b5$export$48dbc6ac651bf8be.overrides = {
        aspectRatio: 1,
        scales: {
            r: {
                type: "radialLinear"
            }
        }
    };
    var $68fbc1daad5cf8b5$export$b2f2bae6713db87 = /*#__PURE__*/ function(LineController) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(ScatterController, LineController);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(ScatterController);
        function ScatterController() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, ScatterController);
            return _super.apply(this, arguments);
        }
        return ScatterController;
    }($68fbc1daad5cf8b5$export$3c9b5d28c11cbfd0);
    $68fbc1daad5cf8b5$export$b2f2bae6713db87.id = "scatter";
    $68fbc1daad5cf8b5$export$b2f2bae6713db87.defaults = {
        showLine: false,
        fill: false
    };
    $68fbc1daad5cf8b5$export$b2f2bae6713db87.overrides = {
        interaction: {
            mode: "point"
        },
        plugins: {
            tooltip: {
                callbacks: {
                    title: function() {
                        return "";
                    },
                    label: function(item) {
                        return "(" + item.label + ", " + item.formattedValue + ")";
                    }
                }
            }
        },
        scales: {
            x: {
                type: "linear"
            },
            y: {
                type: "linear"
            }
        }
    };
    var $68fbc1daad5cf8b5$export$a6506504f799c5d5 = /*#__PURE__*/ Object.freeze({
        __proto__: null,
        BarController: $68fbc1daad5cf8b5$export$e97d5dc64e999004,
        BubbleController: $68fbc1daad5cf8b5$export$19b5c4773f17abe,
        DoughnutController: $68fbc1daad5cf8b5$export$e04603e7d8b77172,
        LineController: $68fbc1daad5cf8b5$export$3c9b5d28c11cbfd0,
        PolarAreaController: $68fbc1daad5cf8b5$export$2a270b3a0d973c85,
        PieController: $68fbc1daad5cf8b5$export$b21a3f1286706191,
        RadarController: $68fbc1daad5cf8b5$export$48dbc6ac651bf8be,
        ScatterController: $68fbc1daad5cf8b5$export$b2f2bae6713db87
    });
    function $68fbc1daad5cf8b5$var$_abstract() {
        throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
    }
    var $68fbc1daad5cf8b5$var$DateAdapter = /*#__PURE__*/ function() {
        function DateAdapter(options) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, DateAdapter);
            this.options = options || {
            };
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(DateAdapter, [
            {
                key: "formats",
                value: function formats() {
                    return $68fbc1daad5cf8b5$var$_abstract();
                }
            },
            {
                key: "parse",
                value: function parse1(value, format) {
                    return $68fbc1daad5cf8b5$var$_abstract();
                }
            },
            {
                key: "format",
                value: function format1(timestamp, format) {
                    return $68fbc1daad5cf8b5$var$_abstract();
                }
            },
            {
                key: "add",
                value: function add(timestamp, amount, unit) {
                    return $68fbc1daad5cf8b5$var$_abstract();
                }
            },
            {
                key: "diff",
                value: function diff(a, b, unit) {
                    return $68fbc1daad5cf8b5$var$_abstract();
                }
            },
            {
                key: "startOf",
                value: function startOf(timestamp, unit, weekday) {
                    return $68fbc1daad5cf8b5$var$_abstract();
                }
            },
            {
                key: "endOf",
                value: function endOf(timestamp, unit) {
                    return $68fbc1daad5cf8b5$var$_abstract();
                }
            }
        ]);
        return DateAdapter;
    }();
    $68fbc1daad5cf8b5$var$DateAdapter.override = function(members) {
        Object.assign($68fbc1daad5cf8b5$var$DateAdapter.prototype, members);
    };
    var $68fbc1daad5cf8b5$export$f32766ea09ec8bc4 = {
        _date: $68fbc1daad5cf8b5$var$DateAdapter
    };
    function $68fbc1daad5cf8b5$var$binarySearch(metaset, axis, value, intersect) {
        var controller = metaset.controller, data = metaset.data, _sorted = metaset._sorted;
        var iScale = controller._cachedMeta.iScale;
        if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
            var lookupMethod = iScale._reversePixels ? $6892236ee0bf6afc$export$ebd11618f299a286 : $6892236ee0bf6afc$export$d141bba7fdc215a3;
            if (!intersect) return lookupMethod(data, axis, value);
            else if (controller._sharedOptions) {
                var el = data[0];
                var range = typeof el.getRange === "function" && el.getRange(axis);
                if (range) {
                    var start = lookupMethod(data, axis, value - range);
                    var end = lookupMethod(data, axis, value + range);
                    return {
                        lo: start.lo,
                        hi: end.hi
                    };
                }
            }
        }
        return {
            lo: 0,
            hi: data.length - 1
        };
    }
    function $68fbc1daad5cf8b5$var$evaluateInteractionItems(chart, axis, position, handler, intersect) {
        var metasets = chart.getSortedVisibleDatasetMetas();
        var value = position[axis];
        for(var i = 0, ilen = metasets.length; i < ilen; ++i){
            var _i = metasets[i], index36 = _i.index, data = _i.data;
            var ref = $68fbc1daad5cf8b5$var$binarySearch(metasets[i], axis, value, intersect), lo = ref.lo, hi = ref.hi;
            for(var j = lo; j <= hi; ++j){
                var element = data[j];
                if (!element.skip) handler(element, index36, j);
            }
        }
    }
    function $68fbc1daad5cf8b5$var$getDistanceMetricForAxis(axis) {
        var useX = axis.indexOf("x") !== -1;
        var useY = axis.indexOf("y") !== -1;
        return function(pt1, pt2) {
            var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
            var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
            return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
        };
    }
    function $68fbc1daad5cf8b5$var$getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
        var items = [];
        if (!includeInvisible && !chart.isPointInArea(position)) return items;
        var evaluationFunc = function evaluationFunc(element, datasetIndex, index37) {
            if (!includeInvisible && !$6892236ee0bf6afc$export$ef35774e6d314e91(element, chart.chartArea, 0)) return;
            if (element.inRange(position.x, position.y, useFinalPosition)) items.push({
                element: element,
                datasetIndex: datasetIndex,
                index: index37
            });
        };
        $68fbc1daad5cf8b5$var$evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
        return items;
    }
    function $68fbc1daad5cf8b5$var$getNearestRadialItems(chart, position, axis, useFinalPosition) {
        var evaluationFunc = function evaluationFunc(element, datasetIndex, index38) {
            var ref = element.getProps([
                "startAngle",
                "endAngle"
            ], useFinalPosition), startAngle = ref.startAngle, endAngle = ref.endAngle;
            var angle = $6892236ee0bf6afc$export$e7094788287c5e9b(element, {
                x: position.x,
                y: position.y
            }).angle;
            if ($6892236ee0bf6afc$export$ffb5f4729a158638(angle, startAngle, endAngle)) items.push({
                element: element,
                datasetIndex: datasetIndex,
                index: index38
            });
        };
        var items = [];
        $68fbc1daad5cf8b5$var$evaluateInteractionItems(chart, axis, position, evaluationFunc);
        return items;
    }
    function $68fbc1daad5cf8b5$var$getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
        var evaluationFunc = function evaluationFunc(element, datasetIndex, index39) {
            var inRange1 = element.inRange(position.x, position.y, useFinalPosition);
            if (intersect && !inRange1) return;
            var center = element.getCenterPoint(useFinalPosition);
            var pointInArea = !!includeInvisible || chart.isPointInArea(center);
            if (!pointInArea && !inRange1) return;
            var distance = distanceMetric(position, center);
            if (distance < minDistance) {
                items = [
                    {
                        element: element,
                        datasetIndex: datasetIndex,
                        index: index39
                    }
                ];
                minDistance = distance;
            } else if (distance === minDistance) items.push({
                element: element,
                datasetIndex: datasetIndex,
                index: index39
            });
        };
        var items = [];
        var distanceMetric = $68fbc1daad5cf8b5$var$getDistanceMetricForAxis(axis);
        var minDistance = Number.POSITIVE_INFINITY;
        $68fbc1daad5cf8b5$var$evaluateInteractionItems(chart, axis, position, evaluationFunc);
        return items;
    }
    function $68fbc1daad5cf8b5$var$getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
        if (!includeInvisible && !chart.isPointInArea(position)) return [];
        return axis === "r" && !intersect ? $68fbc1daad5cf8b5$var$getNearestRadialItems(chart, position, axis, useFinalPosition) : $68fbc1daad5cf8b5$var$getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
    }
    function $68fbc1daad5cf8b5$var$getAxisItems(chart, position, axis, intersect, useFinalPosition) {
        var items = [];
        var rangeMethod = axis === "x" ? "inXRange" : "inYRange";
        var intersectsItem = false;
        $68fbc1daad5cf8b5$var$evaluateInteractionItems(chart, axis, position, function(element, datasetIndex, index40) {
            if (element[rangeMethod](position[axis], useFinalPosition)) {
                items.push({
                    element: element,
                    datasetIndex: datasetIndex,
                    index: index40
                });
                intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
            }
        });
        if (intersect && !intersectsItem) return [];
        return items;
    }
    var $68fbc1daad5cf8b5$export$a13296960cae0384 = {
        evaluateInteractionItems: $68fbc1daad5cf8b5$var$evaluateInteractionItems,
        modes: {
            index: function(chart, e, options, useFinalPosition) {
                var position = $6892236ee0bf6afc$export$df995fae86a55f06(e, chart);
                var axis = options.axis || "x";
                var includeInvisible = options.includeInvisible || false;
                var items = options.intersect ? $68fbc1daad5cf8b5$var$getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : $68fbc1daad5cf8b5$var$getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
                var elements3 = [];
                if (!items.length) return [];
                chart.getSortedVisibleDatasetMetas().forEach(function(meta) {
                    var index41 = items[0].index;
                    var element = meta.data[index41];
                    if (element && !element.skip) elements3.push({
                        element: element,
                        datasetIndex: meta.index,
                        index: index41
                    });
                });
                return elements3;
            },
            dataset: function(chart, e, options, useFinalPosition) {
                var position = $6892236ee0bf6afc$export$df995fae86a55f06(e, chart);
                var axis = options.axis || "xy";
                var includeInvisible = options.includeInvisible || false;
                var items = options.intersect ? $68fbc1daad5cf8b5$var$getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : $68fbc1daad5cf8b5$var$getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
                if (items.length > 0) {
                    var datasetIndex = items[0].datasetIndex;
                    var data = chart.getDatasetMeta(datasetIndex).data;
                    items = [];
                    for(var i = 0; i < data.length; ++i)items.push({
                        element: data[i],
                        datasetIndex: datasetIndex,
                        index: i
                    });
                }
                return items;
            },
            point: function(chart, e, options, useFinalPosition) {
                var position = $6892236ee0bf6afc$export$df995fae86a55f06(e, chart);
                var axis = options.axis || "xy";
                var includeInvisible = options.includeInvisible || false;
                return $68fbc1daad5cf8b5$var$getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
            },
            nearest: function(chart, e, options, useFinalPosition) {
                var position = $6892236ee0bf6afc$export$df995fae86a55f06(e, chart);
                var axis = options.axis || "xy";
                var includeInvisible = options.includeInvisible || false;
                return $68fbc1daad5cf8b5$var$getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
            },
            x: function(chart, e, options, useFinalPosition) {
                var position = $6892236ee0bf6afc$export$df995fae86a55f06(e, chart);
                return $68fbc1daad5cf8b5$var$getAxisItems(chart, position, "x", options.intersect, useFinalPosition);
            },
            y: function(chart, e, options, useFinalPosition) {
                var position = $6892236ee0bf6afc$export$df995fae86a55f06(e, chart);
                return $68fbc1daad5cf8b5$var$getAxisItems(chart, position, "y", options.intersect, useFinalPosition);
            }
        }
    };
    var $68fbc1daad5cf8b5$var$STATIC_POSITIONS = [
        "left",
        "top",
        "right",
        "bottom"
    ];
    function $68fbc1daad5cf8b5$var$filterByPosition(array, position) {
        return array.filter(function(v) {
            return v.pos === position;
        });
    }
    function $68fbc1daad5cf8b5$var$filterDynamicPositionByAxis(array, axis) {
        return array.filter(function(v) {
            return $68fbc1daad5cf8b5$var$STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis;
        });
    }
    function $68fbc1daad5cf8b5$var$sortByWeight(array, reverse) {
        return array.sort(function(a, b) {
            var v0 = reverse ? b : a;
            var v1 = reverse ? a : b;
            return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
        });
    }
    function $68fbc1daad5cf8b5$var$wrapBoxes(boxes) {
        var layoutBoxes = [];
        var i, ilen, box, pos, stack, stackWeight;
        for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){
            box = boxes[i];
            var ref, ref2, ref3;
            ref = box, pos = ref.position, ref2 = ref.options, stack = ref2.stack, ref3 = ref2.stackWeight, stackWeight = ref3 === void 0 ? 1 : ref3;
            layoutBoxes.push({
                index: i,
                box: box,
                pos: pos,
                horizontal: box.isHorizontal(),
                weight: box.weight,
                stack: stack && pos + stack,
                stackWeight: stackWeight
            });
        }
        return layoutBoxes;
    }
    function $68fbc1daad5cf8b5$var$buildStacks(layouts1) {
        var stacks = {
        };
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = layouts1[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var wrap = _step.value;
                var stack = wrap.stack, pos = wrap.pos, stackWeight = wrap.stackWeight;
                if (!stack || !$68fbc1daad5cf8b5$var$STATIC_POSITIONS.includes(pos)) continue;
                var _stack = stacks[stack] || (stacks[stack] = {
                    count: 0,
                    placed: 0,
                    weight: 0,
                    size: 0
                });
                _stack.count++;
                _stack.weight += stackWeight;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
        return stacks;
    }
    function $68fbc1daad5cf8b5$var$setLayoutDims(layouts2, params) {
        var stacks = $68fbc1daad5cf8b5$var$buildStacks(layouts2);
        var vBoxMaxWidth = params.vBoxMaxWidth, hBoxMaxHeight = params.hBoxMaxHeight;
        var i, ilen, layout;
        for(i = 0, ilen = layouts2.length; i < ilen; ++i){
            layout = layouts2[i];
            var fullSize = layout.box.fullSize;
            var stack = stacks[layout.stack];
            var factor = stack && layout.stackWeight / stack.weight;
            if (layout.horizontal) {
                layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
                layout.height = hBoxMaxHeight;
            } else {
                layout.width = vBoxMaxWidth;
                layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
            }
        }
        return stacks;
    }
    function $68fbc1daad5cf8b5$var$buildLayoutBoxes(boxes) {
        var layoutBoxes = $68fbc1daad5cf8b5$var$wrapBoxes(boxes);
        var fullSize = $68fbc1daad5cf8b5$var$sortByWeight(layoutBoxes.filter(function(wrap) {
            return wrap.box.fullSize;
        }), true);
        var left = $68fbc1daad5cf8b5$var$sortByWeight($68fbc1daad5cf8b5$var$filterByPosition(layoutBoxes, "left"), true);
        var right = $68fbc1daad5cf8b5$var$sortByWeight($68fbc1daad5cf8b5$var$filterByPosition(layoutBoxes, "right"));
        var top = $68fbc1daad5cf8b5$var$sortByWeight($68fbc1daad5cf8b5$var$filterByPosition(layoutBoxes, "top"), true);
        var bottom = $68fbc1daad5cf8b5$var$sortByWeight($68fbc1daad5cf8b5$var$filterByPosition(layoutBoxes, "bottom"));
        var centerHorizontal = $68fbc1daad5cf8b5$var$filterDynamicPositionByAxis(layoutBoxes, "x");
        var centerVertical = $68fbc1daad5cf8b5$var$filterDynamicPositionByAxis(layoutBoxes, "y");
        return {
            fullSize: fullSize,
            leftAndTop: left.concat(top),
            rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
            chartArea: $68fbc1daad5cf8b5$var$filterByPosition(layoutBoxes, "chartArea"),
            vertical: left.concat(right).concat(centerVertical),
            horizontal: top.concat(bottom).concat(centerHorizontal)
        };
    }
    function $68fbc1daad5cf8b5$var$getCombinedMax(maxPadding, chartArea, a, b) {
        return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
    }
    function $68fbc1daad5cf8b5$var$updateMaxPadding(maxPadding, boxPadding) {
        maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
        maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
        maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
        maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
    }
    function $68fbc1daad5cf8b5$var$updateDims(chartArea, params, layout, stacks) {
        var pos = layout.pos, box = layout.box;
        var maxPadding = chartArea.maxPadding;
        if (!$6892236ee0bf6afc$export$23f2a1d2818174ef(pos)) {
            if (layout.size) chartArea[pos] -= layout.size;
            var stack = stacks[layout.stack] || {
                size: 0,
                count: 1
            };
            stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
            layout.size = stack.size / stack.count;
            chartArea[pos] += layout.size;
        }
        if (box.getPadding) $68fbc1daad5cf8b5$var$updateMaxPadding(maxPadding, box.getPadding());
        var newWidth = Math.max(0, params.outerWidth - $68fbc1daad5cf8b5$var$getCombinedMax(maxPadding, chartArea, "left", "right"));
        var newHeight = Math.max(0, params.outerHeight - $68fbc1daad5cf8b5$var$getCombinedMax(maxPadding, chartArea, "top", "bottom"));
        var widthChanged = newWidth !== chartArea.w;
        var heightChanged = newHeight !== chartArea.h;
        chartArea.w = newWidth;
        chartArea.h = newHeight;
        return layout.horizontal ? {
            same: widthChanged,
            other: heightChanged
        } : {
            same: heightChanged,
            other: widthChanged
        };
    }
    function $68fbc1daad5cf8b5$var$handleMaxPadding(chartArea) {
        var updatePos = function updatePos(pos) {
            var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
            chartArea[pos] += change;
            return change;
        };
        var maxPadding = chartArea.maxPadding;
        chartArea.y += updatePos("top");
        chartArea.x += updatePos("left");
        updatePos("right");
        updatePos("bottom");
    }
    function $68fbc1daad5cf8b5$var$getMargins(horizontal, chartArea) {
        var marginForPositions = function marginForPositions(positions) {
            var margin = {
                left: 0,
                top: 0,
                right: 0,
                bottom: 0
            };
            positions.forEach(function(pos) {
                margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
            });
            return margin;
        };
        var maxPadding = chartArea.maxPadding;
        return horizontal ? marginForPositions([
            "left",
            "right"
        ]) : marginForPositions([
            "top",
            "bottom"
        ]);
    }
    function $68fbc1daad5cf8b5$var$fitBoxes(boxes, chartArea, params, stacks) {
        var refitBoxes = [];
        var i, ilen, layout, box, refit, changed;
        for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){
            layout = boxes[i];
            box = layout.box;
            box.update(layout.width || chartArea.w, layout.height || chartArea.h, $68fbc1daad5cf8b5$var$getMargins(layout.horizontal, chartArea));
            var ref = $68fbc1daad5cf8b5$var$updateDims(chartArea, params, layout, stacks), same = ref.same, other = ref.other;
            refit |= same && refitBoxes.length;
            changed = changed || other;
            if (!box.fullSize) refitBoxes.push(layout);
        }
        return refit && $68fbc1daad5cf8b5$var$fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
    }
    function $68fbc1daad5cf8b5$var$setBoxDims(box, left, top, width, height) {
        box.top = top;
        box.left = left;
        box.right = left + width;
        box.bottom = top + height;
        box.width = width;
        box.height = height;
    }
    function $68fbc1daad5cf8b5$var$placeBoxes(boxes, chartArea, params, stacks) {
        var userPadding = params.padding;
        var x = chartArea.x, y = chartArea.y;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = boxes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var layout = _step.value;
                var box = layout.box;
                var stack = stacks[layout.stack] || {
                    count: 1,
                    placed: 0,
                    weight: 1
                };
                var weight = layout.stackWeight / stack.weight || 1;
                if (layout.horizontal) {
                    var width = chartArea.w * weight;
                    var height = stack.size || box.height;
                    if ($6892236ee0bf6afc$export$35e795649ee09318(stack.start)) y = stack.start;
                    if (box.fullSize) $68fbc1daad5cf8b5$var$setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
                    else $68fbc1daad5cf8b5$var$setBoxDims(box, chartArea.left + stack.placed, y, width, height);
                    stack.start = y;
                    stack.placed += width;
                    y = box.bottom;
                } else {
                    var height1 = chartArea.h * weight;
                    var width1 = stack.size || box.width;
                    if ($6892236ee0bf6afc$export$35e795649ee09318(stack.start)) x = stack.start;
                    if (box.fullSize) $68fbc1daad5cf8b5$var$setBoxDims(box, x, userPadding.top, width1, params.outerHeight - userPadding.bottom - userPadding.top);
                    else $68fbc1daad5cf8b5$var$setBoxDims(box, x, chartArea.top + stack.placed, width1, height1);
                    stack.start = x;
                    stack.placed += height1;
                    x = box.right;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
        chartArea.x = x;
        chartArea.y = y;
    }
    $6892236ee0bf6afc$export$4368d992c4eafac0.set("layout", {
        autoPadding: true,
        padding: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
        }
    });
    var $68fbc1daad5cf8b5$export$1ecca0613f5e56d2 = {
        addBox: function(chart, item) {
            if (!chart.boxes) chart.boxes = [];
            item.fullSize = item.fullSize || false;
            item.position = item.position || "top";
            item.weight = item.weight || 0;
            item._layers = item._layers || function() {
                return [
                    {
                        z: 0,
                        draw: function(chartArea) {
                            item.draw(chartArea);
                        }
                    }
                ];
            };
            chart.boxes.push(item);
        },
        removeBox: function(chart, layoutItem) {
            var index42 = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
            if (index42 !== -1) chart.boxes.splice(index42, 1);
        },
        configure: function(chart, item, options) {
            item.fullSize = options.fullSize;
            item.position = options.position;
            item.weight = options.weight;
        },
        update: function(chart, width, height, minPadding) {
            if (!chart) return;
            var padding = $6892236ee0bf6afc$export$96f57966bedc81b4(chart.options.layout.padding);
            var availableWidth = Math.max(width - padding.width, 0);
            var availableHeight = Math.max(height - padding.height, 0);
            var boxes = $68fbc1daad5cf8b5$var$buildLayoutBoxes(chart.boxes);
            var verticalBoxes = boxes.vertical;
            var horizontalBoxes = boxes.horizontal;
            $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(chart.boxes, function(box) {
                if (typeof box.beforeLayout === "function") box.beforeLayout();
            });
            var visibleVerticalBoxCount = verticalBoxes.reduce(function(total, wrap) {
                return wrap.box.options && wrap.box.options.display === false ? total : total + 1;
            }, 0) || 1;
            var params = Object.freeze({
                outerWidth: width,
                outerHeight: height,
                padding: padding,
                availableWidth: availableWidth,
                availableHeight: availableHeight,
                vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
                hBoxMaxHeight: availableHeight / 2
            });
            var maxPadding = Object.assign({
            }, padding);
            $68fbc1daad5cf8b5$var$updateMaxPadding(maxPadding, $6892236ee0bf6afc$export$96f57966bedc81b4(minPadding));
            var chartArea = Object.assign({
                maxPadding: maxPadding,
                w: availableWidth,
                h: availableHeight,
                x: padding.left,
                y: padding.top
            }, padding);
            var stacks = $68fbc1daad5cf8b5$var$setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
            $68fbc1daad5cf8b5$var$fitBoxes(boxes.fullSize, chartArea, params, stacks);
            $68fbc1daad5cf8b5$var$fitBoxes(verticalBoxes, chartArea, params, stacks);
            if ($68fbc1daad5cf8b5$var$fitBoxes(horizontalBoxes, chartArea, params, stacks)) $68fbc1daad5cf8b5$var$fitBoxes(verticalBoxes, chartArea, params, stacks);
            $68fbc1daad5cf8b5$var$handleMaxPadding(chartArea);
            $68fbc1daad5cf8b5$var$placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
            chartArea.x += chartArea.w;
            chartArea.y += chartArea.h;
            $68fbc1daad5cf8b5$var$placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
            chart.chartArea = {
                left: chartArea.left,
                top: chartArea.top,
                right: chartArea.left + chartArea.w,
                bottom: chartArea.top + chartArea.h,
                height: chartArea.h,
                width: chartArea.w
            };
            $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(boxes.chartArea, function(layout) {
                var box = layout.box;
                Object.assign(box, chart.chartArea);
                box.update(chartArea.w, chartArea.h, {
                    left: 0,
                    top: 0,
                    right: 0,
                    bottom: 0
                });
            });
        }
    };
    var $68fbc1daad5cf8b5$export$7b1aeb87f31f7da8 = /*#__PURE__*/ function() {
        function BasePlatform() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, BasePlatform);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(BasePlatform, [
            {
                key: "acquireContext",
                value: function acquireContext(canvas, aspectRatio) {
                }
            },
            {
                key: "releaseContext",
                value: function releaseContext(context) {
                    return false;
                }
            },
            {
                key: "addEventListener",
                value: function addEventListener(chart, type, listener) {
                }
            },
            {
                key: "removeEventListener",
                value: function removeEventListener(chart, type, listener) {
                }
            },
            {
                key: "getDevicePixelRatio",
                value: function getDevicePixelRatio() {
                    return 1;
                }
            },
            {
                key: "getMaximumSize",
                value: function getMaximumSize1(element, width, height, aspectRatio) {
                    width = Math.max(0, width || element.width);
                    height = height || element.height;
                    return {
                        width: width,
                        height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
                    };
                }
            },
            {
                key: "isAttached",
                value: function isAttached(canvas) {
                    return true;
                }
            },
            {
                key: "updateConfig",
                value: function updateConfig(config) {
                }
            }
        ]);
        return BasePlatform;
    }();
    var $68fbc1daad5cf8b5$export$a40a96b24b46cf35 = /*#__PURE__*/ function(BasePlatform) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(BasicPlatform, BasePlatform);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(BasicPlatform);
        function BasicPlatform() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, BasicPlatform);
            return _super.apply(this, arguments);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(BasicPlatform, [
            {
                key: "acquireContext",
                value: function acquireContext(item) {
                    return item && item.getContext && item.getContext("2d") || null;
                }
            },
            {
                key: "updateConfig",
                value: function updateConfig(config) {
                    config.options.animation = false;
                }
            }
        ]);
        return BasicPlatform;
    }($68fbc1daad5cf8b5$export$7b1aeb87f31f7da8);
    var $68fbc1daad5cf8b5$var$EXPANDO_KEY = "$chartjs";
    var $68fbc1daad5cf8b5$var$EVENT_TYPES = {
        touchstart: "mousedown",
        touchmove: "mousemove",
        touchend: "mouseup",
        pointerenter: "mouseenter",
        pointerdown: "mousedown",
        pointermove: "mousemove",
        pointerup: "mouseup",
        pointerleave: "mouseout",
        pointerout: "mouseout"
    };
    var $68fbc1daad5cf8b5$var$isNullOrEmpty = function(value) {
        return value === null || value === "";
    };
    function $68fbc1daad5cf8b5$var$initCanvas(canvas, aspectRatio) {
        var style = canvas.style;
        var renderHeight = canvas.getAttribute("height");
        var renderWidth = canvas.getAttribute("width");
        canvas[$68fbc1daad5cf8b5$var$EXPANDO_KEY] = {
            initial: {
                height: renderHeight,
                width: renderWidth,
                style: {
                    display: style.display,
                    height: style.height,
                    width: style.width
                }
            }
        };
        style.display = style.display || "block";
        style.boxSizing = style.boxSizing || "border-box";
        if ($68fbc1daad5cf8b5$var$isNullOrEmpty(renderWidth)) {
            var displayWidth = $6892236ee0bf6afc$export$9bb611d729802a56(canvas, "width");
            if (displayWidth !== undefined) canvas.width = displayWidth;
        }
        if ($68fbc1daad5cf8b5$var$isNullOrEmpty(renderHeight)) {
            if (canvas.style.height === "") canvas.height = canvas.width / (aspectRatio || 2);
            else {
                var displayHeight = $6892236ee0bf6afc$export$9bb611d729802a56(canvas, "height");
                if (displayHeight !== undefined) canvas.height = displayHeight;
            }
        }
        return canvas;
    }
    var $68fbc1daad5cf8b5$var$eventListenerOptions = $6892236ee0bf6afc$export$3466f893ebf79586 ? {
        passive: true
    } : false;
    function $68fbc1daad5cf8b5$var$addListener(node, type, listener) {
        node.addEventListener(type, listener, $68fbc1daad5cf8b5$var$eventListenerOptions);
    }
    function $68fbc1daad5cf8b5$var$removeListener(chart, type, listener) {
        chart.canvas.removeEventListener(type, listener, $68fbc1daad5cf8b5$var$eventListenerOptions);
    }
    function $68fbc1daad5cf8b5$var$fromNativeEvent(event, chart) {
        var type = $68fbc1daad5cf8b5$var$EVENT_TYPES[event.type] || event.type;
        var ref = $6892236ee0bf6afc$export$df995fae86a55f06(event, chart), x = ref.x, y = ref.y;
        return {
            type: type,
            chart: chart,
            native: event,
            x: x !== undefined ? x : null,
            y: y !== undefined ? y : null
        };
    }
    function $68fbc1daad5cf8b5$var$nodeListContains(nodeList, canvas) {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = nodeList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var node = _step.value;
                if (node === canvas || node.contains(canvas)) return true;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
    }
    function $68fbc1daad5cf8b5$var$createAttachObserver(chart, type, listener) {
        var canvas = chart.canvas;
        var observer = new MutationObserver(function(entries) {
            var trigger = false;
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var entry = _step.value;
                    trigger = trigger || $68fbc1daad5cf8b5$var$nodeListContains(entry.addedNodes, canvas);
                    trigger = trigger && !$68fbc1daad5cf8b5$var$nodeListContains(entry.removedNodes, canvas);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                } finally{
                    if (_didIteratorError) throw _iteratorError;
                }
            }
            if (trigger) listener();
        });
        observer.observe(document, {
            childList: true,
            subtree: true
        });
        return observer;
    }
    function $68fbc1daad5cf8b5$var$createDetachObserver(chart, type, listener) {
        var canvas = chart.canvas;
        var observer = new MutationObserver(function(entries) {
            var trigger = false;
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var entry = _step.value;
                    trigger = trigger || $68fbc1daad5cf8b5$var$nodeListContains(entry.removedNodes, canvas);
                    trigger = trigger && !$68fbc1daad5cf8b5$var$nodeListContains(entry.addedNodes, canvas);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                } finally{
                    if (_didIteratorError) throw _iteratorError;
                }
            }
            if (trigger) listener();
        });
        observer.observe(document, {
            childList: true,
            subtree: true
        });
        return observer;
    }
    var $68fbc1daad5cf8b5$var$drpListeningCharts = new Map();
    var $68fbc1daad5cf8b5$var$oldDevicePixelRatio = 0;
    function $68fbc1daad5cf8b5$var$onWindowResize() {
        var dpr = window.devicePixelRatio;
        if (dpr === $68fbc1daad5cf8b5$var$oldDevicePixelRatio) return;
        $68fbc1daad5cf8b5$var$oldDevicePixelRatio = dpr;
        $68fbc1daad5cf8b5$var$drpListeningCharts.forEach(function(resize, chart) {
            if (chart.currentDevicePixelRatio !== dpr) resize();
        });
    }
    function $68fbc1daad5cf8b5$var$listenDevicePixelRatioChanges(chart, resize) {
        if (!$68fbc1daad5cf8b5$var$drpListeningCharts.size) window.addEventListener("resize", $68fbc1daad5cf8b5$var$onWindowResize);
        $68fbc1daad5cf8b5$var$drpListeningCharts.set(chart, resize);
    }
    function $68fbc1daad5cf8b5$var$unlistenDevicePixelRatioChanges(chart) {
        $68fbc1daad5cf8b5$var$drpListeningCharts["delete"](chart);
        if (!$68fbc1daad5cf8b5$var$drpListeningCharts.size) window.removeEventListener("resize", $68fbc1daad5cf8b5$var$onWindowResize);
    }
    function $68fbc1daad5cf8b5$var$createResizeObserver(chart, type, listener) {
        var canvas = chart.canvas;
        var container = canvas && $6892236ee0bf6afc$export$2329c99376c9d0a4(canvas);
        if (!container) return;
        var resize = $6892236ee0bf6afc$export$b4171a6734a65d42(function(width, height) {
            var w = container.clientWidth;
            listener(width, height);
            if (w < container.clientWidth) listener();
        }, window);
        var observer = new ResizeObserver(function(entries) {
            var entry = entries[0];
            var width = entry.contentRect.width;
            var height = entry.contentRect.height;
            if (width === 0 && height === 0) return;
            resize(width, height);
        });
        observer.observe(container);
        $68fbc1daad5cf8b5$var$listenDevicePixelRatioChanges(chart, resize);
        return observer;
    }
    function $68fbc1daad5cf8b5$var$releaseObserver(chart, type, observer) {
        if (observer) observer.disconnect();
        if (type === "resize") $68fbc1daad5cf8b5$var$unlistenDevicePixelRatioChanges(chart);
    }
    function $68fbc1daad5cf8b5$var$createProxyAndListen(chart, type, listener) {
        var canvas = chart.canvas;
        var proxy = $6892236ee0bf6afc$export$b4171a6734a65d42(function(event) {
            if (chart.ctx !== null) listener($68fbc1daad5cf8b5$var$fromNativeEvent(event, chart));
        }, chart, function(args) {
            var event = args[0];
            return [
                event,
                event.offsetX,
                event.offsetY
            ];
        });
        $68fbc1daad5cf8b5$var$addListener(canvas, type, proxy);
        return proxy;
    }
    var $68fbc1daad5cf8b5$export$f02da7f882cf6b2e = /*#__PURE__*/ function(BasePlatform) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(DomPlatform, BasePlatform);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(DomPlatform);
        function DomPlatform() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, DomPlatform);
            return _super.apply(this, arguments);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(DomPlatform, [
            {
                key: "acquireContext",
                value: function acquireContext(canvas, aspectRatio) {
                    var context = canvas && canvas.getContext && canvas.getContext("2d");
                    if (context && context.canvas === canvas) {
                        $68fbc1daad5cf8b5$var$initCanvas(canvas, aspectRatio);
                        return context;
                    }
                    return null;
                }
            },
            {
                key: "releaseContext",
                value: function releaseContext(context) {
                    var canvas = context.canvas;
                    if (!canvas[$68fbc1daad5cf8b5$var$EXPANDO_KEY]) return false;
                    var initial = canvas[$68fbc1daad5cf8b5$var$EXPANDO_KEY].initial;
                    [
                        "height",
                        "width"
                    ].forEach(function(prop) {
                        var value = initial[prop];
                        if ($6892236ee0bf6afc$export$342063e11d6c3cad(value)) canvas.removeAttribute(prop);
                        else canvas.setAttribute(prop, value);
                    });
                    var style = initial.style || {
                    };
                    Object.keys(style).forEach(function(key) {
                        canvas.style[key] = style[key];
                    });
                    canvas.width = canvas.width;
                    delete canvas[$68fbc1daad5cf8b5$var$EXPANDO_KEY];
                    return true;
                }
            },
            {
                key: "addEventListener",
                value: function addEventListener(chart, type, listener) {
                    this.removeEventListener(chart, type);
                    var proxies = chart.$proxies || (chart.$proxies = {
                    });
                    var handlers = {
                        attach: $68fbc1daad5cf8b5$var$createAttachObserver,
                        detach: $68fbc1daad5cf8b5$var$createDetachObserver,
                        resize: $68fbc1daad5cf8b5$var$createResizeObserver
                    };
                    var handler = handlers[type] || $68fbc1daad5cf8b5$var$createProxyAndListen;
                    proxies[type] = handler(chart, type, listener);
                }
            },
            {
                key: "removeEventListener",
                value: function removeEventListener(chart, type) {
                    var proxies = chart.$proxies || (chart.$proxies = {
                    });
                    var proxy = proxies[type];
                    if (!proxy) return;
                    var handlers = {
                        attach: $68fbc1daad5cf8b5$var$releaseObserver,
                        detach: $68fbc1daad5cf8b5$var$releaseObserver,
                        resize: $68fbc1daad5cf8b5$var$releaseObserver
                    };
                    var handler = handlers[type] || $68fbc1daad5cf8b5$var$removeListener;
                    handler(chart, type, proxy);
                    proxies[type] = undefined;
                }
            },
            {
                key: "getDevicePixelRatio",
                value: function getDevicePixelRatio() {
                    return window.devicePixelRatio;
                }
            },
            {
                key: "getMaximumSize",
                value: function getMaximumSize1(canvas, width, height, aspectRatio) {
                    return $6892236ee0bf6afc$export$d66501df72047452(canvas, width, height, aspectRatio);
                }
            },
            {
                key: "isAttached",
                value: function isAttached(canvas) {
                    var container = $6892236ee0bf6afc$export$2329c99376c9d0a4(canvas);
                    return !!(container && container.isConnected);
                }
            }
        ]);
        return DomPlatform;
    }($68fbc1daad5cf8b5$export$7b1aeb87f31f7da8);
    function $68fbc1daad5cf8b5$export$72cd9e67b1b784f9(canvas) {
        if (!$6892236ee0bf6afc$export$61196ced6d74a310() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) return $68fbc1daad5cf8b5$export$a40a96b24b46cf35;
        return $68fbc1daad5cf8b5$export$f02da7f882cf6b2e;
    }
    var $68fbc1daad5cf8b5$export$db77ccec0bb4ccac = /*#__PURE__*/ function() {
        function Element() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Element);
            this.x = undefined;
            this.y = undefined;
            this.active = false;
            this.options = undefined;
            this.$animations = undefined;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Element, [
            {
                key: "tooltipPosition",
                value: function tooltipPosition(useFinalPosition) {
                    var ref = this.getProps([
                        "x",
                        "y"
                    ], useFinalPosition), x = ref.x, y = ref.y;
                    return {
                        x: x,
                        y: y
                    };
                }
            },
            {
                key: "hasValue",
                value: function hasValue() {
                    return $6892236ee0bf6afc$export$9e5f44173e64f162(this.x) && $6892236ee0bf6afc$export$9e5f44173e64f162(this.y);
                }
            },
            {
                key: "getProps",
                value: function getProps(props, _final) {
                    var _this = this;
                    var anims = this.$animations;
                    if (!_final || !anims) return this;
                    var ret = {
                    };
                    props.forEach(function(prop) {
                        ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : _this[prop];
                    });
                    return ret;
                }
            }
        ]);
        return Element;
    }();
    $68fbc1daad5cf8b5$export$db77ccec0bb4ccac.defaults = {
    };
    $68fbc1daad5cf8b5$export$db77ccec0bb4ccac.defaultRoutes = undefined;
    var $68fbc1daad5cf8b5$var$formatters = {
        values: function(value) {
            return $6892236ee0bf6afc$export$8b22cf2602fb60ce(value) ? value : "" + value;
        },
        numeric: function(tickValue, index, ticks) {
            if (tickValue === 0) return "0";
            var locale = this.chart.options.locale;
            var notation;
            var delta = tickValue;
            if (ticks.length > 1) {
                var maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
                if (maxTick < 0.0001 || maxTick > 1000000000000000) notation = "scientific";
                delta = $68fbc1daad5cf8b5$var$calculateDelta(tickValue, ticks);
            }
            var logDelta = $6892236ee0bf6afc$export$3a1a48c8f6ef640e(Math.abs(delta));
            var numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
            var options = {
                notation: notation,
                minimumFractionDigits: numDecimal,
                maximumFractionDigits: numDecimal
            };
            Object.assign(options, this.options.ticks.format);
            return $6892236ee0bf6afc$export$ae1af26003f05816(tickValue, locale, options);
        },
        logarithmic: function(tickValue, index43, ticks) {
            if (tickValue === 0) return "0";
            var remain = tickValue / Math.pow(10, Math.floor($6892236ee0bf6afc$export$3a1a48c8f6ef640e(tickValue)));
            if (remain === 1 || remain === 2 || remain === 5) return $68fbc1daad5cf8b5$var$formatters.numeric.call(this, tickValue, index43, ticks);
            return "";
        }
    };
    function $68fbc1daad5cf8b5$var$calculateDelta(tickValue, ticks) {
        var delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
        if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) delta = tickValue - Math.floor(tickValue);
        return delta;
    }
    var $68fbc1daad5cf8b5$export$27c7467594ef87bd = {
        formatters: $68fbc1daad5cf8b5$var$formatters
    };
    $6892236ee0bf6afc$export$4368d992c4eafac0.set("scale", {
        display: true,
        offset: false,
        reverse: false,
        beginAtZero: false,
        bounds: "ticks",
        grace: 0,
        grid: {
            display: true,
            lineWidth: 1,
            drawBorder: true,
            drawOnChartArea: true,
            drawTicks: true,
            tickLength: 8,
            tickWidth: function(_ctx, options) {
                return options.lineWidth;
            },
            tickColor: function(_ctx, options) {
                return options.color;
            },
            offset: false,
            borderDash: [],
            borderDashOffset: 0,
            borderWidth: 1
        },
        title: {
            display: false,
            text: "",
            padding: {
                top: 4,
                bottom: 4
            }
        },
        ticks: {
            minRotation: 0,
            maxRotation: 50,
            mirror: false,
            textStrokeWidth: 0,
            textStrokeColor: "",
            padding: 3,
            display: true,
            autoSkip: true,
            autoSkipPadding: 3,
            labelOffset: 0,
            callback: $68fbc1daad5cf8b5$export$27c7467594ef87bd.formatters.values,
            minor: {
            },
            major: {
            },
            align: "center",
            crossAlign: "near",
            showLabelBackdrop: false,
            backdropColor: "rgba(255, 255, 255, 0.75)",
            backdropPadding: 2
        }
    });
    $6892236ee0bf6afc$export$4368d992c4eafac0.route("scale.ticks", "color", "", "color");
    $6892236ee0bf6afc$export$4368d992c4eafac0.route("scale.grid", "color", "", "borderColor");
    $6892236ee0bf6afc$export$4368d992c4eafac0.route("scale.grid", "borderColor", "", "borderColor");
    $6892236ee0bf6afc$export$4368d992c4eafac0.route("scale.title", "color", "", "color");
    $6892236ee0bf6afc$export$4368d992c4eafac0.describe("scale", {
        _fallback: false,
        _scriptable: function(name) {
            return !name.startsWith("before") && !name.startsWith("after") && name !== "callback" && name !== "parser";
        },
        _indexable: function(name) {
            return name !== "borderDash" && name !== "tickBorderDash";
        }
    });
    $6892236ee0bf6afc$export$4368d992c4eafac0.describe("scales", {
        _fallback: "scale"
    });
    $6892236ee0bf6afc$export$4368d992c4eafac0.describe("scale.ticks", {
        _scriptable: function(name) {
            return name !== "backdropPadding" && name !== "callback";
        },
        _indexable: function(name) {
            return name !== "backdropPadding";
        }
    });
    function $68fbc1daad5cf8b5$var$autoSkip(scale, ticks) {
        var tickOpts = scale.options.ticks;
        var ticksLimit = tickOpts.maxTicksLimit || $68fbc1daad5cf8b5$var$determineMaxTicks(scale);
        var majorIndices = tickOpts.major.enabled ? $68fbc1daad5cf8b5$var$getMajorIndices(ticks) : [];
        var numMajorIndices = majorIndices.length;
        var first = majorIndices[0];
        var last = majorIndices[numMajorIndices - 1];
        var newTicks = [];
        if (numMajorIndices > ticksLimit) {
            $68fbc1daad5cf8b5$var$skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
            return newTicks;
        }
        var spacing = $68fbc1daad5cf8b5$var$calculateSpacing(majorIndices, ticks, ticksLimit);
        if (numMajorIndices > 0) {
            var i, ilen;
            var avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
            $68fbc1daad5cf8b5$var$skip(ticks, newTicks, spacing, $6892236ee0bf6afc$export$342063e11d6c3cad(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
            for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++)$68fbc1daad5cf8b5$var$skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
            $68fbc1daad5cf8b5$var$skip(ticks, newTicks, spacing, last, $6892236ee0bf6afc$export$342063e11d6c3cad(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
            return newTicks;
        }
        $68fbc1daad5cf8b5$var$skip(ticks, newTicks, spacing);
        return newTicks;
    }
    function $68fbc1daad5cf8b5$var$determineMaxTicks(scale) {
        var offset = scale.options.offset;
        var tickLength = scale._tickSize();
        var maxScale = scale._length / tickLength + (offset ? 0 : 1);
        var maxChart = scale._maxLength / tickLength;
        return Math.floor(Math.min(maxScale, maxChart));
    }
    function $68fbc1daad5cf8b5$var$calculateSpacing(majorIndices, ticks, ticksLimit) {
        var evenMajorSpacing = $68fbc1daad5cf8b5$var$getEvenSpacing(majorIndices);
        var spacing = ticks.length / ticksLimit;
        if (!evenMajorSpacing) return Math.max(spacing, 1);
        var factors = $6892236ee0bf6afc$export$a07804094c3ecf2d(evenMajorSpacing);
        for(var i = 0, ilen = factors.length - 1; i < ilen; i++){
            var factor = factors[i];
            if (factor > spacing) return factor;
        }
        return Math.max(spacing, 1);
    }
    function $68fbc1daad5cf8b5$var$getMajorIndices(ticks) {
        var result = [];
        var i, ilen;
        for(i = 0, ilen = ticks.length; i < ilen; i++)if (ticks[i].major) result.push(i);
        return result;
    }
    function $68fbc1daad5cf8b5$var$skipMajors(ticks, newTicks, majorIndices, spacing) {
        var count = 0;
        var next = majorIndices[0];
        var i;
        spacing = Math.ceil(spacing);
        for(i = 0; i < ticks.length; i++)if (i === next) {
            newTicks.push(ticks[i]);
            count++;
            next = majorIndices[count * spacing];
        }
    }
    function $68fbc1daad5cf8b5$var$skip(ticks, newTicks, spacing, majorStart, majorEnd) {
        var start = $6892236ee0bf6afc$export$90a7f3efeed30595(majorStart, 0);
        var end = Math.min($6892236ee0bf6afc$export$90a7f3efeed30595(majorEnd, ticks.length), ticks.length);
        var count = 0;
        var length, i, next;
        spacing = Math.ceil(spacing);
        if (majorEnd) {
            length = majorEnd - majorStart;
            spacing = length / Math.floor(length / spacing);
        }
        next = start;
        while(next < 0){
            count++;
            next = Math.round(start + count * spacing);
        }
        for(i = Math.max(start, 0); i < end; i++)if (i === next) {
            newTicks.push(ticks[i]);
            count++;
            next = Math.round(start + count * spacing);
        }
    }
    function $68fbc1daad5cf8b5$var$getEvenSpacing(arr) {
        var len = arr.length;
        var i, diff;
        if (len < 2) return false;
        for(diff = arr[0], i = 1; i < len; ++i){
            if (arr[i] - arr[i - 1] !== diff) return false;
        }
        return diff;
    }
    var $68fbc1daad5cf8b5$var$reverseAlign = function(align) {
        return align === "left" ? "right" : align === "right" ? "left" : align;
    };
    var $68fbc1daad5cf8b5$var$offsetFromEdge = function(scale, edge, offset) {
        return edge === "top" || edge === "left" ? scale[edge] + offset : scale[edge] - offset;
    };
    function $68fbc1daad5cf8b5$var$sample(arr, numItems) {
        var result = [];
        var increment = arr.length / numItems;
        var len = arr.length;
        var i = 0;
        for(; i < len; i += increment)result.push(arr[Math.floor(i)]);
        return result;
    }
    function $68fbc1daad5cf8b5$var$getPixelForGridLine(scale, index44, offsetGridLines) {
        var length = scale.ticks.length;
        var validIndex1 = Math.min(index44, length - 1);
        var start = scale._startPixel;
        var end = scale._endPixel;
        var epsilon = 0.000001;
        var lineValue = scale.getPixelForTick(validIndex1);
        var offset;
        if (offsetGridLines) {
            if (length === 1) offset = Math.max(lineValue - start, end - lineValue);
            else if (index44 === 0) offset = (scale.getPixelForTick(1) - lineValue) / 2;
            else offset = (lineValue - scale.getPixelForTick(validIndex1 - 1)) / 2;
            lineValue += validIndex1 < index44 ? offset : -offset;
            if (lineValue < start - epsilon || lineValue > end + epsilon) return;
        }
        return lineValue;
    }
    function $68fbc1daad5cf8b5$var$garbageCollect(caches, length) {
        $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(caches, function(cache) {
            var gc = cache.gc;
            var gcLen = gc.length / 2;
            var i;
            if (gcLen > length) {
                for(i = 0; i < gcLen; ++i)delete cache.data[gc[i]];
                gc.splice(0, gcLen);
            }
        });
    }
    function $68fbc1daad5cf8b5$var$getTickMarkLength(options) {
        return options.drawTicks ? options.tickLength : 0;
    }
    function $68fbc1daad5cf8b5$var$getTitleHeight(options, fallback) {
        if (!options.display) return 0;
        var font = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(options.font, fallback);
        var padding = $6892236ee0bf6afc$export$96f57966bedc81b4(options.padding);
        var lines = $6892236ee0bf6afc$export$8b22cf2602fb60ce(options.text) ? options.text.length : 1;
        return lines * font.lineHeight + padding.height;
    }
    function $68fbc1daad5cf8b5$var$createScaleContext(parent, scale) {
        return $6892236ee0bf6afc$export$dda1d9f60106f0e9(parent, {
            scale: scale,
            type: "scale"
        });
    }
    function $68fbc1daad5cf8b5$var$createTickContext(parent, index45, tick) {
        return $6892236ee0bf6afc$export$dda1d9f60106f0e9(parent, {
            tick: tick,
            index: index45,
            type: "tick"
        });
    }
    function $68fbc1daad5cf8b5$var$titleAlign(align, position, reverse) {
        var ret = $6892236ee0bf6afc$export$34aec0b863436764(align);
        if (reverse && position !== "right" || !reverse && position === "right") ret = $68fbc1daad5cf8b5$var$reverseAlign(ret);
        return ret;
    }
    function $68fbc1daad5cf8b5$var$titleArgs(scale, offset, position, align) {
        var top = scale.top, left = scale.left, bottom = scale.bottom, right = scale.right, chart = scale.chart;
        var chartArea = chart.chartArea, scales2 = chart.scales;
        var rotation = 0;
        var maxWidth, titleX, titleY;
        var height = bottom - top;
        var width = right - left;
        if (scale.isHorizontal()) {
            titleX = $6892236ee0bf6afc$export$3c2fa207a37baaea(align, left, right);
            if ($6892236ee0bf6afc$export$23f2a1d2818174ef(position)) {
                var positionAxisID = Object.keys(position)[0];
                var value = position[positionAxisID];
                titleY = scales2[positionAxisID].getPixelForValue(value) + height - offset;
            } else if (position === "center") titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
            else titleY = $68fbc1daad5cf8b5$var$offsetFromEdge(scale, position, offset);
            maxWidth = right - left;
        } else {
            if ($6892236ee0bf6afc$export$23f2a1d2818174ef(position)) {
                var positionAxisID1 = Object.keys(position)[0];
                var value1 = position[positionAxisID1];
                titleX = scales2[positionAxisID1].getPixelForValue(value1) - width + offset;
            } else if (position === "center") titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
            else titleX = $68fbc1daad5cf8b5$var$offsetFromEdge(scale, position, offset);
            titleY = $6892236ee0bf6afc$export$3c2fa207a37baaea(align, bottom, top);
            rotation = position === "left" ? -$6892236ee0bf6afc$export$7f8ddf7c7c20b3cd : $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd;
        }
        return {
            titleX: titleX,
            titleY: titleY,
            maxWidth: maxWidth,
            rotation: rotation
        };
    }
    var $68fbc1daad5cf8b5$export$d60cfc58d3c358b6 = /*#__PURE__*/ function(Element) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(Scale, Element);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(Scale);
        function Scale(cfg) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Scale);
            var _this;
            _this = _super.call(this);
            _this.id = cfg.id;
            _this.type = cfg.type;
            _this.options = undefined;
            _this.ctx = cfg.ctx;
            _this.chart = cfg.chart;
            _this.top = undefined;
            _this.bottom = undefined;
            _this.left = undefined;
            _this.right = undefined;
            _this.width = undefined;
            _this.height = undefined;
            _this._margins = {
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            };
            _this.maxWidth = undefined;
            _this.maxHeight = undefined;
            _this.paddingTop = undefined;
            _this.paddingBottom = undefined;
            _this.paddingLeft = undefined;
            _this.paddingRight = undefined;
            _this.axis = undefined;
            _this.labelRotation = undefined;
            _this.min = undefined;
            _this.max = undefined;
            _this._range = undefined;
            _this.ticks = [];
            _this._gridLineItems = null;
            _this._labelItems = null;
            _this._labelSizes = null;
            _this._length = 0;
            _this._maxLength = 0;
            _this._longestTextCache = {
            };
            _this._startPixel = undefined;
            _this._endPixel = undefined;
            _this._reversePixels = false;
            _this._userMax = undefined;
            _this._userMin = undefined;
            _this._suggestedMax = undefined;
            _this._suggestedMin = undefined;
            _this._ticksLength = 0;
            _this._borderValue = 0;
            _this._cache = {
            };
            _this._dataLimitsCached = false;
            _this.$context = undefined;
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Scale, [
            {
                key: "init",
                value: function init(options) {
                    this.options = options.setContext(this.getContext());
                    this.axis = options.axis;
                    this._userMin = this.parse(options.min);
                    this._userMax = this.parse(options.max);
                    this._suggestedMin = this.parse(options.suggestedMin);
                    this._suggestedMax = this.parse(options.suggestedMax);
                }
            },
            {
                key: "parse",
                value: function parse1(raw, index) {
                    return raw;
                }
            },
            {
                key: "getUserBounds",
                value: function getUserBounds() {
                    var ref = this, _userMin = ref._userMin, _userMax = ref._userMax, _suggestedMin = ref._suggestedMin, _suggestedMax = ref._suggestedMax;
                    _userMin = $6892236ee0bf6afc$export$c4ce752e73470fba(_userMin, Number.POSITIVE_INFINITY);
                    _userMax = $6892236ee0bf6afc$export$c4ce752e73470fba(_userMax, Number.NEGATIVE_INFINITY);
                    _suggestedMin = $6892236ee0bf6afc$export$c4ce752e73470fba(_suggestedMin, Number.POSITIVE_INFINITY);
                    _suggestedMax = $6892236ee0bf6afc$export$c4ce752e73470fba(_suggestedMax, Number.NEGATIVE_INFINITY);
                    return {
                        min: $6892236ee0bf6afc$export$c4ce752e73470fba(_userMin, _suggestedMin),
                        max: $6892236ee0bf6afc$export$c4ce752e73470fba(_userMax, _suggestedMax),
                        minDefined: $6892236ee0bf6afc$export$39b482c5e57630a8(_userMin),
                        maxDefined: $6892236ee0bf6afc$export$39b482c5e57630a8(_userMax)
                    };
                }
            },
            {
                key: "getMinMax",
                value: function getMinMax(canStack) {
                    var ref = this.getUserBounds(), min = ref.min, max = ref.max, minDefined = ref.minDefined, maxDefined = ref.maxDefined;
                    var range;
                    if (minDefined && maxDefined) return {
                        min: min,
                        max: max
                    };
                    var metas = this.getMatchingVisibleMetas();
                    for(var i = 0, ilen = metas.length; i < ilen; ++i){
                        range = metas[i].controller.getMinMax(this, canStack);
                        if (!minDefined) min = Math.min(min, range.min);
                        if (!maxDefined) max = Math.max(max, range.max);
                    }
                    min = maxDefined && min > max ? max : min;
                    max = minDefined && min > max ? min : max;
                    return {
                        min: $6892236ee0bf6afc$export$c4ce752e73470fba(min, $6892236ee0bf6afc$export$c4ce752e73470fba(max, min)),
                        max: $6892236ee0bf6afc$export$c4ce752e73470fba(max, $6892236ee0bf6afc$export$c4ce752e73470fba(min, max))
                    };
                }
            },
            {
                key: "getPadding",
                value: function getPadding() {
                    return {
                        left: this.paddingLeft || 0,
                        top: this.paddingTop || 0,
                        right: this.paddingRight || 0,
                        bottom: this.paddingBottom || 0
                    };
                }
            },
            {
                key: "getTicks",
                value: function getTicks() {
                    return this.ticks;
                }
            },
            {
                key: "getLabels",
                value: function getLabels() {
                    var data = this.chart.data;
                    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
                }
            },
            {
                key: "beforeLayout",
                value: function beforeLayout() {
                    this._cache = {
                    };
                    this._dataLimitsCached = false;
                }
            },
            {
                key: "beforeUpdate",
                value: function beforeUpdate() {
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(this.options.beforeUpdate, [
                        this
                    ]);
                }
            },
            {
                key: "update",
                value: function update(maxWidth, maxHeight, margins) {
                    var _options = this.options, beginAtZero = _options.beginAtZero, grace = _options.grace, tickOpts = _options.ticks;
                    var sampleSize = tickOpts.sampleSize;
                    this.beforeUpdate();
                    this.maxWidth = maxWidth;
                    this.maxHeight = maxHeight;
                    this._margins = margins = Object.assign({
                        left: 0,
                        right: 0,
                        top: 0,
                        bottom: 0
                    }, margins);
                    this.ticks = null;
                    this._labelSizes = null;
                    this._gridLineItems = null;
                    this._labelItems = null;
                    this.beforeSetDimensions();
                    this.setDimensions();
                    this.afterSetDimensions();
                    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
                    if (!this._dataLimitsCached) {
                        this.beforeDataLimits();
                        this.determineDataLimits();
                        this.afterDataLimits();
                        this._range = $6892236ee0bf6afc$export$db202ddc8be9136(this, grace, beginAtZero);
                        this._dataLimitsCached = true;
                    }
                    this.beforeBuildTicks();
                    this.ticks = this.buildTicks() || [];
                    this.afterBuildTicks();
                    var samplingEnabled = sampleSize < this.ticks.length;
                    this._convertTicksToLabels(samplingEnabled ? $68fbc1daad5cf8b5$var$sample(this.ticks, sampleSize) : this.ticks);
                    this.configure();
                    this.beforeCalculateLabelRotation();
                    this.calculateLabelRotation();
                    this.afterCalculateLabelRotation();
                    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
                        this.ticks = $68fbc1daad5cf8b5$var$autoSkip(this, this.ticks);
                        this._labelSizes = null;
                        this.afterAutoSkip();
                    }
                    if (samplingEnabled) this._convertTicksToLabels(this.ticks);
                    this.beforeFit();
                    this.fit();
                    this.afterFit();
                    this.afterUpdate();
                }
            },
            {
                key: "configure",
                value: function configure() {
                    var reversePixels = this.options.reverse;
                    var startPixel, endPixel;
                    if (this.isHorizontal()) {
                        startPixel = this.left;
                        endPixel = this.right;
                    } else {
                        startPixel = this.top;
                        endPixel = this.bottom;
                        reversePixels = !reversePixels;
                    }
                    this._startPixel = startPixel;
                    this._endPixel = endPixel;
                    this._reversePixels = reversePixels;
                    this._length = endPixel - startPixel;
                    this._alignToPixels = this.options.alignToPixels;
                }
            },
            {
                key: "afterUpdate",
                value: function afterUpdate() {
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(this.options.afterUpdate, [
                        this
                    ]);
                }
            },
            {
                key: "beforeSetDimensions",
                value: function beforeSetDimensions() {
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(this.options.beforeSetDimensions, [
                        this
                    ]);
                }
            },
            {
                key: "setDimensions",
                value: function setDimensions() {
                    if (this.isHorizontal()) {
                        this.width = this.maxWidth;
                        this.left = 0;
                        this.right = this.width;
                    } else {
                        this.height = this.maxHeight;
                        this.top = 0;
                        this.bottom = this.height;
                    }
                    this.paddingLeft = 0;
                    this.paddingTop = 0;
                    this.paddingRight = 0;
                    this.paddingBottom = 0;
                }
            },
            {
                key: "afterSetDimensions",
                value: function afterSetDimensions() {
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(this.options.afterSetDimensions, [
                        this
                    ]);
                }
            },
            {
                key: "_callHooks",
                value: function _callHooks(name) {
                    this.chart.notifyPlugins(name, this.getContext());
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(this.options[name], [
                        this
                    ]);
                }
            },
            {
                key: "beforeDataLimits",
                value: function beforeDataLimits() {
                    this._callHooks("beforeDataLimits");
                }
            },
            {
                key: "determineDataLimits",
                value: function determineDataLimits() {
                }
            },
            {
                key: "afterDataLimits",
                value: function afterDataLimits() {
                    this._callHooks("afterDataLimits");
                }
            },
            {
                key: "beforeBuildTicks",
                value: function beforeBuildTicks() {
                    this._callHooks("beforeBuildTicks");
                }
            },
            {
                key: "buildTicks",
                value: function buildTicks() {
                    return [];
                }
            },
            {
                key: "afterBuildTicks",
                value: function afterBuildTicks() {
                    this._callHooks("afterBuildTicks");
                }
            },
            {
                key: "beforeTickToLabelConversion",
                value: function beforeTickToLabelConversion() {
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(this.options.beforeTickToLabelConversion, [
                        this
                    ]);
                }
            },
            {
                key: "generateTickLabels",
                value: function generateTickLabels(ticks) {
                    var tickOpts = this.options.ticks;
                    var i, ilen, tick;
                    for(i = 0, ilen = ticks.length; i < ilen; i++){
                        tick = ticks[i];
                        tick.label = $6892236ee0bf6afc$export$3722cfe417b6ed86(tickOpts.callback, [
                            tick.value,
                            i,
                            ticks
                        ], this);
                    }
                }
            },
            {
                key: "afterTickToLabelConversion",
                value: function afterTickToLabelConversion() {
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(this.options.afterTickToLabelConversion, [
                        this
                    ]);
                }
            },
            {
                key: "beforeCalculateLabelRotation",
                value: function beforeCalculateLabelRotation() {
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(this.options.beforeCalculateLabelRotation, [
                        this
                    ]);
                }
            },
            {
                key: "calculateLabelRotation",
                value: function calculateLabelRotation() {
                    var options = this.options;
                    var tickOpts = options.ticks;
                    var numTicks = this.ticks.length;
                    var minRotation = tickOpts.minRotation || 0;
                    var maxRotation = tickOpts.maxRotation;
                    var labelRotation = minRotation;
                    var tickWidth, maxHeight, maxLabelDiagonal;
                    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
                        this.labelRotation = minRotation;
                        return;
                    }
                    var labelSizes = this._getLabelSizes();
                    var maxLabelWidth = labelSizes.widest.width;
                    var maxLabelHeight = labelSizes.highest.height;
                    var maxWidth = $6892236ee0bf6afc$export$efccba1c4a2ef57b(this.chart.width - maxLabelWidth, 0, this.maxWidth);
                    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
                    if (maxLabelWidth + 6 > tickWidth) {
                        tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
                        maxHeight = this.maxHeight - $68fbc1daad5cf8b5$var$getTickMarkLength(options.grid) - tickOpts.padding - $68fbc1daad5cf8b5$var$getTitleHeight(options.title, this.chart.options.font);
                        maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
                        labelRotation = $6892236ee0bf6afc$export$25ce5a424b770e84(Math.min(Math.asin($6892236ee0bf6afc$export$efccba1c4a2ef57b((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin($6892236ee0bf6afc$export$efccba1c4a2ef57b(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin($6892236ee0bf6afc$export$efccba1c4a2ef57b(maxLabelHeight / maxLabelDiagonal, -1, 1))));
                        labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
                    }
                    this.labelRotation = labelRotation;
                }
            },
            {
                key: "afterCalculateLabelRotation",
                value: function afterCalculateLabelRotation() {
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(this.options.afterCalculateLabelRotation, [
                        this
                    ]);
                }
            },
            {
                key: "afterAutoSkip",
                value: function afterAutoSkip() {
                }
            },
            {
                key: "beforeFit",
                value: function beforeFit() {
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(this.options.beforeFit, [
                        this
                    ]);
                }
            },
            {
                key: "fit",
                value: function fit() {
                    var minSize = {
                        width: 0,
                        height: 0
                    };
                    var ref = this, chart = ref.chart, _options = ref.options, tickOpts = _options.ticks, titleOpts = _options.title, gridOpts = _options.grid;
                    var display = this._isVisible();
                    var isHorizontal = this.isHorizontal();
                    if (display) {
                        var titleHeight = $68fbc1daad5cf8b5$var$getTitleHeight(titleOpts, chart.options.font);
                        if (isHorizontal) {
                            minSize.width = this.maxWidth;
                            minSize.height = $68fbc1daad5cf8b5$var$getTickMarkLength(gridOpts) + titleHeight;
                        } else {
                            minSize.height = this.maxHeight;
                            minSize.width = $68fbc1daad5cf8b5$var$getTickMarkLength(gridOpts) + titleHeight;
                        }
                        if (tickOpts.display && this.ticks.length) {
                            var ref4 = this._getLabelSizes(), first = ref4.first, last = ref4.last, widest = ref4.widest, highest = ref4.highest;
                            var tickPadding = tickOpts.padding * 2;
                            var angleRadians = $6892236ee0bf6afc$export$625550452a3fa3ec(this.labelRotation);
                            var cos = Math.cos(angleRadians);
                            var sin = Math.sin(angleRadians);
                            if (isHorizontal) {
                                var labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
                                minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
                            } else {
                                var labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
                                minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
                            }
                            this._calculatePadding(first, last, sin, cos);
                        }
                    }
                    this._handleMargins();
                    if (isHorizontal) {
                        this.width = this._length = chart.width - this._margins.left - this._margins.right;
                        this.height = minSize.height;
                    } else {
                        this.width = minSize.width;
                        this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
                    }
                }
            },
            {
                key: "_calculatePadding",
                value: function _calculatePadding(first, last, sin, cos) {
                    var _options = this.options, _ticks = _options.ticks, align = _ticks.align, padding = _ticks.padding, position = _options.position;
                    var isRotated = this.labelRotation !== 0;
                    var labelsBelowTicks = position !== "top" && this.axis === "x";
                    if (this.isHorizontal()) {
                        var offsetLeft = this.getPixelForTick(0) - this.left;
                        var offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
                        var paddingLeft = 0;
                        var paddingRight = 0;
                        if (isRotated) {
                            if (labelsBelowTicks) {
                                paddingLeft = cos * first.width;
                                paddingRight = sin * last.height;
                            } else {
                                paddingLeft = sin * first.height;
                                paddingRight = cos * last.width;
                            }
                        } else if (align === "start") paddingRight = last.width;
                        else if (align === "end") paddingLeft = first.width;
                        else if (align !== "inner") {
                            paddingLeft = first.width / 2;
                            paddingRight = last.width / 2;
                        }
                        this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
                        this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
                    } else {
                        var paddingTop = last.height / 2;
                        var paddingBottom = first.height / 2;
                        if (align === "start") {
                            paddingTop = 0;
                            paddingBottom = first.height;
                        } else if (align === "end") {
                            paddingTop = last.height;
                            paddingBottom = 0;
                        }
                        this.paddingTop = paddingTop + padding;
                        this.paddingBottom = paddingBottom + padding;
                    }
                }
            },
            {
                key: "_handleMargins",
                value: function _handleMargins() {
                    if (this._margins) {
                        this._margins.left = Math.max(this.paddingLeft, this._margins.left);
                        this._margins.top = Math.max(this.paddingTop, this._margins.top);
                        this._margins.right = Math.max(this.paddingRight, this._margins.right);
                        this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
                    }
                }
            },
            {
                key: "afterFit",
                value: function afterFit() {
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(this.options.afterFit, [
                        this
                    ]);
                }
            },
            {
                key: "isHorizontal",
                value: function isHorizontal() {
                    var _options = this.options, axis = _options.axis, position = _options.position;
                    return position === "top" || position === "bottom" || axis === "x";
                }
            },
            {
                key: "isFullSize",
                value: function isFullSize() {
                    return this.options.fullSize;
                }
            },
            {
                key: "_convertTicksToLabels",
                value: function _convertTicksToLabels(ticks) {
                    this.beforeTickToLabelConversion();
                    this.generateTickLabels(ticks);
                    var i, ilen;
                    for(i = 0, ilen = ticks.length; i < ilen; i++)if ($6892236ee0bf6afc$export$342063e11d6c3cad(ticks[i].label)) {
                        ticks.splice(i, 1);
                        ilen--;
                        i--;
                    }
                    this.afterTickToLabelConversion();
                }
            },
            {
                key: "_getLabelSizes",
                value: function _getLabelSizes() {
                    var labelSizes = this._labelSizes;
                    if (!labelSizes) {
                        var sampleSize = this.options.ticks.sampleSize;
                        var ticks = this.ticks;
                        if (sampleSize < ticks.length) ticks = $68fbc1daad5cf8b5$var$sample(ticks, sampleSize);
                        this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);
                    }
                    return labelSizes;
                }
            },
            {
                key: "_computeLabelSizes",
                value: function _computeLabelSizes(ticks, length) {
                    var ref = this, ctx = ref.ctx, caches = ref._longestTextCache;
                    var widths = [];
                    var heights = [];
                    var widestLabelSize = 0;
                    var highestLabelSize = 0;
                    var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
                    for(i = 0; i < length; ++i){
                        label = ticks[i].label;
                        tickFont = this._resolveTickFontOptions(i);
                        ctx.font = fontString = tickFont.string;
                        cache = caches[fontString] = caches[fontString] || {
                            data: {
                            },
                            gc: []
                        };
                        lineHeight = tickFont.lineHeight;
                        width = height = 0;
                        if (!$6892236ee0bf6afc$export$342063e11d6c3cad(label) && !$6892236ee0bf6afc$export$8b22cf2602fb60ce(label)) {
                            width = $6892236ee0bf6afc$export$3a6d5c9ae78a2c08(ctx, cache.data, cache.gc, width, label);
                            height = lineHeight;
                        } else if ($6892236ee0bf6afc$export$8b22cf2602fb60ce(label)) for(j = 0, jlen = label.length; j < jlen; ++j){
                            nestedLabel = label[j];
                            if (!$6892236ee0bf6afc$export$342063e11d6c3cad(nestedLabel) && !$6892236ee0bf6afc$export$8b22cf2602fb60ce(nestedLabel)) {
                                width = $6892236ee0bf6afc$export$3a6d5c9ae78a2c08(ctx, cache.data, cache.gc, width, nestedLabel);
                                height += lineHeight;
                            }
                        }
                        widths.push(width);
                        heights.push(height);
                        widestLabelSize = Math.max(width, widestLabelSize);
                        highestLabelSize = Math.max(height, highestLabelSize);
                    }
                    $68fbc1daad5cf8b5$var$garbageCollect(caches, length);
                    var widest = widths.indexOf(widestLabelSize);
                    var highest = heights.indexOf(highestLabelSize);
                    var valueAt = function(idx) {
                        return {
                            width: widths[idx] || 0,
                            height: heights[idx] || 0
                        };
                    };
                    return {
                        first: valueAt(0),
                        last: valueAt(length - 1),
                        widest: valueAt(widest),
                        highest: valueAt(highest),
                        widths: widths,
                        heights: heights
                    };
                }
            },
            {
                key: "getLabelForValue",
                value: function getLabelForValue(value) {
                    return value;
                }
            },
            {
                key: "getPixelForValue",
                value: function getPixelForValue(value, index) {
                    return NaN;
                }
            },
            {
                key: "getValueForPixel",
                value: function getValueForPixel(pixel) {
                }
            },
            {
                key: "getPixelForTick",
                value: function getPixelForTick(index46) {
                    var ticks = this.ticks;
                    if (index46 < 0 || index46 > ticks.length - 1) return null;
                    return this.getPixelForValue(ticks[index46].value);
                }
            },
            {
                key: "getPixelForDecimal",
                value: function getPixelForDecimal(decimal) {
                    if (this._reversePixels) decimal = 1 - decimal;
                    var pixel = this._startPixel + decimal * this._length;
                    return $6892236ee0bf6afc$export$e7c866399fa523f5(this._alignToPixels ? $6892236ee0bf6afc$export$71cec2538cb2c617(this.chart, pixel, 0) : pixel);
                }
            },
            {
                key: "getDecimalForPixel",
                value: function getDecimalForPixel(pixel) {
                    var decimal = (pixel - this._startPixel) / this._length;
                    return this._reversePixels ? 1 - decimal : decimal;
                }
            },
            {
                key: "getBasePixel",
                value: function getBasePixel() {
                    return this.getPixelForValue(this.getBaseValue());
                }
            },
            {
                key: "getBaseValue",
                value: function getBaseValue() {
                    var ref = this, min = ref.min, max = ref.max;
                    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
                }
            },
            {
                key: "getContext",
                value: function getContext(index47) {
                    var ticks = this.ticks || [];
                    if (index47 >= 0 && index47 < ticks.length) {
                        var tick = ticks[index47];
                        return tick.$context || (tick.$context = $68fbc1daad5cf8b5$var$createTickContext(this.getContext(), index47, tick));
                    }
                    return this.$context || (this.$context = $68fbc1daad5cf8b5$var$createScaleContext(this.chart.getContext(), this));
                }
            },
            {
                key: "_tickSize",
                value: function _tickSize() {
                    var optionTicks = this.options.ticks;
                    var rot = $6892236ee0bf6afc$export$625550452a3fa3ec(this.labelRotation);
                    var cos = Math.abs(Math.cos(rot));
                    var sin = Math.abs(Math.sin(rot));
                    var labelSizes = this._getLabelSizes();
                    var padding = optionTicks.autoSkipPadding || 0;
                    var w = labelSizes ? labelSizes.widest.width + padding : 0;
                    var h = labelSizes ? labelSizes.highest.height + padding : 0;
                    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
                }
            },
            {
                key: "_isVisible",
                value: function _isVisible() {
                    var display = this.options.display;
                    if (display !== "auto") return !!display;
                    return this.getMatchingVisibleMetas().length > 0;
                }
            },
            {
                key: "_computeGridLineItems",
                value: function _computeGridLineItems(chartArea) {
                    var axis = this.axis;
                    var chart = this.chart;
                    var options = this.options;
                    var grid = options.grid, position = options.position;
                    var offset = grid.offset;
                    var isHorizontal = this.isHorizontal();
                    var ticks = this.ticks;
                    var ticksLength = ticks.length + (offset ? 1 : 0);
                    var tl = $68fbc1daad5cf8b5$var$getTickMarkLength(grid);
                    var items = [];
                    var borderOpts = grid.setContext(this.getContext());
                    var axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;
                    var axisHalfWidth = axisWidth / 2;
                    var alignBorderValue = function alignBorderValue(pixel) {
                        return $6892236ee0bf6afc$export$71cec2538cb2c617(chart, pixel, axisWidth);
                    };
                    var borderValue, i, lineValue, alignedLineValue;
                    var tx1, ty1, tx2, ty2, x1, y1, x2, y2;
                    if (position === "top") {
                        borderValue = alignBorderValue(this.bottom);
                        ty1 = this.bottom - tl;
                        ty2 = borderValue - axisHalfWidth;
                        y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
                        y2 = chartArea.bottom;
                    } else if (position === "bottom") {
                        borderValue = alignBorderValue(this.top);
                        y1 = chartArea.top;
                        y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
                        ty1 = borderValue + axisHalfWidth;
                        ty2 = this.top + tl;
                    } else if (position === "left") {
                        borderValue = alignBorderValue(this.right);
                        tx1 = this.right - tl;
                        tx2 = borderValue - axisHalfWidth;
                        x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
                        x2 = chartArea.right;
                    } else if (position === "right") {
                        borderValue = alignBorderValue(this.left);
                        x1 = chartArea.left;
                        x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
                        tx1 = borderValue + axisHalfWidth;
                        tx2 = this.left + tl;
                    } else if (axis === "x") {
                        if (position === "center") borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
                        else if ($6892236ee0bf6afc$export$23f2a1d2818174ef(position)) {
                            var positionAxisID = Object.keys(position)[0];
                            var value = position[positionAxisID];
                            borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
                        }
                        y1 = chartArea.top;
                        y2 = chartArea.bottom;
                        ty1 = borderValue + axisHalfWidth;
                        ty2 = ty1 + tl;
                    } else if (axis === "y") {
                        if (position === "center") borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
                        else if ($6892236ee0bf6afc$export$23f2a1d2818174ef(position)) {
                            var positionAxisID2 = Object.keys(position)[0];
                            var value2 = position[positionAxisID2];
                            borderValue = alignBorderValue(this.chart.scales[positionAxisID2].getPixelForValue(value2));
                        }
                        tx1 = borderValue - axisHalfWidth;
                        tx2 = tx1 - tl;
                        x1 = chartArea.left;
                        x2 = chartArea.right;
                    }
                    var limit = $6892236ee0bf6afc$export$90a7f3efeed30595(options.ticks.maxTicksLimit, ticksLength);
                    var step = Math.max(1, Math.ceil(ticksLength / limit));
                    for(i = 0; i < ticksLength; i += step){
                        var optsAtIndex = grid.setContext(this.getContext(i));
                        var lineWidth = optsAtIndex.lineWidth;
                        var lineColor = optsAtIndex.color;
                        var borderDash = grid.borderDash || [];
                        var borderDashOffset = optsAtIndex.borderDashOffset;
                        var tickWidth = optsAtIndex.tickWidth;
                        var tickColor = optsAtIndex.tickColor;
                        var tickBorderDash = optsAtIndex.tickBorderDash || [];
                        var tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
                        lineValue = $68fbc1daad5cf8b5$var$getPixelForGridLine(this, i, offset);
                        if (lineValue === undefined) continue;
                        alignedLineValue = $6892236ee0bf6afc$export$71cec2538cb2c617(chart, lineValue, lineWidth);
                        if (isHorizontal) tx1 = tx2 = x1 = x2 = alignedLineValue;
                        else ty1 = ty2 = y1 = y2 = alignedLineValue;
                        items.push({
                            tx1: tx1,
                            ty1: ty1,
                            tx2: tx2,
                            ty2: ty2,
                            x1: x1,
                            y1: y1,
                            x2: x2,
                            y2: y2,
                            width: lineWidth,
                            color: lineColor,
                            borderDash: borderDash,
                            borderDashOffset: borderDashOffset,
                            tickWidth: tickWidth,
                            tickColor: tickColor,
                            tickBorderDash: tickBorderDash,
                            tickBorderDashOffset: tickBorderDashOffset
                        });
                    }
                    this._ticksLength = ticksLength;
                    this._borderValue = borderValue;
                    return items;
                }
            },
            {
                key: "_computeLabelItems",
                value: function _computeLabelItems(chartArea) {
                    var axis = this.axis;
                    var options = this.options;
                    var position = options.position, optionTicks = options.ticks;
                    var isHorizontal = this.isHorizontal();
                    var ticks = this.ticks;
                    var align = optionTicks.align, crossAlign = optionTicks.crossAlign, padding = optionTicks.padding, mirror = optionTicks.mirror;
                    var tl = $68fbc1daad5cf8b5$var$getTickMarkLength(options.grid);
                    var tickAndPadding = tl + padding;
                    var hTickAndPadding = mirror ? -padding : tickAndPadding;
                    var rotation = -$6892236ee0bf6afc$export$625550452a3fa3ec(this.labelRotation);
                    var items = [];
                    var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
                    var textBaseline = "middle";
                    if (position === "top") {
                        y = this.bottom - hTickAndPadding;
                        textAlign = this._getXAxisLabelAlignment();
                    } else if (position === "bottom") {
                        y = this.top + hTickAndPadding;
                        textAlign = this._getXAxisLabelAlignment();
                    } else if (position === "left") {
                        var ret = this._getYAxisLabelAlignment(tl);
                        textAlign = ret.textAlign;
                        x = ret.x;
                    } else if (position === "right") {
                        var ret1 = this._getYAxisLabelAlignment(tl);
                        textAlign = ret1.textAlign;
                        x = ret1.x;
                    } else if (axis === "x") {
                        if (position === "center") y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
                        else if ($6892236ee0bf6afc$export$23f2a1d2818174ef(position)) {
                            var positionAxisID = Object.keys(position)[0];
                            var value = position[positionAxisID];
                            y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
                        }
                        textAlign = this._getXAxisLabelAlignment();
                    } else if (axis === "y") {
                        if (position === "center") x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
                        else if ($6892236ee0bf6afc$export$23f2a1d2818174ef(position)) {
                            var positionAxisID3 = Object.keys(position)[0];
                            var value3 = position[positionAxisID3];
                            x = this.chart.scales[positionAxisID3].getPixelForValue(value3);
                        }
                        textAlign = this._getYAxisLabelAlignment(tl).textAlign;
                    }
                    if (axis === "y") {
                        if (align === "start") textBaseline = "top";
                        else if (align === "end") textBaseline = "bottom";
                    }
                    var labelSizes = this._getLabelSizes();
                    for(i = 0, ilen = ticks.length; i < ilen; ++i){
                        tick = ticks[i];
                        label = tick.label;
                        var optsAtIndex = optionTicks.setContext(this.getContext(i));
                        pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
                        font = this._resolveTickFontOptions(i);
                        lineHeight = font.lineHeight;
                        lineCount = $6892236ee0bf6afc$export$8b22cf2602fb60ce(label) ? label.length : 1;
                        var halfCount = lineCount / 2;
                        var color1 = optsAtIndex.color;
                        var strokeColor = optsAtIndex.textStrokeColor;
                        var strokeWidth = optsAtIndex.textStrokeWidth;
                        var tickTextAlign = textAlign;
                        if (isHorizontal) {
                            x = pixel;
                            if (textAlign === "inner") {
                                if (i === ilen - 1) tickTextAlign = !this.options.reverse ? "right" : "left";
                                else if (i === 0) tickTextAlign = !this.options.reverse ? "left" : "right";
                                else tickTextAlign = "center";
                            }
                            if (position === "top") {
                                if (crossAlign === "near" || rotation !== 0) textOffset = -lineCount * lineHeight + lineHeight / 2;
                                else if (crossAlign === "center") textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
                                else textOffset = -labelSizes.highest.height + lineHeight / 2;
                            } else {
                                if (crossAlign === "near" || rotation !== 0) textOffset = lineHeight / 2;
                                else if (crossAlign === "center") textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
                                else textOffset = labelSizes.highest.height - lineCount * lineHeight;
                            }
                            if (mirror) textOffset *= -1;
                        } else {
                            y = pixel;
                            textOffset = (1 - lineCount) * lineHeight / 2;
                        }
                        var backdrop = void 0;
                        if (optsAtIndex.showLabelBackdrop) {
                            var labelPadding = $6892236ee0bf6afc$export$96f57966bedc81b4(optsAtIndex.backdropPadding);
                            var height = labelSizes.heights[i];
                            var width = labelSizes.widths[i];
                            var top = y + textOffset - labelPadding.top;
                            var left = x - labelPadding.left;
                            switch(textBaseline){
                                case "middle":
                                    top -= height / 2;
                                    break;
                                case "bottom":
                                    top -= height;
                                    break;
                            }
                            switch(textAlign){
                                case "center":
                                    left -= width / 2;
                                    break;
                                case "right":
                                    left -= width;
                                    break;
                            }
                            backdrop = {
                                left: left,
                                top: top,
                                width: width + labelPadding.width,
                                height: height + labelPadding.height,
                                color: optsAtIndex.backdropColor
                            };
                        }
                        items.push({
                            rotation: rotation,
                            label: label,
                            font: font,
                            color: color1,
                            strokeColor: strokeColor,
                            strokeWidth: strokeWidth,
                            textOffset: textOffset,
                            textAlign: tickTextAlign,
                            textBaseline: textBaseline,
                            translation: [
                                x,
                                y
                            ],
                            backdrop: backdrop
                        });
                    }
                    return items;
                }
            },
            {
                key: "_getXAxisLabelAlignment",
                value: function _getXAxisLabelAlignment() {
                    var _options = this.options, position = _options.position, ticks = _options.ticks;
                    var rotation = -$6892236ee0bf6afc$export$625550452a3fa3ec(this.labelRotation);
                    if (rotation) return position === "top" ? "left" : "right";
                    var align = "center";
                    if (ticks.align === "start") align = "left";
                    else if (ticks.align === "end") align = "right";
                    else if (ticks.align === "inner") align = "inner";
                    return align;
                }
            },
            {
                key: "_getYAxisLabelAlignment",
                value: function _getYAxisLabelAlignment(tl) {
                    var _options = this.options, position = _options.position, _ticks = _options.ticks, crossAlign = _ticks.crossAlign, mirror = _ticks.mirror, padding = _ticks.padding;
                    var labelSizes = this._getLabelSizes();
                    var tickAndPadding = tl + padding;
                    var widest = labelSizes.widest.width;
                    var textAlign;
                    var x;
                    if (position === "left") {
                        if (mirror) {
                            x = this.right + padding;
                            if (crossAlign === "near") textAlign = "left";
                            else if (crossAlign === "center") {
                                textAlign = "center";
                                x += widest / 2;
                            } else {
                                textAlign = "right";
                                x += widest;
                            }
                        } else {
                            x = this.right - tickAndPadding;
                            if (crossAlign === "near") textAlign = "right";
                            else if (crossAlign === "center") {
                                textAlign = "center";
                                x -= widest / 2;
                            } else {
                                textAlign = "left";
                                x = this.left;
                            }
                        }
                    } else if (position === "right") {
                        if (mirror) {
                            x = this.left + padding;
                            if (crossAlign === "near") textAlign = "right";
                            else if (crossAlign === "center") {
                                textAlign = "center";
                                x -= widest / 2;
                            } else {
                                textAlign = "left";
                                x -= widest;
                            }
                        } else {
                            x = this.left + tickAndPadding;
                            if (crossAlign === "near") textAlign = "left";
                            else if (crossAlign === "center") {
                                textAlign = "center";
                                x += widest / 2;
                            } else {
                                textAlign = "right";
                                x = this.right;
                            }
                        }
                    } else textAlign = "right";
                    return {
                        textAlign: textAlign,
                        x: x
                    };
                }
            },
            {
                key: "_computeLabelArea",
                value: function _computeLabelArea() {
                    if (this.options.ticks.mirror) return;
                    var chart = this.chart;
                    var position = this.options.position;
                    if (position === "left" || position === "right") return {
                        top: 0,
                        left: this.left,
                        bottom: chart.height,
                        right: this.right
                    };
                    if (position === "top" || position === "bottom") return {
                        top: this.top,
                        left: 0,
                        bottom: this.bottom,
                        right: chart.width
                    };
                }
            },
            {
                key: "drawBackground",
                value: function drawBackground() {
                    var ref = this, ctx = ref.ctx, backgroundColor = ref.options.backgroundColor, left = ref.left, top = ref.top, width = ref.width, height = ref.height;
                    if (backgroundColor) {
                        ctx.save();
                        ctx.fillStyle = backgroundColor;
                        ctx.fillRect(left, top, width, height);
                        ctx.restore();
                    }
                }
            },
            {
                key: "getLineWidthForValue",
                value: function getLineWidthForValue(value) {
                    var grid = this.options.grid;
                    if (!this._isVisible() || !grid.display) return 0;
                    var ticks = this.ticks;
                    var index48 = ticks.findIndex(function(t) {
                        return t.value === value;
                    });
                    if (index48 >= 0) {
                        var opts = grid.setContext(this.getContext(index48));
                        return opts.lineWidth;
                    }
                    return 0;
                }
            },
            {
                key: "drawGrid",
                value: function drawGrid(chartArea) {
                    var grid = this.options.grid;
                    var ctx = this.ctx;
                    var items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
                    var i, ilen;
                    var drawLine = function(p1, p2, style) {
                        if (!style.width || !style.color) return;
                        ctx.save();
                        ctx.lineWidth = style.width;
                        ctx.strokeStyle = style.color;
                        ctx.setLineDash(style.borderDash || []);
                        ctx.lineDashOffset = style.borderDashOffset;
                        ctx.beginPath();
                        ctx.moveTo(p1.x, p1.y);
                        ctx.lineTo(p2.x, p2.y);
                        ctx.stroke();
                        ctx.restore();
                    };
                    if (grid.display) for(i = 0, ilen = items.length; i < ilen; ++i){
                        var item = items[i];
                        if (grid.drawOnChartArea) drawLine({
                            x: item.x1,
                            y: item.y1
                        }, {
                            x: item.x2,
                            y: item.y2
                        }, item);
                        if (grid.drawTicks) drawLine({
                            x: item.tx1,
                            y: item.ty1
                        }, {
                            x: item.tx2,
                            y: item.ty2
                        }, {
                            color: item.tickColor,
                            width: item.tickWidth,
                            borderDash: item.tickBorderDash,
                            borderDashOffset: item.tickBorderDashOffset
                        });
                    }
                }
            },
            {
                key: "drawBorder",
                value: function drawBorder() {
                    var ref = this, chart = ref.chart, ctx = ref.ctx, grid = ref.options.grid;
                    var borderOpts = grid.setContext(this.getContext());
                    var axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;
                    if (!axisWidth) return;
                    var lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
                    var borderValue = this._borderValue;
                    var x1, x2, y1, y2;
                    if (this.isHorizontal()) {
                        x1 = $6892236ee0bf6afc$export$71cec2538cb2c617(chart, this.left, axisWidth) - axisWidth / 2;
                        x2 = $6892236ee0bf6afc$export$71cec2538cb2c617(chart, this.right, lastLineWidth) + lastLineWidth / 2;
                        y1 = y2 = borderValue;
                    } else {
                        y1 = $6892236ee0bf6afc$export$71cec2538cb2c617(chart, this.top, axisWidth) - axisWidth / 2;
                        y2 = $6892236ee0bf6afc$export$71cec2538cb2c617(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
                        x1 = x2 = borderValue;
                    }
                    ctx.save();
                    ctx.lineWidth = borderOpts.borderWidth;
                    ctx.strokeStyle = borderOpts.borderColor;
                    ctx.beginPath();
                    ctx.moveTo(x1, y1);
                    ctx.lineTo(x2, y2);
                    ctx.stroke();
                    ctx.restore();
                }
            },
            {
                key: "drawLabels",
                value: function drawLabels(chartArea) {
                    var optionTicks = this.options.ticks;
                    if (!optionTicks.display) return;
                    var ctx = this.ctx;
                    var area = this._computeLabelArea();
                    if (area) $6892236ee0bf6afc$export$78acf4525d8a74c4(ctx, area);
                    var items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
                    var i, ilen;
                    for(i = 0, ilen = items.length; i < ilen; ++i){
                        var item = items[i];
                        var tickFont = item.font;
                        var label = item.label;
                        if (item.backdrop) {
                            ctx.fillStyle = item.backdrop.color;
                            ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);
                        }
                        var y = item.textOffset;
                        $6892236ee0bf6afc$export$8743009a87fcb00f(ctx, label, 0, y, tickFont, item);
                    }
                    if (area) $6892236ee0bf6afc$export$dc98b0b04f4c7758(ctx);
                }
            },
            {
                key: "drawTitle",
                value: function drawTitle() {
                    var ref = this, ctx = ref.ctx, _options = ref.options, position = _options.position, title = _options.title, reverse = _options.reverse;
                    if (!title.display) return;
                    var font = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(title.font);
                    var padding = $6892236ee0bf6afc$export$96f57966bedc81b4(title.padding);
                    var align = title.align;
                    var offset = font.lineHeight / 2;
                    if (position === "bottom" || position === "center" || $6892236ee0bf6afc$export$23f2a1d2818174ef(position)) {
                        offset += padding.bottom;
                        if ($6892236ee0bf6afc$export$8b22cf2602fb60ce(title.text)) offset += font.lineHeight * (title.text.length - 1);
                    } else offset += padding.top;
                    var ref5 = $68fbc1daad5cf8b5$var$titleArgs(this, offset, position, align), titleX = ref5.titleX, titleY = ref5.titleY, maxWidth = ref5.maxWidth, rotation = ref5.rotation;
                    $6892236ee0bf6afc$export$8743009a87fcb00f(ctx, title.text, 0, 0, font, {
                        color: title.color,
                        maxWidth: maxWidth,
                        rotation: rotation,
                        textAlign: $68fbc1daad5cf8b5$var$titleAlign(align, position, reverse),
                        textBaseline: "middle",
                        translation: [
                            titleX,
                            titleY
                        ]
                    });
                }
            },
            {
                key: "draw",
                value: function draw2(chartArea) {
                    if (!this._isVisible()) return;
                    this.drawBackground();
                    this.drawGrid(chartArea);
                    this.drawBorder();
                    this.drawTitle();
                    this.drawLabels(chartArea);
                }
            },
            {
                key: "_layers",
                value: function _layers() {
                    var _this = this;
                    var opts = this.options;
                    var tz = opts.ticks && opts.ticks.z || 0;
                    var gz = $6892236ee0bf6afc$export$90a7f3efeed30595(opts.grid && opts.grid.z, -1);
                    if (!this._isVisible() || this.draw !== Scale.prototype.draw) return [
                        {
                            z: tz,
                            draw: function(chartArea) {
                                _this.draw(chartArea);
                            }
                        }
                    ];
                    return [
                        {
                            z: gz,
                            draw: function(chartArea) {
                                _this.drawBackground();
                                _this.drawGrid(chartArea);
                                _this.drawTitle();
                            }
                        },
                        {
                            z: gz + 1,
                            draw: function() {
                                _this.drawBorder();
                            }
                        },
                        {
                            z: tz,
                            draw: function(chartArea) {
                                _this.drawLabels(chartArea);
                            }
                        }
                    ];
                }
            },
            {
                key: "getMatchingVisibleMetas",
                value: function getMatchingVisibleMetas(type) {
                    var metas = this.chart.getSortedVisibleDatasetMetas();
                    var axisID = this.axis + "AxisID";
                    var result = [];
                    var i, ilen;
                    for(i = 0, ilen = metas.length; i < ilen; ++i){
                        var meta = metas[i];
                        if (meta[axisID] === this.id && (!type || meta.type === type)) result.push(meta);
                    }
                    return result;
                }
            },
            {
                key: "_resolveTickFontOptions",
                value: function _resolveTickFontOptions(index49) {
                    var opts = this.options.ticks.setContext(this.getContext(index49));
                    return $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(opts.font);
                }
            },
            {
                key: "_maxDigits",
                value: function _maxDigits() {
                    var fontSize = this._resolveTickFontOptions(0).lineHeight;
                    return (this.isHorizontal() ? this.width : this.height) / fontSize;
                }
            }
        ]);
        return Scale;
    }(/*@__PURE__*/ $parcel$interopDefault($16755fe9f4f0f745$exports)($68fbc1daad5cf8b5$export$db77ccec0bb4ccac));
    var $68fbc1daad5cf8b5$var$TypedRegistry = /*#__PURE__*/ function() {
        function TypedRegistry(type, scope, override) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, TypedRegistry);
            this.type = type;
            this.scope = scope;
            this.override = override;
            this.items = Object.create(null);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(TypedRegistry, [
            {
                key: "isForType",
                value: function isForType(type) {
                    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
                }
            },
            {
                key: "register",
                value: function register(item) {
                    var proto = Object.getPrototypeOf(item);
                    var parentScope;
                    if ($68fbc1daad5cf8b5$var$isIChartComponent(proto)) parentScope = this.register(proto);
                    var items = this.items;
                    var id = item.id;
                    var scope = this.scope + "." + id;
                    if (!id) throw new Error("class does not have id: " + item);
                    if (id in items) return scope;
                    items[id] = item;
                    $68fbc1daad5cf8b5$var$registerDefaults(item, scope, parentScope);
                    if (this.override) $6892236ee0bf6afc$export$4368d992c4eafac0.override(item.id, item.overrides);
                    return scope;
                }
            },
            {
                key: "get",
                value: function get(id) {
                    return this.items[id];
                }
            },
            {
                key: "unregister",
                value: function unregister(item) {
                    var items = this.items;
                    var id = item.id;
                    var scope = this.scope;
                    if (id in items) delete items[id];
                    if (scope && id in $6892236ee0bf6afc$export$4368d992c4eafac0[scope]) {
                        delete $6892236ee0bf6afc$export$4368d992c4eafac0[scope][id];
                        if (this.override) delete $6892236ee0bf6afc$export$ce26c07117d59d6a[id];
                    }
                }
            }
        ]);
        return TypedRegistry;
    }();
    function $68fbc1daad5cf8b5$var$registerDefaults(item, scope, parentScope) {
        var itemDefaults = $6892236ee0bf6afc$export$6559d589eb85fbb6(Object.create(null), [
            parentScope ? $6892236ee0bf6afc$export$4368d992c4eafac0.get(parentScope) : {
            },
            $6892236ee0bf6afc$export$4368d992c4eafac0.get(scope),
            item.defaults
        ]);
        $6892236ee0bf6afc$export$4368d992c4eafac0.set(scope, itemDefaults);
        if (item.defaultRoutes) $68fbc1daad5cf8b5$var$routeDefaults(scope, item.defaultRoutes);
        if (item.descriptors) $6892236ee0bf6afc$export$4368d992c4eafac0.describe(scope, item.descriptors);
    }
    function $68fbc1daad5cf8b5$var$routeDefaults(scope, routes) {
        Object.keys(routes).forEach(function(property) {
            var propertyParts = property.split(".");
            var sourceName = propertyParts.pop();
            var sourceScope = [
                scope
            ].concat(propertyParts).join(".");
            var parts = routes[property].split(".");
            var targetName = parts.pop();
            var targetScope = parts.join(".");
            $6892236ee0bf6afc$export$4368d992c4eafac0.route(sourceScope, sourceName, targetScope, targetName);
        });
    }
    function $68fbc1daad5cf8b5$var$isIChartComponent(proto) {
        return "id" in proto && "defaults" in proto;
    }
    var $68fbc1daad5cf8b5$var$Registry = /*#__PURE__*/ function() {
        function Registry() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Registry);
            this.controllers = new $68fbc1daad5cf8b5$var$TypedRegistry($68fbc1daad5cf8b5$export$75572ec5c55b4048, "datasets", true);
            this.elements = new $68fbc1daad5cf8b5$var$TypedRegistry($68fbc1daad5cf8b5$export$db77ccec0bb4ccac, "elements");
            this.plugins = new $68fbc1daad5cf8b5$var$TypedRegistry(Object, "plugins");
            this.scales = new $68fbc1daad5cf8b5$var$TypedRegistry($68fbc1daad5cf8b5$export$d60cfc58d3c358b6, "scales");
            this._typedRegistries = [
                this.controllers,
                this.scales,
                this.elements
            ];
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Registry, [
            {
                key: "add",
                value: function add() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    this._each("register", args);
                }
            },
            {
                key: "remove",
                value: function remove() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    this._each("unregister", args);
                }
            },
            {
                key: "addControllers",
                value: function addControllers() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    this._each("register", args, this.controllers);
                }
            },
            {
                key: "addElements",
                value: function addElements() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    this._each("register", args, this.elements);
                }
            },
            {
                key: "addPlugins",
                value: function addPlugins() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    this._each("register", args, this.plugins);
                }
            },
            {
                key: "addScales",
                value: function addScales() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    this._each("register", args, this.scales);
                }
            },
            {
                key: "getController",
                value: function getController(id) {
                    return this._get(id, this.controllers, "controller");
                }
            },
            {
                key: "getElement",
                value: function getElement(id) {
                    return this._get(id, this.elements, "element");
                }
            },
            {
                key: "getPlugin",
                value: function getPlugin(id) {
                    return this._get(id, this.plugins, "plugin");
                }
            },
            {
                key: "getScale",
                value: function getScale(id) {
                    return this._get(id, this.scales, "scale");
                }
            },
            {
                key: "removeControllers",
                value: function removeControllers() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    this._each("unregister", args, this.controllers);
                }
            },
            {
                key: "removeElements",
                value: function removeElements() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    this._each("unregister", args, this.elements);
                }
            },
            {
                key: "removePlugins",
                value: function removePlugins() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    this._each("unregister", args, this.plugins);
                }
            },
            {
                key: "removeScales",
                value: function removeScales() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    this._each("unregister", args, this.scales);
                }
            },
            {
                key: "_each",
                value: function _each(method, args, typedRegistry) {
                    var _this = this;
                    /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(args).forEach(function(arg) {
                        var _this1 = _this;
                        var reg = typedRegistry || _this._getRegistryForType(arg);
                        if (typedRegistry || reg.isForType(arg) || reg === _this.plugins && arg.id) _this._exec(method, reg, arg);
                        else $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(arg, function(item) {
                            var itemReg = typedRegistry || _this1._getRegistryForType(item);
                            _this1._exec(method, itemReg, item);
                        });
                    });
                }
            },
            {
                key: "_exec",
                value: function _exec(method, registry1, component) {
                    var camelMethod = $6892236ee0bf6afc$export$efca4cbe5dd06740(method);
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(component["before" + camelMethod], [], component);
                    registry1[method](component);
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(component["after" + camelMethod], [], component);
                }
            },
            {
                key: "_getRegistryForType",
                value: function _getRegistryForType(type) {
                    for(var i = 0; i < this._typedRegistries.length; i++){
                        var reg = this._typedRegistries[i];
                        if (reg.isForType(type)) return reg;
                    }
                    return this.plugins;
                }
            },
            {
                key: "_get",
                value: function _get(id, typedRegistry, type) {
                    var item = typedRegistry.get(id);
                    if (item === undefined) throw new Error('"' + id + '" is not a registered ' + type + ".");
                    return item;
                }
            }
        ]);
        return Registry;
    }();
    var $68fbc1daad5cf8b5$export$4bb7493d241fd8a5 = new $68fbc1daad5cf8b5$var$Registry();
    var $68fbc1daad5cf8b5$var$PluginService = /*#__PURE__*/ function() {
        function PluginService() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, PluginService);
            this._init = [];
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(PluginService, [
            {
                key: "notify",
                value: function notify(chart, hook, args, filter) {
                    if (hook === "beforeInit") {
                        this._init = this._createDescriptors(chart, true);
                        this._notify(this._init, chart, "install");
                    }
                    var descriptors1 = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
                    var result = this._notify(descriptors1, chart, hook, args);
                    if (hook === "afterDestroy") {
                        this._notify(descriptors1, chart, "stop");
                        this._notify(this._init, chart, "uninstall");
                    }
                    return result;
                }
            },
            {
                key: "_notify",
                value: function _notify(descriptors2, chart, hook, args) {
                    args = args || {
                    };
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = descriptors2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var descriptor = _step.value;
                            var plugin = descriptor.plugin;
                            var method = plugin[hook];
                            var params = [
                                chart,
                                args,
                                descriptor.options
                            ];
                            if ($6892236ee0bf6afc$export$3722cfe417b6ed86(method, params, plugin) === false && args.cancelable) return false;
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                        } finally{
                            if (_didIteratorError) throw _iteratorError;
                        }
                    }
                    return true;
                }
            },
            {
                key: "invalidate",
                value: function invalidate() {
                    if (!$6892236ee0bf6afc$export$342063e11d6c3cad(this._cache)) {
                        this._oldCache = this._cache;
                        this._cache = undefined;
                    }
                }
            },
            {
                key: "_descriptors",
                value: function _descriptors(chart) {
                    if (this._cache) return this._cache;
                    var descriptors3 = this._cache = this._createDescriptors(chart);
                    this._notifyStateChanges(chart);
                    return descriptors3;
                }
            },
            {
                key: "_createDescriptors",
                value: function _createDescriptors(chart, all) {
                    var config = chart && chart.config;
                    var options = $6892236ee0bf6afc$export$90a7f3efeed30595(config.options && config.options.plugins, {
                    });
                    var plugins1 = $68fbc1daad5cf8b5$var$allPlugins(config);
                    return options === false && !all ? [] : $68fbc1daad5cf8b5$var$createDescriptors(chart, plugins1, options, all);
                }
            },
            {
                key: "_notifyStateChanges",
                value: function _notifyStateChanges(chart) {
                    var previousDescriptors = this._oldCache || [];
                    var descriptors4 = this._cache;
                    var diff = function(a, b) {
                        return a.filter(function(x) {
                            return !b.some(function(y) {
                                return x.plugin.id === y.plugin.id;
                            });
                        });
                    };
                    this._notify(diff(previousDescriptors, descriptors4), chart, "stop");
                    this._notify(diff(descriptors4, previousDescriptors), chart, "start");
                }
            }
        ]);
        return PluginService;
    }();
    function $68fbc1daad5cf8b5$var$allPlugins(config) {
        var plugins2 = [];
        var keys = Object.keys($68fbc1daad5cf8b5$export$4bb7493d241fd8a5.plugins.items);
        for(var i = 0; i < keys.length; i++)plugins2.push($68fbc1daad5cf8b5$export$4bb7493d241fd8a5.getPlugin(keys[i]));
        var local = config.plugins || [];
        for(var i3 = 0; i3 < local.length; i3++){
            var plugin = local[i3];
            if (plugins2.indexOf(plugin) === -1) plugins2.push(plugin);
        }
        return plugins2;
    }
    function $68fbc1daad5cf8b5$var$getOpts(options, all) {
        if (!all && options === false) return null;
        if (options === true) return {
        };
        return options;
    }
    function $68fbc1daad5cf8b5$var$createDescriptors(chart, plugins3, options, all) {
        var result = [];
        var context = chart.getContext();
        for(var i = 0; i < plugins3.length; i++){
            var plugin = plugins3[i];
            var id = plugin.id;
            var opts = $68fbc1daad5cf8b5$var$getOpts(options[id], all);
            if (opts === null) continue;
            result.push({
                plugin: plugin,
                options: $68fbc1daad5cf8b5$var$pluginOpts(chart.config, plugin, opts, context)
            });
        }
        return result;
    }
    function $68fbc1daad5cf8b5$var$pluginOpts(config, plugin, opts, context) {
        var keys = config.pluginScopeKeys(plugin);
        var scopes = config.getOptionScopes(opts, keys);
        return config.createResolver(scopes, context, [
            ""
        ], {
            scriptable: false,
            indexable: false,
            allKeys: true
        });
    }
    function $68fbc1daad5cf8b5$var$getIndexAxis(type, options) {
        var datasetDefaults = $6892236ee0bf6afc$export$4368d992c4eafac0.datasets[type] || {
        };
        var datasetOptions = (options.datasets || {
        })[type] || {
        };
        return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || "x";
    }
    function $68fbc1daad5cf8b5$var$getAxisFromDefaultScaleID(id, indexAxis) {
        var axis = id;
        if (id === "_index_") axis = indexAxis;
        else if (id === "_value_") axis = indexAxis === "x" ? "y" : "x";
        return axis;
    }
    function $68fbc1daad5cf8b5$var$getDefaultScaleIDFromAxis(axis, indexAxis) {
        return axis === indexAxis ? "_index_" : "_value_";
    }
    function $68fbc1daad5cf8b5$var$axisFromPosition(position) {
        if (position === "top" || position === "bottom") return "x";
        if (position === "left" || position === "right") return "y";
    }
    function $68fbc1daad5cf8b5$var$determineAxis(id, scaleOptions) {
        if (id === "x" || id === "y") return id;
        return scaleOptions.axis || $68fbc1daad5cf8b5$var$axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();
    }
    function $68fbc1daad5cf8b5$var$mergeScaleConfig(config, options) {
        var chartDefaults = $6892236ee0bf6afc$export$ce26c07117d59d6a[config.type] || {
            scales: {
            }
        };
        var configScales = options.scales || {
        };
        var chartIndexAxis = $68fbc1daad5cf8b5$var$getIndexAxis(config.type, options);
        var firstIDs = Object.create(null);
        var scales3 = Object.create(null);
        Object.keys(configScales).forEach(function(id) {
            var scaleConf = configScales[id];
            if (!$6892236ee0bf6afc$export$23f2a1d2818174ef(scaleConf)) return console.error("Invalid scale configuration for scale: ".concat(id));
            if (scaleConf._proxy) return console.warn("Ignoring resolver passed as options for scale: ".concat(id));
            var axis = $68fbc1daad5cf8b5$var$determineAxis(id, scaleConf);
            var defaultId = $68fbc1daad5cf8b5$var$getDefaultScaleIDFromAxis(axis, chartIndexAxis);
            var defaultScaleOptions = chartDefaults.scales || {
            };
            firstIDs[axis] = firstIDs[axis] || id;
            scales3[id] = $6892236ee0bf6afc$export$7910e0436ed8d1de(Object.create(null), [
                {
                    axis: axis
                },
                scaleConf,
                defaultScaleOptions[axis],
                defaultScaleOptions[defaultId]
            ]);
        });
        config.data.datasets.forEach(function(dataset) {
            var type = dataset.type || config.type;
            var indexAxis = dataset.indexAxis || $68fbc1daad5cf8b5$var$getIndexAxis(type, options);
            var datasetDefaults = $6892236ee0bf6afc$export$ce26c07117d59d6a[type] || {
            };
            var defaultScaleOptions = datasetDefaults.scales || {
            };
            Object.keys(defaultScaleOptions).forEach(function(defaultID) {
                var axis = $68fbc1daad5cf8b5$var$getAxisFromDefaultScaleID(defaultID, indexAxis);
                var id = dataset[axis + "AxisID"] || firstIDs[axis] || axis;
                scales3[id] = scales3[id] || Object.create(null);
                $6892236ee0bf6afc$export$7910e0436ed8d1de(scales3[id], [
                    {
                        axis: axis
                    },
                    configScales[id],
                    defaultScaleOptions[defaultID]
                ]);
            });
        });
        Object.keys(scales3).forEach(function(key) {
            var scale = scales3[key];
            $6892236ee0bf6afc$export$7910e0436ed8d1de(scale, [
                $6892236ee0bf6afc$export$4368d992c4eafac0.scales[scale.type],
                $6892236ee0bf6afc$export$4368d992c4eafac0.scale
            ]);
        });
        return scales3;
    }
    function $68fbc1daad5cf8b5$var$initOptions(config) {
        var options = config.options || (config.options = {
        });
        options.plugins = $6892236ee0bf6afc$export$90a7f3efeed30595(options.plugins, {
        });
        options.scales = $68fbc1daad5cf8b5$var$mergeScaleConfig(config, options);
    }
    function $68fbc1daad5cf8b5$var$initData(data) {
        data = data || {
        };
        data.datasets = data.datasets || [];
        data.labels = data.labels || [];
        return data;
    }
    function $68fbc1daad5cf8b5$var$initConfig(config) {
        config = config || {
        };
        config.data = $68fbc1daad5cf8b5$var$initData(config.data);
        $68fbc1daad5cf8b5$var$initOptions(config);
        return config;
    }
    var $68fbc1daad5cf8b5$var$keyCache = new Map();
    var $68fbc1daad5cf8b5$var$keysCached = new Set();
    function $68fbc1daad5cf8b5$var$cachedKeys(cacheKey, generate) {
        var keys = $68fbc1daad5cf8b5$var$keyCache.get(cacheKey);
        if (!keys) {
            keys = generate();
            $68fbc1daad5cf8b5$var$keyCache.set(cacheKey, keys);
            $68fbc1daad5cf8b5$var$keysCached.add(keys);
        }
        return keys;
    }
    var $68fbc1daad5cf8b5$var$addIfFound = function(set, obj, key) {
        var opts = $6892236ee0bf6afc$export$2d1720544b23b823(obj, key);
        if (opts !== undefined) set.add(opts);
    };
    var $68fbc1daad5cf8b5$var$Config = /*#__PURE__*/ function() {
        function Config(config) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Config);
            this._config = $68fbc1daad5cf8b5$var$initConfig(config);
            this._scopeCache = new Map();
            this._resolverCache = new Map();
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Config, [
            {
                key: "platform",
                get: function get() {
                    return this._config.platform;
                }
            },
            {
                key: "type",
                get: function get() {
                    return this._config.type;
                },
                set: function set(type) {
                    this._config.type = type;
                }
            },
            {
                key: "data",
                get: function get() {
                    return this._config.data;
                },
                set: function set(data) {
                    this._config.data = $68fbc1daad5cf8b5$var$initData(data);
                }
            },
            {
                key: "options",
                get: function get() {
                    return this._config.options;
                },
                set: function set(options) {
                    this._config.options = options;
                }
            },
            {
                key: "plugins",
                get: function get() {
                    return this._config.plugins;
                }
            },
            {
                key: "update",
                value: function update() {
                    var config = this._config;
                    this.clearCache();
                    $68fbc1daad5cf8b5$var$initOptions(config);
                }
            },
            {
                key: "clearCache",
                value: function clearCache() {
                    this._scopeCache.clear();
                    this._resolverCache.clear();
                }
            },
            {
                key: "datasetScopeKeys",
                value: function datasetScopeKeys(datasetType) {
                    return $68fbc1daad5cf8b5$var$cachedKeys(datasetType, function() {
                        return [
                            [
                                "datasets.".concat(datasetType),
                                ""
                            ]
                        ];
                    });
                }
            },
            {
                key: "datasetAnimationScopeKeys",
                value: function datasetAnimationScopeKeys(datasetType, transition) {
                    return $68fbc1daad5cf8b5$var$cachedKeys("".concat(datasetType, ".transition.").concat(transition), function() {
                        return [
                            [
                                "datasets.".concat(datasetType, ".transitions.").concat(transition),
                                "transitions.".concat(transition), 
                            ],
                            [
                                "datasets.".concat(datasetType),
                                ""
                            ]
                        ];
                    });
                }
            },
            {
                key: "datasetElementScopeKeys",
                value: function datasetElementScopeKeys(datasetType, elementType) {
                    return $68fbc1daad5cf8b5$var$cachedKeys("".concat(datasetType, "-").concat(elementType), function() {
                        return [
                            [
                                "datasets.".concat(datasetType, ".elements.").concat(elementType),
                                "datasets.".concat(datasetType),
                                "elements.".concat(elementType),
                                ""
                            ]
                        ];
                    });
                }
            },
            {
                key: "pluginScopeKeys",
                value: function pluginScopeKeys(plugin) {
                    var id = plugin.id;
                    var type = this.type;
                    return $68fbc1daad5cf8b5$var$cachedKeys("".concat(type, "-plugin-").concat(id), function() {
                        return [
                            [
                                "plugins.".concat(id), 
                            ].concat(/*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(plugin.additionalOptionScopes || []))
                        ];
                    });
                }
            },
            {
                key: "_cachedScopes",
                value: function _cachedScopes(mainScope, resetCache) {
                    var _scopeCache = this._scopeCache;
                    var cache = _scopeCache.get(mainScope);
                    if (!cache || resetCache) {
                        cache = new Map();
                        _scopeCache.set(mainScope, cache);
                    }
                    return cache;
                }
            },
            {
                key: "getOptionScopes",
                value: function getOptionScopes(mainScope, keyLists, resetCache) {
                    var ref = this, options = ref.options, type = ref.type;
                    var cache = this._cachedScopes(mainScope, resetCache);
                    var cached = cache.get(keyLists);
                    if (cached) return cached;
                    var scopes = new Set();
                    keyLists.forEach(function(keys) {
                        if (mainScope) {
                            scopes.add(mainScope);
                            keys.forEach(function(key) {
                                return $68fbc1daad5cf8b5$var$addIfFound(scopes, mainScope, key);
                            });
                        }
                        keys.forEach(function(key) {
                            return $68fbc1daad5cf8b5$var$addIfFound(scopes, options, key);
                        });
                        keys.forEach(function(key) {
                            return $68fbc1daad5cf8b5$var$addIfFound(scopes, $6892236ee0bf6afc$export$ce26c07117d59d6a[type] || {
                            }, key);
                        });
                        keys.forEach(function(key) {
                            return $68fbc1daad5cf8b5$var$addIfFound(scopes, $6892236ee0bf6afc$export$4368d992c4eafac0, key);
                        });
                        keys.forEach(function(key) {
                            return $68fbc1daad5cf8b5$var$addIfFound(scopes, $6892236ee0bf6afc$export$a8550f7dbe79f93a, key);
                        });
                    });
                    var array = Array.from(scopes);
                    if (array.length === 0) array.push(Object.create(null));
                    if ($68fbc1daad5cf8b5$var$keysCached.has(keyLists)) cache.set(keyLists, array);
                    return array;
                }
            },
            {
                key: "chartOptionScopes",
                value: function chartOptionScopes() {
                    var ref = this, options = ref.options, type = ref.type;
                    return [
                        options,
                        $6892236ee0bf6afc$export$ce26c07117d59d6a[type] || {
                        },
                        $6892236ee0bf6afc$export$4368d992c4eafac0.datasets[type] || {
                        },
                        {
                            type: type
                        },
                        $6892236ee0bf6afc$export$4368d992c4eafac0,
                        $6892236ee0bf6afc$export$a8550f7dbe79f93a
                    ];
                }
            },
            {
                key: "resolveNamedOptions",
                value: function resolveNamedOptions(scopes, names, context) {
                    var prefixes = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [
                        ""
                    ];
                    var result = {
                        $shared: true
                    };
                    var ref = $68fbc1daad5cf8b5$var$getResolver(this._resolverCache, scopes, prefixes), resolver = ref.resolver, subPrefixes = ref.subPrefixes;
                    var options = resolver;
                    if ($68fbc1daad5cf8b5$var$needContext(resolver, names)) {
                        result.$shared = false;
                        context = $6892236ee0bf6afc$export$2e2af4578d910ddf(context) ? context() : context;
                        var subResolver = this.createResolver(scopes, context, subPrefixes);
                        options = $6892236ee0bf6afc$export$a93c5207d687da10(resolver, context, subResolver);
                    }
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var prop = _step.value;
                            result[prop] = options[prop];
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                        } finally{
                            if (_didIteratorError) throw _iteratorError;
                        }
                    }
                    return result;
                }
            },
            {
                key: "createResolver",
                value: function createResolver(scopes, context) {
                    var prefixes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [
                        ""
                    ], descriptorDefaults = arguments.length > 3 ? arguments[3] : void 0;
                    var resolver = $68fbc1daad5cf8b5$var$getResolver(this._resolverCache, scopes, prefixes).resolver;
                    return $6892236ee0bf6afc$export$23f2a1d2818174ef(context) ? $6892236ee0bf6afc$export$a93c5207d687da10(resolver, context, undefined, descriptorDefaults) : resolver;
                }
            }
        ]);
        return Config;
    }();
    function $68fbc1daad5cf8b5$var$getResolver(resolverCache, scopes, prefixes) {
        var cache = resolverCache.get(scopes);
        if (!cache) {
            cache = new Map();
            resolverCache.set(scopes, cache);
        }
        var cacheKey = prefixes.join();
        var cached = cache.get(cacheKey);
        if (!cached) {
            var resolver = $6892236ee0bf6afc$export$c3950d9923825c02(scopes, prefixes);
            cached = {
                resolver: resolver,
                subPrefixes: prefixes.filter(function(p) {
                    return !p.toLowerCase().includes("hover");
                })
            };
            cache.set(cacheKey, cached);
        }
        return cached;
    }
    var $68fbc1daad5cf8b5$var$hasFunction = function(value) {
        return $6892236ee0bf6afc$export$23f2a1d2818174ef(value) && Object.getOwnPropertyNames(value).reduce(function(acc, key) {
            return acc || $6892236ee0bf6afc$export$2e2af4578d910ddf(value[key]);
        }, false);
    };
    function $68fbc1daad5cf8b5$var$needContext(proxy, names) {
        var ref = $6892236ee0bf6afc$export$a9c996f45e5784d0(proxy), isScriptable = ref.isScriptable, isIndexable = ref.isIndexable;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var prop = _step.value;
                var scriptable = isScriptable(prop);
                var indexable = isIndexable(prop);
                var value = (indexable || scriptable) && proxy[prop];
                if (scriptable && ($6892236ee0bf6afc$export$2e2af4578d910ddf(value) || $68fbc1daad5cf8b5$var$hasFunction(value)) || indexable && $6892236ee0bf6afc$export$8b22cf2602fb60ce(value)) return true;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
        return false;
    }
    var $68fbc1daad5cf8b5$var$version = "3.8.0";
    var $68fbc1daad5cf8b5$var$KNOWN_POSITIONS = [
        "top",
        "bottom",
        "left",
        "right",
        "chartArea"
    ];
    function $68fbc1daad5cf8b5$var$positionIsHorizontal(position, axis) {
        return position === "top" || position === "bottom" || $68fbc1daad5cf8b5$var$KNOWN_POSITIONS.indexOf(position) === -1 && axis === "x";
    }
    function $68fbc1daad5cf8b5$var$compare2Level(l1, l2) {
        return function(a, b) {
            return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
        };
    }
    function $68fbc1daad5cf8b5$var$onAnimationsComplete(context) {
        var chart = context.chart;
        var animationOptions1 = chart.options.animation;
        chart.notifyPlugins("afterRender");
        $6892236ee0bf6afc$export$3722cfe417b6ed86(animationOptions1 && animationOptions1.onComplete, [
            context
        ], chart);
    }
    function $68fbc1daad5cf8b5$var$onAnimationProgress(context) {
        var chart = context.chart;
        var animationOptions2 = chart.options.animation;
        $6892236ee0bf6afc$export$3722cfe417b6ed86(animationOptions2 && animationOptions2.onProgress, [
            context
        ], chart);
    }
    function $68fbc1daad5cf8b5$var$getCanvas(item) {
        if ($6892236ee0bf6afc$export$61196ced6d74a310() && typeof item === "string") item = document.getElementById(item);
        else if (item && item.length) item = item[0];
        if (item && item.canvas) item = item.canvas;
        return item;
    }
    var $68fbc1daad5cf8b5$var$instances = {
    };
    var $68fbc1daad5cf8b5$var$getChart = function(key) {
        var canvas = $68fbc1daad5cf8b5$var$getCanvas(key);
        return Object.values($68fbc1daad5cf8b5$var$instances).filter(function(c) {
            return c.canvas === canvas;
        }).pop();
    };
    function $68fbc1daad5cf8b5$var$moveNumericKeys(obj, start, move) {
        var keys = Object.keys(obj);
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var key = _step.value;
                var intKey = +key;
                if (intKey >= start) {
                    var value = obj[key];
                    delete obj[key];
                    if (move > 0 || intKey > start) obj[intKey + move] = value;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
    }
    function $68fbc1daad5cf8b5$var$determineLastEvent(e, lastEvent, inChartArea, isClick) {
        if (!inChartArea || e.type === "mouseout") return null;
        if (isClick) return lastEvent;
        return e;
    }
    var $68fbc1daad5cf8b5$export$acaa6426d77a227e = /*#__PURE__*/ function() {
        function Chart(item, userConfig) {
            var _this = this;
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Chart);
            var config = this.config = new $68fbc1daad5cf8b5$var$Config(userConfig);
            var initialCanvas = $68fbc1daad5cf8b5$var$getCanvas(item);
            var existingChart = $68fbc1daad5cf8b5$var$getChart(initialCanvas);
            if (existingChart) throw new Error("Canvas is already in use. Chart with ID '" + existingChart.id + "'" + " must be destroyed before the canvas can be reused.");
            var options = config.createResolver(config.chartOptionScopes(), this.getContext());
            this.platform = new (config.platform || $68fbc1daad5cf8b5$export$72cd9e67b1b784f9(initialCanvas))();
            this.platform.updateConfig(config);
            var context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
            var canvas = context && context.canvas;
            var height = canvas && canvas.height;
            var width = canvas && canvas.width;
            this.id = $6892236ee0bf6afc$export$555508cbc6add439();
            this.ctx = context;
            this.canvas = canvas;
            this.width = width;
            this.height = height;
            this._options = options;
            this._aspectRatio = this.aspectRatio;
            this._layers = [];
            this._metasets = [];
            this._stacks = undefined;
            this.boxes = [];
            this.currentDevicePixelRatio = undefined;
            this.chartArea = undefined;
            this._active = [];
            this._lastEvent = undefined;
            this._listeners = {
            };
            this._responsiveListeners = undefined;
            this._sortedMetasets = [];
            this.scales = {
            };
            this._plugins = new $68fbc1daad5cf8b5$var$PluginService();
            this.$proxies = {
            };
            this._hiddenIndices = {
            };
            this.attached = false;
            this._animationsDisabled = undefined;
            this.$context = undefined;
            this._doResize = $6892236ee0bf6afc$export$2219238a014317b0(function(mode) {
                return _this.update(mode);
            }, options.resizeDelay || 0);
            this._dataChanges = [];
            $68fbc1daad5cf8b5$var$instances[this.id] = this;
            if (!context || !canvas) {
                console.error("Failed to create chart: can't acquire context from the given item");
                return;
            }
            $68fbc1daad5cf8b5$export$a424a0aa8f687495.listen(this, "complete", $68fbc1daad5cf8b5$var$onAnimationsComplete);
            $68fbc1daad5cf8b5$export$a424a0aa8f687495.listen(this, "progress", $68fbc1daad5cf8b5$var$onAnimationProgress);
            this._initialize();
            if (this.attached) this.update();
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Chart, [
            {
                key: "aspectRatio",
                get: function get() {
                    var ref = this, _options = ref.options, aspectRatio = _options.aspectRatio, maintainAspectRatio = _options.maintainAspectRatio, width = ref.width, height = ref.height, _aspectRatio = ref._aspectRatio;
                    if (!$6892236ee0bf6afc$export$342063e11d6c3cad(aspectRatio)) return aspectRatio;
                    if (maintainAspectRatio && _aspectRatio) return _aspectRatio;
                    return height ? width / height : null;
                }
            },
            {
                key: "data",
                get: function get() {
                    return this.config.data;
                },
                set: function set(data) {
                    this.config.data = data;
                }
            },
            {
                key: "options",
                get: function get() {
                    return this._options;
                },
                set: function set(options) {
                    this.config.options = options;
                }
            },
            {
                key: "_initialize",
                value: function _initialize() {
                    this.notifyPlugins("beforeInit");
                    if (this.options.responsive) this.resize();
                    else $6892236ee0bf6afc$export$4c3d22f3d993c33f(this, this.options.devicePixelRatio);
                    this.bindEvents();
                    this.notifyPlugins("afterInit");
                    return this;
                }
            },
            {
                key: "clear",
                value: function clear() {
                    $6892236ee0bf6afc$export$f787f51d84a910ad(this.canvas, this.ctx);
                    return this;
                }
            },
            {
                key: "stop",
                value: function stop() {
                    $68fbc1daad5cf8b5$export$a424a0aa8f687495.stop(this);
                    return this;
                }
            },
            {
                key: "resize",
                value: function resize(width, height) {
                    if (!$68fbc1daad5cf8b5$export$a424a0aa8f687495.running(this)) this._resize(width, height);
                    else this._resizeBeforeDraw = {
                        width: width,
                        height: height
                    };
                }
            },
            {
                key: "_resize",
                value: function _resize(width, height) {
                    var options = this.options;
                    var canvas = this.canvas;
                    var aspectRatio = options.maintainAspectRatio && this.aspectRatio;
                    var newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
                    var newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
                    var mode = this.width ? "resize" : "attach";
                    this.width = newSize.width;
                    this.height = newSize.height;
                    this._aspectRatio = this.aspectRatio;
                    if (!$6892236ee0bf6afc$export$4c3d22f3d993c33f(this, newRatio, true)) return;
                    this.notifyPlugins("resize", {
                        size: newSize
                    });
                    $6892236ee0bf6afc$export$3722cfe417b6ed86(options.onResize, [
                        this,
                        newSize
                    ], this);
                    if (this.attached) {
                        if (this._doResize(mode)) this.render();
                    }
                }
            },
            {
                key: "ensureScalesHaveIDs",
                value: function ensureScalesHaveIDs() {
                    var options = this.options;
                    var scalesOptions = options.scales || {
                    };
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(scalesOptions, function(axisOptions, axisID) {
                        axisOptions.id = axisID;
                    });
                }
            },
            {
                key: "buildOrUpdateScales",
                value: function buildOrUpdateScales() {
                    var _this = this;
                    var options = this.options;
                    var scaleOpts = options.scales;
                    var scales4 = this.scales;
                    var updated = Object.keys(scales4).reduce(function(obj, id) {
                        obj[id] = false;
                        return obj;
                    }, {
                    });
                    var items = [];
                    if (scaleOpts) items = items.concat(Object.keys(scaleOpts).map(function(id) {
                        var scaleOptions = scaleOpts[id];
                        var axis = $68fbc1daad5cf8b5$var$determineAxis(id, scaleOptions);
                        var isRadial = axis === "r";
                        var isHorizontal = axis === "x";
                        return {
                            options: scaleOptions,
                            dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
                            dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
                        };
                    }));
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(items, function(item) {
                        var scaleOptions = item.options;
                        var id = scaleOptions.id;
                        var axis = $68fbc1daad5cf8b5$var$determineAxis(id, scaleOptions);
                        var scaleType = $6892236ee0bf6afc$export$90a7f3efeed30595(scaleOptions.type, item.dtype);
                        if (scaleOptions.position === undefined || $68fbc1daad5cf8b5$var$positionIsHorizontal(scaleOptions.position, axis) !== $68fbc1daad5cf8b5$var$positionIsHorizontal(item.dposition)) scaleOptions.position = item.dposition;
                        updated[id] = true;
                        var scale = null;
                        if (id in scales4 && scales4[id].type === scaleType) scale = scales4[id];
                        else {
                            var scaleClass = $68fbc1daad5cf8b5$export$4bb7493d241fd8a5.getScale(scaleType);
                            scale = new scaleClass({
                                id: id,
                                type: scaleType,
                                ctx: _this.ctx,
                                chart: _this
                            });
                            scales4[scale.id] = scale;
                        }
                        scale.init(scaleOptions, options);
                    });
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(updated, function(hasUpdated, id) {
                        if (!hasUpdated) delete scales4[id];
                    });
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(scales4, function(scale) {
                        $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.configure(_this, scale, scale.options);
                        $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.addBox(_this, scale);
                    });
                }
            },
            {
                key: "_updateMetasets",
                value: function _updateMetasets() {
                    var metasets = this._metasets;
                    var numData = this.data.datasets.length;
                    var numMeta = metasets.length;
                    metasets.sort(function(a, b) {
                        return a.index - b.index;
                    });
                    if (numMeta > numData) {
                        for(var i = numData; i < numMeta; ++i)this._destroyDatasetMeta(i);
                        metasets.splice(numData, numMeta - numData);
                    }
                    this._sortedMetasets = metasets.slice(0).sort($68fbc1daad5cf8b5$var$compare2Level("order", "index"));
                }
            },
            {
                key: "_removeUnreferencedMetasets",
                value: function _removeUnreferencedMetasets() {
                    var _this = this;
                    var ref = this, metasets = ref._metasets, datasets = ref.data.datasets;
                    if (metasets.length > datasets.length) delete this._stacks;
                    metasets.forEach(function(meta, index50) {
                        if (datasets.filter(function(x) {
                            return x === meta._dataset;
                        }).length === 0) _this._destroyDatasetMeta(index50);
                    });
                }
            },
            {
                key: "buildOrUpdateControllers",
                value: function buildOrUpdateControllers() {
                    var newControllers = [];
                    var datasets = this.data.datasets;
                    var i, ilen;
                    this._removeUnreferencedMetasets();
                    for(i = 0, ilen = datasets.length; i < ilen; i++){
                        var dataset = datasets[i];
                        var meta = this.getDatasetMeta(i);
                        var type = dataset.type || this.config.type;
                        if (meta.type && meta.type !== type) {
                            this._destroyDatasetMeta(i);
                            meta = this.getDatasetMeta(i);
                        }
                        meta.type = type;
                        meta.indexAxis = dataset.indexAxis || $68fbc1daad5cf8b5$var$getIndexAxis(type, this.options);
                        meta.order = dataset.order || 0;
                        meta.index = i;
                        meta.label = "" + dataset.label;
                        meta.visible = this.isDatasetVisible(i);
                        if (meta.controller) {
                            meta.controller.updateIndex(i);
                            meta.controller.linkScales();
                        } else {
                            var ControllerClass = $68fbc1daad5cf8b5$export$4bb7493d241fd8a5.getController(type);
                            var _type = $6892236ee0bf6afc$export$4368d992c4eafac0.datasets[type], datasetElementType = _type.datasetElementType, dataElementType = _type.dataElementType;
                            Object.assign(ControllerClass.prototype, {
                                dataElementType: $68fbc1daad5cf8b5$export$4bb7493d241fd8a5.getElement(dataElementType),
                                datasetElementType: datasetElementType && $68fbc1daad5cf8b5$export$4bb7493d241fd8a5.getElement(datasetElementType)
                            });
                            meta.controller = new ControllerClass(this, i);
                            newControllers.push(meta.controller);
                        }
                    }
                    this._updateMetasets();
                    return newControllers;
                }
            },
            {
                key: "_resetElements",
                value: function _resetElements() {
                    var _this = this;
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(this.data.datasets, function(dataset, datasetIndex) {
                        _this.getDatasetMeta(datasetIndex).controller.reset();
                    }, this);
                }
            },
            {
                key: "reset",
                value: function reset() {
                    this._resetElements();
                    this.notifyPlugins("reset");
                }
            },
            {
                key: "update",
                value: function update(mode) {
                    var config = this.config;
                    config.update();
                    var options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
                    var animsDisabled = this._animationsDisabled = !options.animation;
                    this._updateScales();
                    this._checkEventBindings();
                    this._updateHiddenIndices();
                    this._plugins.invalidate();
                    if (this.notifyPlugins("beforeUpdate", {
                        mode: mode,
                        cancelable: true
                    }) === false) return;
                    var newControllers = this.buildOrUpdateControllers();
                    this.notifyPlugins("beforeElementsUpdate");
                    var minPadding = 0;
                    for(var i = 0, ilen = this.data.datasets.length; i < ilen; i++){
                        var controller = this.getDatasetMeta(i).controller;
                        var reset = !animsDisabled && newControllers.indexOf(controller) === -1;
                        controller.buildOrUpdateElements(reset);
                        minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
                    }
                    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
                    this._updateLayout(minPadding);
                    if (!animsDisabled) $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(newControllers, function(controller) {
                        controller.reset();
                    });
                    this._updateDatasets(mode);
                    this.notifyPlugins("afterUpdate", {
                        mode: mode
                    });
                    this._layers.sort($68fbc1daad5cf8b5$var$compare2Level("z", "_idx"));
                    var ref = this, _active = ref._active, _lastEvent = ref._lastEvent;
                    if (_lastEvent) this._eventHandler(_lastEvent, true);
                    else if (_active.length) this._updateHoverStyles(_active, _active, true);
                    this.render();
                }
            },
            {
                key: "_updateScales",
                value: function _updateScales() {
                    var _this = this;
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(this.scales, function(scale) {
                        $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.removeBox(_this, scale);
                    });
                    this.ensureScalesHaveIDs();
                    this.buildOrUpdateScales();
                }
            },
            {
                key: "_checkEventBindings",
                value: function _checkEventBindings() {
                    var options = this.options;
                    var existingEvents = new Set(Object.keys(this._listeners));
                    var newEvents = new Set(options.events);
                    if (!$6892236ee0bf6afc$export$c9170ad7d4cd7e57(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
                        this.unbindEvents();
                        this.bindEvents();
                    }
                }
            },
            {
                key: "_updateHiddenIndices",
                value: function _updateHiddenIndices() {
                    var _hiddenIndices = this._hiddenIndices;
                    var changes = this._getUniformDataChanges() || [];
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = changes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var _value = _step.value, method = _value.method, start = _value.start, count = _value.count;
                            var move = method === "_removeElements" ? -count : count;
                            $68fbc1daad5cf8b5$var$moveNumericKeys(_hiddenIndices, start, move);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                        } finally{
                            if (_didIteratorError) throw _iteratorError;
                        }
                    }
                }
            },
            {
                key: "_getUniformDataChanges",
                value: function _getUniformDataChanges() {
                    var _dataChanges = this._dataChanges;
                    if (!_dataChanges || !_dataChanges.length) return;
                    this._dataChanges = [];
                    var datasetCount = this.data.datasets.length;
                    var makeSet = function(idx) {
                        return new Set(_dataChanges.filter(function(c) {
                            return c[0] === idx;
                        }).map(function(c, i) {
                            return i + "," + c.splice(1).join(",");
                        }));
                    };
                    var changeSet = makeSet(0);
                    for(var i4 = 1; i4 < datasetCount; i4++){
                        if (!$6892236ee0bf6afc$export$c9170ad7d4cd7e57(changeSet, makeSet(i4))) return;
                    }
                    return Array.from(changeSet).map(function(c) {
                        return c.split(",");
                    }).map(function(a) {
                        return {
                            method: a[1],
                            start: +a[2],
                            count: +a[3]
                        };
                    });
                }
            },
            {
                key: "_updateLayout",
                value: function _updateLayout(minPadding) {
                    var _this = this;
                    if (this.notifyPlugins("beforeLayout", {
                        cancelable: true
                    }) === false) return;
                    $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.update(this, this.width, this.height, minPadding);
                    var area = this.chartArea;
                    var noArea = area.width <= 0 || area.height <= 0;
                    this._layers = [];
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(this.boxes, function(box) {
                        var __layers;
                        if (noArea && box.position === "chartArea") return;
                        if (box.configure) box.configure();
                        (__layers = _this._layers).push.apply(__layers, /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(box._layers()));
                    }, this);
                    this._layers.forEach(function(item, index51) {
                        item._idx = index51;
                    });
                    this.notifyPlugins("afterLayout");
                }
            },
            {
                key: "_updateDatasets",
                value: function _updateDatasets(mode) {
                    if (this.notifyPlugins("beforeDatasetsUpdate", {
                        mode: mode,
                        cancelable: true
                    }) === false) return;
                    for(var i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this.getDatasetMeta(i).controller.configure();
                    for(var i5 = 0, ilen1 = this.data.datasets.length; i5 < ilen1; ++i5)this._updateDataset(i5, $6892236ee0bf6afc$export$2e2af4578d910ddf(mode) ? mode({
                        datasetIndex: i5
                    }) : mode);
                    this.notifyPlugins("afterDatasetsUpdate", {
                        mode: mode
                    });
                }
            },
            {
                key: "_updateDataset",
                value: function _updateDataset(index52, mode) {
                    var meta = this.getDatasetMeta(index52);
                    var args = {
                        meta: meta,
                        index: index52,
                        mode: mode,
                        cancelable: true
                    };
                    if (this.notifyPlugins("beforeDatasetUpdate", args) === false) return;
                    meta.controller._update(mode);
                    args.cancelable = false;
                    this.notifyPlugins("afterDatasetUpdate", args);
                }
            },
            {
                key: "render",
                value: function render() {
                    if (this.notifyPlugins("beforeRender", {
                        cancelable: true
                    }) === false) return;
                    if ($68fbc1daad5cf8b5$export$a424a0aa8f687495.has(this)) {
                        if (this.attached && !$68fbc1daad5cf8b5$export$a424a0aa8f687495.running(this)) $68fbc1daad5cf8b5$export$a424a0aa8f687495.start(this);
                    } else {
                        this.draw();
                        $68fbc1daad5cf8b5$var$onAnimationsComplete({
                            chart: this
                        });
                    }
                }
            },
            {
                key: "draw",
                value: function draw2() {
                    var i;
                    if (this._resizeBeforeDraw) {
                        var __resizeBeforeDraw = this._resizeBeforeDraw, width = __resizeBeforeDraw.width, height = __resizeBeforeDraw.height;
                        this._resize(width, height);
                        this._resizeBeforeDraw = null;
                    }
                    this.clear();
                    if (this.width <= 0 || this.height <= 0) return;
                    if (this.notifyPlugins("beforeDraw", {
                        cancelable: true
                    }) === false) return;
                    var layers = this._layers;
                    for(i = 0; i < layers.length && layers[i].z <= 0; ++i)layers[i].draw(this.chartArea);
                    this._drawDatasets();
                    for(; i < layers.length; ++i)layers[i].draw(this.chartArea);
                    this.notifyPlugins("afterDraw");
                }
            },
            {
                key: "_getSortedDatasetMetas",
                value: function _getSortedDatasetMetas(filterVisible) {
                    var metasets = this._sortedMetasets;
                    var result = [];
                    var i, ilen;
                    for(i = 0, ilen = metasets.length; i < ilen; ++i){
                        var meta = metasets[i];
                        if (!filterVisible || meta.visible) result.push(meta);
                    }
                    return result;
                }
            },
            {
                key: "getSortedVisibleDatasetMetas",
                value: function getSortedVisibleDatasetMetas() {
                    return this._getSortedDatasetMetas(true);
                }
            },
            {
                key: "_drawDatasets",
                value: function _drawDatasets() {
                    if (this.notifyPlugins("beforeDatasetsDraw", {
                        cancelable: true
                    }) === false) return;
                    var metasets = this.getSortedVisibleDatasetMetas();
                    for(var i = metasets.length - 1; i >= 0; --i)this._drawDataset(metasets[i]);
                    this.notifyPlugins("afterDatasetsDraw");
                }
            },
            {
                key: "_drawDataset",
                value: function _drawDataset(meta) {
                    var ctx = this.ctx;
                    var clip = meta._clip;
                    var useClip = !clip.disabled;
                    var area = this.chartArea;
                    var args = {
                        meta: meta,
                        index: meta.index,
                        cancelable: true
                    };
                    if (this.notifyPlugins("beforeDatasetDraw", args) === false) return;
                    if (useClip) $6892236ee0bf6afc$export$78acf4525d8a74c4(ctx, {
                        left: clip.left === false ? 0 : area.left - clip.left,
                        right: clip.right === false ? this.width : area.right + clip.right,
                        top: clip.top === false ? 0 : area.top - clip.top,
                        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
                    });
                    meta.controller.draw();
                    if (useClip) $6892236ee0bf6afc$export$dc98b0b04f4c7758(ctx);
                    args.cancelable = false;
                    this.notifyPlugins("afterDatasetDraw", args);
                }
            },
            {
                key: "isPointInArea",
                value: function isPointInArea(point) {
                    return $6892236ee0bf6afc$export$ef35774e6d314e91(point, this.chartArea, this._minPadding);
                }
            },
            {
                key: "getElementsAtEventForMode",
                value: function getElementsAtEventForMode(e, mode, options, useFinalPosition) {
                    var method = $68fbc1daad5cf8b5$export$a13296960cae0384.modes[mode];
                    if (typeof method === "function") return method(this, e, options, useFinalPosition);
                    return [];
                }
            },
            {
                key: "getDatasetMeta",
                value: function getDatasetMeta(datasetIndex) {
                    var dataset = this.data.datasets[datasetIndex];
                    var metasets = this._metasets;
                    var meta = metasets.filter(function(x) {
                        return x && x._dataset === dataset;
                    }).pop();
                    if (!meta) {
                        meta = {
                            type: null,
                            data: [],
                            dataset: null,
                            controller: null,
                            hidden: null,
                            xAxisID: null,
                            yAxisID: null,
                            order: dataset && dataset.order || 0,
                            index: datasetIndex,
                            _dataset: dataset,
                            _parsed: [],
                            _sorted: false
                        };
                        metasets.push(meta);
                    }
                    return meta;
                }
            },
            {
                key: "getContext",
                value: function getContext() {
                    return this.$context || (this.$context = $6892236ee0bf6afc$export$dda1d9f60106f0e9(null, {
                        chart: this,
                        type: "chart"
                    }));
                }
            },
            {
                key: "getVisibleDatasetCount",
                value: function getVisibleDatasetCount() {
                    return this.getSortedVisibleDatasetMetas().length;
                }
            },
            {
                key: "isDatasetVisible",
                value: function isDatasetVisible(datasetIndex) {
                    var dataset = this.data.datasets[datasetIndex];
                    if (!dataset) return false;
                    var meta = this.getDatasetMeta(datasetIndex);
                    return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
                }
            },
            {
                key: "setDatasetVisibility",
                value: function setDatasetVisibility(datasetIndex, visible) {
                    var meta = this.getDatasetMeta(datasetIndex);
                    meta.hidden = !visible;
                }
            },
            {
                key: "toggleDataVisibility",
                value: function toggleDataVisibility(index53) {
                    this._hiddenIndices[index53] = !this._hiddenIndices[index53];
                }
            },
            {
                key: "getDataVisibility",
                value: function getDataVisibility(index54) {
                    return !this._hiddenIndices[index54];
                }
            },
            {
                key: "_updateVisibility",
                value: function _updateVisibility(datasetIndex, dataIndex, visible) {
                    var mode = visible ? "show" : "hide";
                    var meta = this.getDatasetMeta(datasetIndex);
                    var anims = meta.controller._resolveAnimations(undefined, mode);
                    if ($6892236ee0bf6afc$export$35e795649ee09318(dataIndex)) {
                        meta.data[dataIndex].hidden = !visible;
                        this.update();
                    } else {
                        this.setDatasetVisibility(datasetIndex, visible);
                        anims.update(meta, {
                            visible: visible
                        });
                        this.update(function(ctx) {
                            return ctx.datasetIndex === datasetIndex ? mode : undefined;
                        });
                    }
                }
            },
            {
                key: "hide",
                value: function hide(datasetIndex, dataIndex) {
                    this._updateVisibility(datasetIndex, dataIndex, false);
                }
            },
            {
                key: "show",
                value: function show(datasetIndex, dataIndex) {
                    this._updateVisibility(datasetIndex, dataIndex, true);
                }
            },
            {
                key: "_destroyDatasetMeta",
                value: function _destroyDatasetMeta(datasetIndex) {
                    var meta = this._metasets[datasetIndex];
                    if (meta && meta.controller) meta.controller._destroy();
                    delete this._metasets[datasetIndex];
                }
            },
            {
                key: "_stop",
                value: function _stop() {
                    var i, ilen;
                    this.stop();
                    $68fbc1daad5cf8b5$export$a424a0aa8f687495.remove(this);
                    for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this._destroyDatasetMeta(i);
                }
            },
            {
                key: "destroy",
                value: function destroy() {
                    this.notifyPlugins("beforeDestroy");
                    var ref = this, canvas = ref.canvas, ctx = ref.ctx;
                    this._stop();
                    this.config.clearCache();
                    if (canvas) {
                        this.unbindEvents();
                        $6892236ee0bf6afc$export$f787f51d84a910ad(canvas, ctx);
                        this.platform.releaseContext(ctx);
                        this.canvas = null;
                        this.ctx = null;
                    }
                    this.notifyPlugins("destroy");
                    delete $68fbc1daad5cf8b5$var$instances[this.id];
                    this.notifyPlugins("afterDestroy");
                }
            },
            {
                key: "toBase64Image",
                value: function toBase64Image() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    var _canvas;
                    return (_canvas = this.canvas).toDataURL.apply(_canvas, /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(args));
                }
            },
            {
                key: "bindEvents",
                value: function bindEvents() {
                    this.bindUserEvents();
                    if (this.options.responsive) this.bindResponsiveEvents();
                    else this.attached = true;
                }
            },
            {
                key: "bindUserEvents",
                value: function bindUserEvents() {
                    var _this = this;
                    var listeners = this._listeners;
                    var platform = this.platform;
                    var _add = function(type, listener) {
                        platform.addEventListener(_this, type, listener);
                        listeners[type] = listener;
                    };
                    var listener1 = function(e, x, y) {
                        e.offsetX = x;
                        e.offsetY = y;
                        _this._eventHandler(e);
                    };
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(this.options.events, function(type) {
                        return _add(type, listener1);
                    });
                }
            },
            {
                key: "bindResponsiveEvents",
                value: function bindResponsiveEvents() {
                    var _this = this;
                    if (!this._responsiveListeners) this._responsiveListeners = {
                    };
                    var listeners = this._responsiveListeners;
                    var platform = this.platform;
                    var _add = function(type, listener) {
                        platform.addEventListener(_this, type, listener);
                        listeners[type] = listener;
                    };
                    var _remove = function(type, listener) {
                        if (listeners[type]) {
                            platform.removeEventListener(_this, type, listener);
                            delete listeners[type];
                        }
                    };
                    var listener2 = function(width, height) {
                        if (_this.canvas) _this.resize(width, height);
                    };
                    var detached;
                    var attached = function() {
                        _remove("attach", attached);
                        _this.attached = true;
                        _this.resize();
                        _add("resize", listener2);
                        _add("detach", detached);
                    };
                    detached = function() {
                        _this.attached = false;
                        _remove("resize", listener2);
                        _this._stop();
                        _this._resize(0, 0);
                        _add("attach", attached);
                    };
                    if (platform.isAttached(this.canvas)) attached();
                    else detached();
                }
            },
            {
                key: "unbindEvents",
                value: function unbindEvents() {
                    var _this = this;
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(this._listeners, function(listener, type) {
                        _this.platform.removeEventListener(_this, type, listener);
                    });
                    this._listeners = {
                    };
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(this._responsiveListeners, function(listener, type) {
                        _this.platform.removeEventListener(_this, type, listener);
                    });
                    this._responsiveListeners = undefined;
                }
            },
            {
                key: "updateHoverStyle",
                value: function updateHoverStyle(items, mode, enabled) {
                    var prefix = enabled ? "set" : "remove";
                    var meta, item, i, ilen;
                    if (mode === "dataset") {
                        meta = this.getDatasetMeta(items[0].datasetIndex);
                        meta.controller["_" + prefix + "DatasetHoverStyle"]();
                    }
                    for(i = 0, ilen = items.length; i < ilen; ++i){
                        item = items[i];
                        var controller = item && this.getDatasetMeta(item.datasetIndex).controller;
                        if (controller) controller[prefix + "HoverStyle"](item.element, item.datasetIndex, item.index);
                    }
                }
            },
            {
                key: "getActiveElements",
                value: function getActiveElements() {
                    return this._active || [];
                }
            },
            {
                key: "setActiveElements",
                value: function setActiveElements(activeElements) {
                    var _this = this;
                    var lastActive = this._active || [];
                    var active = activeElements.map(function(param) {
                        var datasetIndex = param.datasetIndex, index55 = param.index;
                        var meta = _this.getDatasetMeta(datasetIndex);
                        if (!meta) throw new Error("No dataset found at index " + datasetIndex);
                        return {
                            datasetIndex: datasetIndex,
                            element: meta.data[index55],
                            index: index55
                        };
                    });
                    var changed = !$6892236ee0bf6afc$export$ee7c8ad385a60b7b(active, lastActive);
                    if (changed) {
                        this._active = active;
                        this._lastEvent = null;
                        this._updateHoverStyles(active, lastActive);
                    }
                }
            },
            {
                key: "notifyPlugins",
                value: function notifyPlugins(hook, args, filter) {
                    return this._plugins.notify(this, hook, args, filter);
                }
            },
            {
                key: "_updateHoverStyles",
                value: function _updateHoverStyles(active, lastActive, replay) {
                    var hoverOptions = this.options.hover;
                    var diff = function(a, b) {
                        return a.filter(function(x) {
                            return !b.some(function(y) {
                                return x.datasetIndex === y.datasetIndex && x.index === y.index;
                            });
                        });
                    };
                    var deactivated = diff(lastActive, active);
                    var activated = replay ? active : diff(active, lastActive);
                    if (deactivated.length) this.updateHoverStyle(deactivated, hoverOptions.mode, false);
                    if (activated.length && hoverOptions.mode) this.updateHoverStyle(activated, hoverOptions.mode, true);
                }
            },
            {
                key: "_eventHandler",
                value: function _eventHandler(e, replay) {
                    var _this = this;
                    var args = {
                        event: e,
                        replay: replay,
                        cancelable: true,
                        inChartArea: this.isPointInArea(e)
                    };
                    var eventFilter = function(plugin) {
                        return (plugin.options.events || _this.options.events).includes(e["native"].type);
                    };
                    if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) return;
                    var changed = this._handleEvent(e, replay, args.inChartArea);
                    args.cancelable = false;
                    this.notifyPlugins("afterEvent", args, eventFilter);
                    if (changed || args.changed) this.render();
                    return this;
                }
            },
            {
                key: "_handleEvent",
                value: function _handleEvent(e, replay, inChartArea) {
                    var ref = this, tmp = ref._active, lastActive = tmp === void 0 ? [] : tmp, options = ref.options;
                    var useFinalPosition = replay;
                    var active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
                    var isClick = $6892236ee0bf6afc$export$995eb9fca571757(e);
                    var lastEvent = $68fbc1daad5cf8b5$var$determineLastEvent(e, this._lastEvent, inChartArea, isClick);
                    if (inChartArea) {
                        this._lastEvent = null;
                        $6892236ee0bf6afc$export$3722cfe417b6ed86(options.onHover, [
                            e,
                            active,
                            this
                        ], this);
                        if (isClick) $6892236ee0bf6afc$export$3722cfe417b6ed86(options.onClick, [
                            e,
                            active,
                            this
                        ], this);
                    }
                    var changed = !$6892236ee0bf6afc$export$ee7c8ad385a60b7b(active, lastActive);
                    if (changed || replay) {
                        this._active = active;
                        this._updateHoverStyles(active, lastActive, replay);
                    }
                    this._lastEvent = lastEvent;
                    return changed;
                }
            },
            {
                key: "_getActiveElements",
                value: function _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
                    if (e.type === "mouseout") return [];
                    if (!inChartArea) return lastActive;
                    var hoverOptions = this.options.hover;
                    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
                }
            }
        ]);
        return Chart;
    }();
    var $68fbc1daad5cf8b5$var$invalidatePlugins = function() {
        return $6892236ee0bf6afc$export$a9c23c6ac3fc3eca($68fbc1daad5cf8b5$export$acaa6426d77a227e.instances, function(chart) {
            return chart._plugins.invalidate();
        });
    };
    var $68fbc1daad5cf8b5$var$enumerable = true;
    Object.defineProperties($68fbc1daad5cf8b5$export$acaa6426d77a227e, {
        defaults: {
            enumerable: $68fbc1daad5cf8b5$var$enumerable,
            value: $6892236ee0bf6afc$export$4368d992c4eafac0
        },
        instances: {
            enumerable: $68fbc1daad5cf8b5$var$enumerable,
            value: $68fbc1daad5cf8b5$var$instances
        },
        overrides: {
            enumerable: $68fbc1daad5cf8b5$var$enumerable,
            value: $6892236ee0bf6afc$export$ce26c07117d59d6a
        },
        registry: {
            enumerable: $68fbc1daad5cf8b5$var$enumerable,
            value: $68fbc1daad5cf8b5$export$4bb7493d241fd8a5
        },
        version: {
            enumerable: $68fbc1daad5cf8b5$var$enumerable,
            value: $68fbc1daad5cf8b5$var$version
        },
        getChart: {
            enumerable: $68fbc1daad5cf8b5$var$enumerable,
            value: $68fbc1daad5cf8b5$var$getChart
        },
        register: {
            enumerable: $68fbc1daad5cf8b5$var$enumerable,
            value: function() {
                for(var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++)items[_key] = arguments[_key];
                var _registry;
                (_registry = $68fbc1daad5cf8b5$export$4bb7493d241fd8a5).add.apply(_registry, /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(items));
                $68fbc1daad5cf8b5$var$invalidatePlugins();
            }
        },
        unregister: {
            enumerable: $68fbc1daad5cf8b5$var$enumerable,
            value: function() {
                for(var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++)items[_key] = arguments[_key];
                var _registry;
                (_registry = $68fbc1daad5cf8b5$export$4bb7493d241fd8a5).remove.apply(_registry, /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(items));
                $68fbc1daad5cf8b5$var$invalidatePlugins();
            }
        }
    });
    function $68fbc1daad5cf8b5$var$clipArc(ctx, element, endAngle) {
        var startAngle = element.startAngle, pixelMargin = element.pixelMargin, x = element.x, y = element.y, outerRadius = element.outerRadius, innerRadius = element.innerRadius;
        var angleMargin = pixelMargin / outerRadius;
        ctx.beginPath();
        ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
        if (innerRadius > pixelMargin) {
            angleMargin = pixelMargin / innerRadius;
            ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
        } else ctx.arc(x, y, pixelMargin, endAngle + $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd, startAngle - $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd);
        ctx.closePath();
        ctx.clip();
    }
    function $68fbc1daad5cf8b5$var$toRadiusCorners(value) {
        return $6892236ee0bf6afc$export$3b513254972cfc9c(value, [
            "outerStart",
            "outerEnd",
            "innerStart",
            "innerEnd"
        ]);
    }
    function $68fbc1daad5cf8b5$var$parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
        var o = $68fbc1daad5cf8b5$var$toRadiusCorners(arc.options.borderRadius);
        var halfThickness = (outerRadius - innerRadius) / 2;
        var innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
        var computeOuterLimit = function(val) {
            var outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
            return $6892236ee0bf6afc$export$efccba1c4a2ef57b(val, 0, Math.min(halfThickness, outerArcLimit));
        };
        return {
            outerStart: computeOuterLimit(o.outerStart),
            outerEnd: computeOuterLimit(o.outerEnd),
            innerStart: $6892236ee0bf6afc$export$efccba1c4a2ef57b(o.innerStart, 0, innerLimit),
            innerEnd: $6892236ee0bf6afc$export$efccba1c4a2ef57b(o.innerEnd, 0, innerLimit)
        };
    }
    function $68fbc1daad5cf8b5$var$rThetaToXY(r, theta, x, y) {
        return {
            x: x + r * Math.cos(theta),
            y: y + r * Math.sin(theta)
        };
    }
    function $68fbc1daad5cf8b5$var$pathArc(ctx, element, offset, spacing, end) {
        var x = element.x, y = element.y, start = element.startAngle, pixelMargin = element.pixelMargin, innerR = element.innerRadius;
        var outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
        var innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
        var spacingOffset = 0;
        var alpha = end - start;
        if (spacing) {
            var noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
            var noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
            var avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
            var adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;
            spacingOffset = (alpha - adjustedAngle) / 2;
        }
        var beta = Math.max(0.001, alpha * outerRadius - offset / $6892236ee0bf6afc$export$56c0d5a1e737357d) / outerRadius;
        var angleOffset = (alpha - beta) / 2;
        var startAngle = start + angleOffset + spacingOffset;
        var endAngle = end - angleOffset - spacingOffset;
        var ref = $68fbc1daad5cf8b5$var$parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle), outerStart = ref.outerStart, outerEnd = ref.outerEnd, innerStart = ref.innerStart, innerEnd = ref.innerEnd;
        var outerStartAdjustedRadius = outerRadius - outerStart;
        var outerEndAdjustedRadius = outerRadius - outerEnd;
        var outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
        var outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
        var innerStartAdjustedRadius = innerRadius + innerStart;
        var innerEndAdjustedRadius = innerRadius + innerEnd;
        var innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
        var innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
        ctx.beginPath();
        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);
        if (outerEnd > 0) {
            var pCenter = $68fbc1daad5cf8b5$var$rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd);
        }
        var p4 = $68fbc1daad5cf8b5$var$rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
        ctx.lineTo(p4.x, p4.y);
        if (innerEnd > 0) {
            var pCenter1 = $68fbc1daad5cf8b5$var$rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
            ctx.arc(pCenter1.x, pCenter1.y, innerEnd, endAngle + $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd, innerEndAdjustedAngle + Math.PI);
        }
        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, startAngle + innerStart / innerRadius, true);
        if (innerStart > 0) {
            var pCenter2 = $68fbc1daad5cf8b5$var$rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
            ctx.arc(pCenter2.x, pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd);
        }
        var p8 = $68fbc1daad5cf8b5$var$rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
        ctx.lineTo(p8.x, p8.y);
        if (outerStart > 0) {
            var pCenter3 = $68fbc1daad5cf8b5$var$rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
            ctx.arc(pCenter3.x, pCenter3.y, outerStart, startAngle - $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd, outerStartAdjustedAngle);
        }
        ctx.closePath();
    }
    function $68fbc1daad5cf8b5$var$drawArc(ctx, element, offset, spacing) {
        var fullCircles = element.fullCircles, startAngle = element.startAngle, circumference = element.circumference;
        var endAngle = element.endAngle;
        if (fullCircles) {
            $68fbc1daad5cf8b5$var$pathArc(ctx, element, offset, spacing, startAngle + $6892236ee0bf6afc$export$971d5caa766a69d7);
            for(var i = 0; i < fullCircles; ++i)ctx.fill();
            if (!isNaN(circumference)) {
                endAngle = startAngle + circumference % $6892236ee0bf6afc$export$971d5caa766a69d7;
                if (circumference % $6892236ee0bf6afc$export$971d5caa766a69d7 === 0) endAngle += $6892236ee0bf6afc$export$971d5caa766a69d7;
            }
        }
        $68fbc1daad5cf8b5$var$pathArc(ctx, element, offset, spacing, endAngle);
        ctx.fill();
        return endAngle;
    }
    function $68fbc1daad5cf8b5$var$drawFullCircleBorders(ctx, element, inner) {
        var x = element.x, y = element.y, startAngle = element.startAngle, pixelMargin = element.pixelMargin, fullCircles = element.fullCircles;
        var outerRadius = Math.max(element.outerRadius - pixelMargin, 0);
        var innerRadius = element.innerRadius + pixelMargin;
        var i;
        if (inner) $68fbc1daad5cf8b5$var$clipArc(ctx, element, startAngle + $6892236ee0bf6afc$export$971d5caa766a69d7);
        ctx.beginPath();
        ctx.arc(x, y, innerRadius, startAngle + $6892236ee0bf6afc$export$971d5caa766a69d7, startAngle, true);
        for(i = 0; i < fullCircles; ++i)ctx.stroke();
        ctx.beginPath();
        ctx.arc(x, y, outerRadius, startAngle, startAngle + $6892236ee0bf6afc$export$971d5caa766a69d7);
        for(i = 0; i < fullCircles; ++i)ctx.stroke();
    }
    function $68fbc1daad5cf8b5$var$drawBorder(ctx, element, offset, spacing, endAngle) {
        var options = element.options;
        var borderWidth = options.borderWidth, borderJoinStyle = options.borderJoinStyle;
        var inner = options.borderAlign === "inner";
        if (!borderWidth) return;
        if (inner) {
            ctx.lineWidth = borderWidth * 2;
            ctx.lineJoin = borderJoinStyle || "round";
        } else {
            ctx.lineWidth = borderWidth;
            ctx.lineJoin = borderJoinStyle || "bevel";
        }
        if (element.fullCircles) $68fbc1daad5cf8b5$var$drawFullCircleBorders(ctx, element, inner);
        if (inner) $68fbc1daad5cf8b5$var$clipArc(ctx, element, endAngle);
        $68fbc1daad5cf8b5$var$pathArc(ctx, element, offset, spacing, endAngle);
        ctx.stroke();
    }
    var $68fbc1daad5cf8b5$export$d48203c759d6a1fc = /*#__PURE__*/ function(Element) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(ArcElement, Element);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(ArcElement);
        function ArcElement(cfg) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, ArcElement);
            var _this;
            _this = _super.call(this);
            _this.options = undefined;
            _this.circumference = undefined;
            _this.startAngle = undefined;
            _this.endAngle = undefined;
            _this.innerRadius = undefined;
            _this.outerRadius = undefined;
            _this.pixelMargin = 0;
            _this.fullCircles = 0;
            if (cfg) Object.assign(/*@__PURE__*/ $parcel$interopDefault($fdlrY)(_this), cfg);
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(ArcElement, [
            {
                key: "inRange",
                value: function inRange2(chartX, chartY, useFinalPosition) {
                    var point = this.getProps([
                        "x",
                        "y"
                    ], useFinalPosition);
                    var ref = $6892236ee0bf6afc$export$e7094788287c5e9b(point, {
                        x: chartX,
                        y: chartY
                    }), angle = ref.angle, distance = ref.distance;
                    var ref6 = this.getProps([
                        "startAngle",
                        "endAngle",
                        "innerRadius",
                        "outerRadius",
                        "circumference"
                    ], useFinalPosition), startAngle = ref6.startAngle, endAngle = ref6.endAngle, innerRadius = ref6.innerRadius, outerRadius = ref6.outerRadius, circumference = ref6.circumference;
                    var rAdjust = this.options.spacing / 2;
                    var _circumference = $6892236ee0bf6afc$export$90a7f3efeed30595(circumference, endAngle - startAngle);
                    var betweenAngles = _circumference >= $6892236ee0bf6afc$export$971d5caa766a69d7 || $6892236ee0bf6afc$export$ffb5f4729a158638(angle, startAngle, endAngle);
                    var withinRadius = $6892236ee0bf6afc$export$f38c853ae54ed474(distance, innerRadius + rAdjust, outerRadius + rAdjust);
                    return betweenAngles && withinRadius;
                }
            },
            {
                key: "getCenterPoint",
                value: function getCenterPoint(useFinalPosition) {
                    var ref = this.getProps([
                        "x",
                        "y",
                        "startAngle",
                        "endAngle",
                        "innerRadius",
                        "outerRadius",
                        "circumference", 
                    ], useFinalPosition), x = ref.x, y = ref.y, startAngle = ref.startAngle, endAngle = ref.endAngle, innerRadius = ref.innerRadius, outerRadius = ref.outerRadius;
                    var _options = this.options, offset = _options.offset, spacing = _options.spacing;
                    var halfAngle = (startAngle + endAngle) / 2;
                    var halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
                    return {
                        x: x + Math.cos(halfAngle) * halfRadius,
                        y: y + Math.sin(halfAngle) * halfRadius
                    };
                }
            },
            {
                key: "tooltipPosition",
                value: function tooltipPosition(useFinalPosition) {
                    return this.getCenterPoint(useFinalPosition);
                }
            },
            {
                key: "draw",
                value: function draw2(ctx) {
                    var ref = this, options = ref.options, circumference = ref.circumference;
                    var offset = (options.offset || 0) / 2;
                    var spacing = (options.spacing || 0) / 2;
                    this.pixelMargin = options.borderAlign === "inner" ? 0.33 : 0;
                    this.fullCircles = circumference > $6892236ee0bf6afc$export$971d5caa766a69d7 ? Math.floor(circumference / $6892236ee0bf6afc$export$971d5caa766a69d7) : 0;
                    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) return;
                    ctx.save();
                    var radiusOffset = 0;
                    if (offset) {
                        radiusOffset = offset / 2;
                        var halfAngle = (this.startAngle + this.endAngle) / 2;
                        ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);
                        if (this.circumference >= $6892236ee0bf6afc$export$56c0d5a1e737357d) radiusOffset = offset;
                    }
                    ctx.fillStyle = options.backgroundColor;
                    ctx.strokeStyle = options.borderColor;
                    var endAngle = $68fbc1daad5cf8b5$var$drawArc(ctx, this, radiusOffset, spacing);
                    $68fbc1daad5cf8b5$var$drawBorder(ctx, this, radiusOffset, spacing, endAngle);
                    ctx.restore();
                }
            }
        ]);
        return ArcElement;
    }(/*@__PURE__*/ $parcel$interopDefault($16755fe9f4f0f745$exports)($68fbc1daad5cf8b5$export$db77ccec0bb4ccac));
    $68fbc1daad5cf8b5$export$d48203c759d6a1fc.id = "arc";
    $68fbc1daad5cf8b5$export$d48203c759d6a1fc.defaults = {
        borderAlign: "center",
        borderColor: "#fff",
        borderJoinStyle: undefined,
        borderRadius: 0,
        borderWidth: 2,
        offset: 0,
        spacing: 0,
        angle: undefined
    };
    $68fbc1daad5cf8b5$export$d48203c759d6a1fc.defaultRoutes = {
        backgroundColor: "backgroundColor"
    };
    function $68fbc1daad5cf8b5$var$setStyle(ctx, options) {
        var style = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : options;
        ctx.lineCap = $6892236ee0bf6afc$export$90a7f3efeed30595(style.borderCapStyle, options.borderCapStyle);
        ctx.setLineDash($6892236ee0bf6afc$export$90a7f3efeed30595(style.borderDash, options.borderDash));
        ctx.lineDashOffset = $6892236ee0bf6afc$export$90a7f3efeed30595(style.borderDashOffset, options.borderDashOffset);
        ctx.lineJoin = $6892236ee0bf6afc$export$90a7f3efeed30595(style.borderJoinStyle, options.borderJoinStyle);
        ctx.lineWidth = $6892236ee0bf6afc$export$90a7f3efeed30595(style.borderWidth, options.borderWidth);
        ctx.strokeStyle = $6892236ee0bf6afc$export$90a7f3efeed30595(style.borderColor, options.borderColor);
    }
    function $68fbc1daad5cf8b5$var$lineTo(ctx, previous, target) {
        ctx.lineTo(target.x, target.y);
    }
    function $68fbc1daad5cf8b5$var$getLineMethod(options) {
        if (options.stepped) return $6892236ee0bf6afc$export$8a5498727ef6be21;
        if (options.tension || options.cubicInterpolationMode === "monotone") return $6892236ee0bf6afc$export$d24c54395ce0c509;
        return $68fbc1daad5cf8b5$var$lineTo;
    }
    function $68fbc1daad5cf8b5$var$pathVars(points, segment) {
        var params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
        };
        var count = points.length;
        var tmp = params.start, paramsStart = tmp === void 0 ? 0 : tmp, tmp1 = params.end, paramsEnd = tmp1 === void 0 ? count - 1 : tmp1;
        var segmentStart = segment.start, segmentEnd = segment.end;
        var start = Math.max(paramsStart, segmentStart);
        var end = Math.min(paramsEnd, segmentEnd);
        var outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
        return {
            count: count,
            start: start,
            loop: segment.loop,
            ilen: end < start && !outside ? count + end - start : end - start
        };
    }
    function $68fbc1daad5cf8b5$var$pathSegment(ctx, line, segment, params) {
        var points = line.points, options = line.options;
        var ref = $68fbc1daad5cf8b5$var$pathVars(points, segment, params), count = ref.count, start = ref.start, loop = ref.loop, ilen = ref.ilen;
        var lineMethod = $68fbc1daad5cf8b5$var$getLineMethod(options);
        var ref7 = params || {
        }, _move = ref7.move, move = _move === void 0 ? true : _move, reverse = ref7.reverse;
        var i, point, prev;
        for(i = 0; i <= ilen; ++i){
            point = points[(start + (reverse ? ilen - i : i)) % count];
            if (point.skip) continue;
            else if (move) {
                ctx.moveTo(point.x, point.y);
                move = false;
            } else lineMethod(ctx, prev, point, reverse, options.stepped);
            prev = point;
        }
        if (loop) {
            point = points[(start + (reverse ? ilen : 0)) % count];
            lineMethod(ctx, prev, point, reverse, options.stepped);
        }
        return !!loop;
    }
    function $68fbc1daad5cf8b5$var$fastPathSegment(ctx, line, segment, params) {
        var points = line.points;
        var ref = $68fbc1daad5cf8b5$var$pathVars(points, segment, params), count = ref.count, start = ref.start, ilen = ref.ilen;
        var ref8 = params || {
        }, _move = ref8.move, move = _move === void 0 ? true : _move, reverse = ref8.reverse;
        var avgX = 0;
        var countX = 0;
        var i, point, prevX, minY, maxY, lastY;
        var pointIndex = function(index56) {
            return (start + (reverse ? ilen - index56 : index56)) % count;
        };
        var drawX = function() {
            if (minY !== maxY) {
                ctx.lineTo(avgX, maxY);
                ctx.lineTo(avgX, minY);
                ctx.lineTo(avgX, lastY);
            }
        };
        if (move) {
            point = points[pointIndex(0)];
            ctx.moveTo(point.x, point.y);
        }
        for(i = 0; i <= ilen; ++i){
            point = points[pointIndex(i)];
            if (point.skip) continue;
            var x = point.x;
            var y = point.y;
            var truncX = x | 0;
            if (truncX === prevX) {
                if (y < minY) minY = y;
                else if (y > maxY) maxY = y;
                avgX = (countX * avgX + x) / ++countX;
            } else {
                drawX();
                ctx.lineTo(x, y);
                prevX = truncX;
                countX = 0;
                minY = maxY = y;
            }
            lastY = y;
        }
        drawX();
    }
    function $68fbc1daad5cf8b5$var$_getSegmentMethod(line) {
        var opts = line.options;
        var borderDash = opts.borderDash && opts.borderDash.length;
        var useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== "monotone" && !opts.stepped && !borderDash;
        return useFastPath ? $68fbc1daad5cf8b5$var$fastPathSegment : $68fbc1daad5cf8b5$var$pathSegment;
    }
    function $68fbc1daad5cf8b5$var$_getInterpolationMethod(options) {
        if (options.stepped) return $6892236ee0bf6afc$export$306ddfe3a8403e2;
        if (options.tension || options.cubicInterpolationMode === "monotone") return $6892236ee0bf6afc$export$7a38258bbe170828;
        return $6892236ee0bf6afc$export$2f6ca3d3b1f80bf5;
    }
    function $68fbc1daad5cf8b5$var$strokePathWithCache(ctx, line, start, count) {
        var path = line._path;
        if (!path) {
            path = line._path = new Path2D();
            if (line.path(path, start, count)) path.closePath();
        }
        $68fbc1daad5cf8b5$var$setStyle(ctx, line.options);
        ctx.stroke(path);
    }
    function $68fbc1daad5cf8b5$var$strokePathDirect(ctx, line, start, count) {
        var segments = line.segments, options = line.options;
        var segmentMethod = $68fbc1daad5cf8b5$var$_getSegmentMethod(line);
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = segments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var segment = _step.value;
                $68fbc1daad5cf8b5$var$setStyle(ctx, options, segment.style);
                ctx.beginPath();
                if (segmentMethod(ctx, line, segment, {
                    start: start,
                    end: start + count - 1
                })) ctx.closePath();
                ctx.stroke();
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
    }
    var $68fbc1daad5cf8b5$var$usePath2D = typeof Path2D === "function";
    function $68fbc1daad5cf8b5$var$draw(ctx, line, start, count) {
        if ($68fbc1daad5cf8b5$var$usePath2D && !line.options.segment) $68fbc1daad5cf8b5$var$strokePathWithCache(ctx, line, start, count);
        else $68fbc1daad5cf8b5$var$strokePathDirect(ctx, line, start, count);
    }
    var $68fbc1daad5cf8b5$export$55e463fa7bcd3469 = /*#__PURE__*/ function(Element) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(LineElement, Element);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(LineElement);
        function LineElement(cfg) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, LineElement);
            var _this;
            _this = _super.call(this);
            _this.animated = true;
            _this.options = undefined;
            _this._chart = undefined;
            _this._loop = undefined;
            _this._fullLoop = undefined;
            _this._path = undefined;
            _this._points = undefined;
            _this._segments = undefined;
            _this._decimated = false;
            _this._pointsUpdated = false;
            _this._datasetIndex = undefined;
            if (cfg) Object.assign(/*@__PURE__*/ $parcel$interopDefault($fdlrY)(_this), cfg);
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(LineElement, [
            {
                key: "updateControlPoints",
                value: function updateControlPoints(chartArea, indexAxis) {
                    var options = this.options;
                    if ((options.tension || options.cubicInterpolationMode === "monotone") && !options.stepped && !this._pointsUpdated) {
                        var loop = options.spanGaps ? this._loop : this._fullLoop;
                        $6892236ee0bf6afc$export$21579262ef46735b(this._points, options, chartArea, loop, indexAxis);
                        this._pointsUpdated = true;
                    }
                }
            },
            {
                key: "points",
                get: function get() {
                    return this._points;
                },
                set: function set(points) {
                    this._points = points;
                    delete this._segments;
                    delete this._path;
                    this._pointsUpdated = false;
                }
            },
            {
                key: "segments",
                get: function get() {
                    return this._segments || (this._segments = $6892236ee0bf6afc$export$ab83b03e4111b1d0(this, this.options.segment));
                }
            },
            {
                key: "first",
                value: function first() {
                    var segments = this.segments;
                    var points = this.points;
                    return segments.length && points[segments[0].start];
                }
            },
            {
                key: "last",
                value: function last() {
                    var segments = this.segments;
                    var points = this.points;
                    var count = segments.length;
                    return count && points[segments[count - 1].end];
                }
            },
            {
                key: "interpolate",
                value: function interpolate(point, property) {
                    var options = this.options;
                    var value = point[property];
                    var points = this.points;
                    var segments = $6892236ee0bf6afc$export$1a82df3d29112e01(this, {
                        property: property,
                        start: value,
                        end: value
                    });
                    if (!segments.length) return;
                    var result = [];
                    var _interpolate = $68fbc1daad5cf8b5$var$_getInterpolationMethod(options);
                    var i, ilen;
                    for(i = 0, ilen = segments.length; i < ilen; ++i){
                        var _i = segments[i], start = _i.start, end = _i.end;
                        var p1 = points[start];
                        var p2 = points[end];
                        if (p1 === p2) {
                            result.push(p1);
                            continue;
                        }
                        var t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
                        var interpolated = _interpolate(p1, p2, t, options.stepped);
                        interpolated[property] = point[property];
                        result.push(interpolated);
                    }
                    return result.length === 1 ? result[0] : result;
                }
            },
            {
                key: "pathSegment",
                value: function pathSegment(ctx, segment, params) {
                    var segmentMethod = $68fbc1daad5cf8b5$var$_getSegmentMethod(this);
                    return segmentMethod(ctx, this, segment, params);
                }
            },
            {
                key: "path",
                value: function path(ctx, start, count) {
                    var segments = this.segments;
                    var segmentMethod = $68fbc1daad5cf8b5$var$_getSegmentMethod(this);
                    var loop = this._loop;
                    start = start || 0;
                    count = count || this.points.length - start;
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = segments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var segment = _step.value;
                            loop &= segmentMethod(ctx, this, segment, {
                                start: start,
                                end: start + count - 1
                            });
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                        } finally{
                            if (_didIteratorError) throw _iteratorError;
                        }
                    }
                    return !!loop;
                }
            },
            {
                key: "draw",
                value: function draw2(ctx, chartArea, start, count) {
                    var options = this.options || {
                    };
                    var points = this.points || [];
                    if (points.length && options.borderWidth) {
                        ctx.save();
                        $68fbc1daad5cf8b5$var$draw(ctx, this, start, count);
                        ctx.restore();
                    }
                    if (this.animated) {
                        this._pointsUpdated = false;
                        this._path = undefined;
                    }
                }
            }
        ]);
        return LineElement;
    }(/*@__PURE__*/ $parcel$interopDefault($16755fe9f4f0f745$exports)($68fbc1daad5cf8b5$export$db77ccec0bb4ccac));
    $68fbc1daad5cf8b5$export$55e463fa7bcd3469.id = "line";
    $68fbc1daad5cf8b5$export$55e463fa7bcd3469.defaults = {
        borderCapStyle: "butt",
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: "miter",
        borderWidth: 3,
        capBezierPoints: true,
        cubicInterpolationMode: "default",
        fill: false,
        spanGaps: false,
        stepped: false,
        tension: 0
    };
    $68fbc1daad5cf8b5$export$55e463fa7bcd3469.defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
    };
    $68fbc1daad5cf8b5$export$55e463fa7bcd3469.descriptors = {
        _scriptable: true,
        _indexable: function(name) {
            return name !== "borderDash" && name !== "fill";
        }
    };
    function $68fbc1daad5cf8b5$var$inRange$1(el, pos, axis, useFinalPosition) {
        var options = el.options;
        var ref = el.getProps([
            axis
        ], useFinalPosition), value = ref[axis];
        return Math.abs(pos - value) < options.radius + options.hitRadius;
    }
    var $68fbc1daad5cf8b5$export$bd159b522b230b7a = /*#__PURE__*/ function(Element) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(PointElement, Element);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(PointElement);
        function PointElement(cfg) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, PointElement);
            var _this;
            _this = _super.call(this);
            _this.options = undefined;
            _this.parsed = undefined;
            _this.skip = undefined;
            _this.stop = undefined;
            if (cfg) Object.assign(/*@__PURE__*/ $parcel$interopDefault($fdlrY)(_this), cfg);
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(PointElement, [
            {
                key: "inRange",
                value: function inRange2(mouseX, mouseY, useFinalPosition) {
                    var options = this.options;
                    var ref = this.getProps([
                        "x",
                        "y"
                    ], useFinalPosition), x = ref.x, y = ref.y;
                    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
                }
            },
            {
                key: "inXRange",
                value: function inXRange(mouseX, useFinalPosition) {
                    return $68fbc1daad5cf8b5$var$inRange$1(this, mouseX, "x", useFinalPosition);
                }
            },
            {
                key: "inYRange",
                value: function inYRange(mouseY, useFinalPosition) {
                    return $68fbc1daad5cf8b5$var$inRange$1(this, mouseY, "y", useFinalPosition);
                }
            },
            {
                key: "getCenterPoint",
                value: function getCenterPoint(useFinalPosition) {
                    var ref = this.getProps([
                        "x",
                        "y"
                    ], useFinalPosition), x = ref.x, y = ref.y;
                    return {
                        x: x,
                        y: y
                    };
                }
            },
            {
                key: "size",
                value: function size(options) {
                    options = options || this.options || {
                    };
                    var radius = options.radius || 0;
                    radius = Math.max(radius, radius && options.hoverRadius || 0);
                    var borderWidth = radius && options.borderWidth || 0;
                    return (radius + borderWidth) * 2;
                }
            },
            {
                key: "draw",
                value: function draw2(ctx, area) {
                    var options = this.options;
                    if (this.skip || options.radius < 0.1 || !$6892236ee0bf6afc$export$ef35774e6d314e91(this, area, this.size(options) / 2)) return;
                    ctx.strokeStyle = options.borderColor;
                    ctx.lineWidth = options.borderWidth;
                    ctx.fillStyle = options.backgroundColor;
                    $6892236ee0bf6afc$export$6554612db691658e(ctx, options, this.x, this.y);
                }
            },
            {
                key: "getRange",
                value: function getRange() {
                    var options = this.options || {
                    };
                    return options.radius + options.hitRadius;
                }
            }
        ]);
        return PointElement;
    }(/*@__PURE__*/ $parcel$interopDefault($16755fe9f4f0f745$exports)($68fbc1daad5cf8b5$export$db77ccec0bb4ccac));
    $68fbc1daad5cf8b5$export$bd159b522b230b7a.id = "point";
    $68fbc1daad5cf8b5$export$bd159b522b230b7a.defaults = {
        borderWidth: 1,
        hitRadius: 1,
        hoverBorderWidth: 1,
        hoverRadius: 4,
        pointStyle: "circle",
        radius: 3,
        rotation: 0
    };
    $68fbc1daad5cf8b5$export$bd159b522b230b7a.defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
    };
    function $68fbc1daad5cf8b5$var$getBarBounds(bar, useFinalPosition) {
        var ref = bar.getProps([
            "x",
            "y",
            "base",
            "width",
            "height"
        ], useFinalPosition), x = ref.x, y = ref.y, base = ref.base, width = ref.width, height = ref.height;
        var left, right, top, bottom, half;
        if (bar.horizontal) {
            half = height / 2;
            left = Math.min(x, base);
            right = Math.max(x, base);
            top = y - half;
            bottom = y + half;
        } else {
            half = width / 2;
            left = x - half;
            right = x + half;
            top = Math.min(y, base);
            bottom = Math.max(y, base);
        }
        return {
            left: left,
            top: top,
            right: right,
            bottom: bottom
        };
    }
    function $68fbc1daad5cf8b5$var$skipOrLimit(skip1, value, min, max) {
        return skip1 ? 0 : $6892236ee0bf6afc$export$efccba1c4a2ef57b(value, min, max);
    }
    function $68fbc1daad5cf8b5$var$parseBorderWidth(bar, maxW, maxH) {
        var value = bar.options.borderWidth;
        var skip2 = bar.borderSkipped;
        var o = $6892236ee0bf6afc$export$1fbe638ecf81657e(value);
        return {
            t: $68fbc1daad5cf8b5$var$skipOrLimit(skip2.top, o.top, 0, maxH),
            r: $68fbc1daad5cf8b5$var$skipOrLimit(skip2.right, o.right, 0, maxW),
            b: $68fbc1daad5cf8b5$var$skipOrLimit(skip2.bottom, o.bottom, 0, maxH),
            l: $68fbc1daad5cf8b5$var$skipOrLimit(skip2.left, o.left, 0, maxW)
        };
    }
    function $68fbc1daad5cf8b5$var$parseBorderRadius(bar, maxW, maxH) {
        var enableBorderRadius = bar.getProps([
            "enableBorderRadius"
        ]).enableBorderRadius;
        var value = bar.options.borderRadius;
        var o = $6892236ee0bf6afc$export$d66dc83d8cfc8dd(value);
        var maxR = Math.min(maxW, maxH);
        var skip3 = bar.borderSkipped;
        var enableBorder = enableBorderRadius || $6892236ee0bf6afc$export$23f2a1d2818174ef(value);
        return {
            topLeft: $68fbc1daad5cf8b5$var$skipOrLimit(!enableBorder || skip3.top || skip3.left, o.topLeft, 0, maxR),
            topRight: $68fbc1daad5cf8b5$var$skipOrLimit(!enableBorder || skip3.top || skip3.right, o.topRight, 0, maxR),
            bottomLeft: $68fbc1daad5cf8b5$var$skipOrLimit(!enableBorder || skip3.bottom || skip3.left, o.bottomLeft, 0, maxR),
            bottomRight: $68fbc1daad5cf8b5$var$skipOrLimit(!enableBorder || skip3.bottom || skip3.right, o.bottomRight, 0, maxR)
        };
    }
    function $68fbc1daad5cf8b5$var$boundingRects(bar) {
        var bounds = $68fbc1daad5cf8b5$var$getBarBounds(bar);
        var width = bounds.right - bounds.left;
        var height = bounds.bottom - bounds.top;
        var border = $68fbc1daad5cf8b5$var$parseBorderWidth(bar, width / 2, height / 2);
        var radius = $68fbc1daad5cf8b5$var$parseBorderRadius(bar, width / 2, height / 2);
        return {
            outer: {
                x: bounds.left,
                y: bounds.top,
                w: width,
                h: height,
                radius: radius
            },
            inner: {
                x: bounds.left + border.l,
                y: bounds.top + border.t,
                w: width - border.l - border.r,
                h: height - border.t - border.b,
                radius: {
                    topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
                    topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
                    bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
                    bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
                }
            }
        };
    }
    function $68fbc1daad5cf8b5$var$inRange(bar, x, y, useFinalPosition) {
        var skipX = x === null;
        var skipY = y === null;
        var skipBoth = skipX && skipY;
        var bounds = bar && !skipBoth && $68fbc1daad5cf8b5$var$getBarBounds(bar, useFinalPosition);
        return bounds && (skipX || $6892236ee0bf6afc$export$f38c853ae54ed474(x, bounds.left, bounds.right)) && (skipY || $6892236ee0bf6afc$export$f38c853ae54ed474(y, bounds.top, bounds.bottom));
    }
    function $68fbc1daad5cf8b5$var$hasRadius(radius) {
        return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
    }
    function $68fbc1daad5cf8b5$var$addNormalRectPath(ctx, rect) {
        ctx.rect(rect.x, rect.y, rect.w, rect.h);
    }
    function $68fbc1daad5cf8b5$var$inflateRect(rect, amount) {
        var refRect = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
        };
        var x = rect.x !== refRect.x ? -amount : 0;
        var y = rect.y !== refRect.y ? -amount : 0;
        var w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
        var h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
        return {
            x: rect.x + x,
            y: rect.y + y,
            w: rect.w + w,
            h: rect.h + h,
            radius: rect.radius
        };
    }
    var $68fbc1daad5cf8b5$export$a16ed71bf4b07672 = /*#__PURE__*/ function(Element) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(BarElement, Element);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(BarElement);
        function BarElement(cfg) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, BarElement);
            var _this;
            _this = _super.call(this);
            _this.options = undefined;
            _this.horizontal = undefined;
            _this.base = undefined;
            _this.width = undefined;
            _this.height = undefined;
            _this.inflateAmount = undefined;
            if (cfg) Object.assign(/*@__PURE__*/ $parcel$interopDefault($fdlrY)(_this), cfg);
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(BarElement, [
            {
                key: "draw",
                value: function draw2(ctx) {
                    var ref = this, inflateAmount = ref.inflateAmount, _options = ref.options, borderColor = _options.borderColor, backgroundColor = _options.backgroundColor;
                    var ref9 = $68fbc1daad5cf8b5$var$boundingRects(this), inner = ref9.inner, outer = ref9.outer;
                    var addRectPath = $68fbc1daad5cf8b5$var$hasRadius(outer.radius) ? $6892236ee0bf6afc$export$493d36ec626b6698 : $68fbc1daad5cf8b5$var$addNormalRectPath;
                    ctx.save();
                    if (outer.w !== inner.w || outer.h !== inner.h) {
                        ctx.beginPath();
                        addRectPath(ctx, $68fbc1daad5cf8b5$var$inflateRect(outer, inflateAmount, inner));
                        ctx.clip();
                        addRectPath(ctx, $68fbc1daad5cf8b5$var$inflateRect(inner, -inflateAmount, outer));
                        ctx.fillStyle = borderColor;
                        ctx.fill("evenodd");
                    }
                    ctx.beginPath();
                    addRectPath(ctx, $68fbc1daad5cf8b5$var$inflateRect(inner, inflateAmount));
                    ctx.fillStyle = backgroundColor;
                    ctx.fill();
                    ctx.restore();
                }
            },
            {
                key: "inRange",
                value: function inRange2(mouseX, mouseY, useFinalPosition) {
                    return $68fbc1daad5cf8b5$var$inRange(this, mouseX, mouseY, useFinalPosition);
                }
            },
            {
                key: "inXRange",
                value: function inXRange(mouseX, useFinalPosition) {
                    return $68fbc1daad5cf8b5$var$inRange(this, mouseX, null, useFinalPosition);
                }
            },
            {
                key: "inYRange",
                value: function inYRange(mouseY, useFinalPosition) {
                    return $68fbc1daad5cf8b5$var$inRange(this, null, mouseY, useFinalPosition);
                }
            },
            {
                key: "getCenterPoint",
                value: function getCenterPoint(useFinalPosition) {
                    var ref = this.getProps([
                        "x",
                        "y",
                        "base",
                        "horizontal"
                    ], useFinalPosition), x = ref.x, y = ref.y, base = ref.base, horizontal = ref.horizontal;
                    return {
                        x: horizontal ? (x + base) / 2 : x,
                        y: horizontal ? y : (y + base) / 2
                    };
                }
            },
            {
                key: "getRange",
                value: function getRange(axis) {
                    return axis === "x" ? this.width / 2 : this.height / 2;
                }
            }
        ]);
        return BarElement;
    }(/*@__PURE__*/ $parcel$interopDefault($16755fe9f4f0f745$exports)($68fbc1daad5cf8b5$export$db77ccec0bb4ccac));
    $68fbc1daad5cf8b5$export$a16ed71bf4b07672.id = "bar";
    $68fbc1daad5cf8b5$export$a16ed71bf4b07672.defaults = {
        borderSkipped: "start",
        borderWidth: 0,
        borderRadius: 0,
        inflateAmount: "auto",
        pointStyle: undefined
    };
    $68fbc1daad5cf8b5$export$a16ed71bf4b07672.defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
    };
    var $68fbc1daad5cf8b5$export$7a5d735b2ab6389d = /*#__PURE__*/ Object.freeze({
        __proto__: null,
        ArcElement: $68fbc1daad5cf8b5$export$d48203c759d6a1fc,
        LineElement: $68fbc1daad5cf8b5$export$55e463fa7bcd3469,
        PointElement: $68fbc1daad5cf8b5$export$bd159b522b230b7a,
        BarElement: $68fbc1daad5cf8b5$export$a16ed71bf4b07672
    });
    function $68fbc1daad5cf8b5$var$lttbDecimation(data, start, count, availableWidth, options) {
        var samples = options.samples || availableWidth;
        if (samples >= count) return data.slice(start, start + count);
        var decimated = [];
        var bucketWidth = (count - 2) / (samples - 2);
        var sampledIndex = 0;
        var endIndex = start + count - 1;
        var a = start;
        var i, maxAreaPoint, maxArea, area, nextA;
        decimated[sampledIndex++] = data[a];
        for(i = 0; i < samples - 2; i++){
            var avgX = 0;
            var avgY = 0;
            var j = void 0;
            var avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
            var avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
            var avgRangeLength = avgRangeEnd - avgRangeStart;
            for(j = avgRangeStart; j < avgRangeEnd; j++){
                avgX += data[j].x;
                avgY += data[j].y;
            }
            avgX /= avgRangeLength;
            avgY /= avgRangeLength;
            var rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
            var rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
            var _a = data[a], pointAx = _a.x, pointAy = _a.y;
            maxArea = area = -1;
            for(j = rangeOffs; j < rangeTo; j++){
                area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));
                if (area > maxArea) {
                    maxArea = area;
                    maxAreaPoint = data[j];
                    nextA = j;
                }
            }
            decimated[sampledIndex++] = maxAreaPoint;
            a = nextA;
        }
        decimated[sampledIndex++] = data[endIndex];
        return decimated;
    }
    function $68fbc1daad5cf8b5$var$minMaxDecimation(data, start, count, availableWidth) {
        var avgX = 0;
        var countX = 0;
        var i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
        var decimated = [];
        var endIndex = start + count - 1;
        var xMin = data[start].x;
        var xMax = data[endIndex].x;
        var dx = xMax - xMin;
        for(i = start; i < start + count; ++i){
            point = data[i];
            x = (point.x - xMin) / dx * availableWidth;
            y = point.y;
            var truncX = x | 0;
            if (truncX === prevX) {
                if (y < minY) {
                    minY = y;
                    minIndex = i;
                } else if (y > maxY) {
                    maxY = y;
                    maxIndex = i;
                }
                avgX = (countX * avgX + point.x) / ++countX;
            } else {
                var lastIndex = i - 1;
                if (!$6892236ee0bf6afc$export$342063e11d6c3cad(minIndex) && !$6892236ee0bf6afc$export$342063e11d6c3cad(maxIndex)) {
                    var intermediateIndex1 = Math.min(minIndex, maxIndex);
                    var intermediateIndex2 = Math.max(minIndex, maxIndex);
                    if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) decimated.push(/*@__PURE__*/ $parcel$interopDefault($41c9ae809ac54c1d$exports)({
                    }, data[intermediateIndex1], {
                        x: avgX
                    }));
                    if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) decimated.push(/*@__PURE__*/ $parcel$interopDefault($41c9ae809ac54c1d$exports)({
                    }, data[intermediateIndex2], {
                        x: avgX
                    }));
                }
                if (i > 0 && lastIndex !== startIndex) decimated.push(data[lastIndex]);
                decimated.push(point);
                prevX = truncX;
                countX = 0;
                minY = maxY = y;
                minIndex = maxIndex = startIndex = i;
            }
        }
        return decimated;
    }
    function $68fbc1daad5cf8b5$var$cleanDecimatedDataset(dataset) {
        if (dataset._decimated) {
            var data = dataset._data;
            delete dataset._decimated;
            delete dataset._data;
            Object.defineProperty(dataset, "data", {
                value: data
            });
        }
    }
    function $68fbc1daad5cf8b5$var$cleanDecimatedData(chart) {
        chart.data.datasets.forEach(function(dataset) {
            $68fbc1daad5cf8b5$var$cleanDecimatedDataset(dataset);
        });
    }
    function $68fbc1daad5cf8b5$var$getStartAndCountOfVisiblePointsSimplified(meta, points) {
        var pointCount = points.length;
        var start = 0;
        var count;
        var iScale = meta.iScale;
        var ref = iScale.getUserBounds(), min = ref.min, max = ref.max, minDefined = ref.minDefined, maxDefined = ref.maxDefined;
        if (minDefined) start = $6892236ee0bf6afc$export$efccba1c4a2ef57b($6892236ee0bf6afc$export$d141bba7fdc215a3(points, iScale.axis, min).lo, 0, pointCount - 1);
        if (maxDefined) count = $6892236ee0bf6afc$export$efccba1c4a2ef57b($6892236ee0bf6afc$export$d141bba7fdc215a3(points, iScale.axis, max).hi + 1, start, pointCount) - start;
        else count = pointCount - start;
        return {
            start: start,
            count: count
        };
    }
    var $68fbc1daad5cf8b5$export$be17f937e9aa7533 = {
        id: "decimation",
        defaults: {
            algorithm: "min-max",
            enabled: false
        },
        beforeElementsUpdate: function(chart, args, options) {
            if (!options.enabled) {
                $68fbc1daad5cf8b5$var$cleanDecimatedData(chart);
                return;
            }
            var availableWidth = chart.width;
            chart.data.datasets.forEach(function(dataset, datasetIndex) {
                var _data = dataset._data, indexAxis = dataset.indexAxis;
                var meta = chart.getDatasetMeta(datasetIndex);
                var data = _data || dataset.data;
                if ($6892236ee0bf6afc$export$407448d2b89b1813([
                    indexAxis,
                    chart.options.indexAxis
                ]) === "y") return;
                if (!meta.controller.supportsDecimation) return;
                var xAxis = chart.scales[meta.xAxisID];
                if (xAxis.type !== "linear" && xAxis.type !== "time") return;
                if (chart.options.parsing) return;
                var ref = $68fbc1daad5cf8b5$var$getStartAndCountOfVisiblePointsSimplified(meta, data), start = ref.start, count = ref.count;
                var threshold = options.threshold || 4 * availableWidth;
                if (count <= threshold) {
                    $68fbc1daad5cf8b5$var$cleanDecimatedDataset(dataset);
                    return;
                }
                if ($6892236ee0bf6afc$export$342063e11d6c3cad(_data)) {
                    dataset._data = data;
                    delete dataset.data;
                    Object.defineProperty(dataset, "data", {
                        configurable: true,
                        enumerable: true,
                        get: function get() {
                            return this._decimated;
                        },
                        set: function set(d) {
                            this._data = d;
                        }
                    });
                }
                var decimated;
                switch(options.algorithm){
                    case "lttb":
                        decimated = $68fbc1daad5cf8b5$var$lttbDecimation(data, start, count, availableWidth, options);
                        break;
                    case "min-max":
                        decimated = $68fbc1daad5cf8b5$var$minMaxDecimation(data, start, count, availableWidth);
                        break;
                    default:
                        throw new Error("Unsupported decimation algorithm '".concat(options.algorithm, "'"));
                }
                dataset._decimated = decimated;
            });
        },
        destroy: function(chart) {
            $68fbc1daad5cf8b5$var$cleanDecimatedData(chart);
        }
    };
    function $68fbc1daad5cf8b5$var$_segments(line, target, property) {
        var segments = line.segments;
        var points = line.points;
        var tpoints = target.points;
        var parts = [];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = segments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var segment = _step.value;
                var start = segment.start, end = segment.end;
                end = $68fbc1daad5cf8b5$var$_findSegmentEnd(start, end, points);
                var bounds = $68fbc1daad5cf8b5$var$_getBounds(property, points[start], points[end], segment.loop);
                if (!target.segments) {
                    parts.push({
                        source: segment,
                        target: bounds,
                        start: points[start],
                        end: points[end]
                    });
                    continue;
                }
                var targetSegments = $6892236ee0bf6afc$export$1a82df3d29112e01(target, bounds);
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator1 = targetSegments[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        var tgt = _step1.value;
                        var subBounds = $68fbc1daad5cf8b5$var$_getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
                        var fillSources = $6892236ee0bf6afc$export$92108d983e8ee699(segment, points, subBounds);
                        var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                        try {
                            for(var _iterator2 = fillSources[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                                var fillSource = _step2.value;
                                parts.push({
                                    source: fillSource,
                                    target: tgt,
                                    start: /*@__PURE__*/ $parcel$interopDefault($1W515)({
                                    }, property, $68fbc1daad5cf8b5$var$_getEdge(bounds, subBounds, "start", Math.max)),
                                    end: /*@__PURE__*/ $parcel$interopDefault($1W515)({
                                    }, property, $68fbc1daad5cf8b5$var$_getEdge(bounds, subBounds, "end", Math.min))
                                });
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) _iterator2["return"]();
                            } finally{
                                if (_didIteratorError2) throw _iteratorError2;
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1["return"] != null) _iterator1["return"]();
                    } finally{
                        if (_didIteratorError1) throw _iteratorError1;
                    }
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
        return parts;
    }
    function $68fbc1daad5cf8b5$var$_getBounds(property, first, last, loop) {
        if (loop) return;
        var start = first[property];
        var end = last[property];
        if (property === "angle") {
            start = $6892236ee0bf6afc$export$9fa96a7d116ea3ce(start);
            end = $6892236ee0bf6afc$export$9fa96a7d116ea3ce(end);
        }
        return {
            property: property,
            start: start,
            end: end
        };
    }
    function $68fbc1daad5cf8b5$var$_pointsFromSegments(boundary, line) {
        var ref = boundary || {
        }, _x = ref.x, x = _x === void 0 ? null : _x, _y = ref.y, y = _y === void 0 ? null : _y;
        var linePoints = line.points;
        var points = [];
        line.segments.forEach(function(param) {
            var start = param.start, end = param.end;
            end = $68fbc1daad5cf8b5$var$_findSegmentEnd(start, end, linePoints);
            var first = linePoints[start];
            var last = linePoints[end];
            if (y !== null) {
                points.push({
                    x: first.x,
                    y: y
                });
                points.push({
                    x: last.x,
                    y: y
                });
            } else if (x !== null) {
                points.push({
                    x: x,
                    y: first.y
                });
                points.push({
                    x: x,
                    y: last.y
                });
            }
        });
        return points;
    }
    function $68fbc1daad5cf8b5$var$_findSegmentEnd(start, end, points) {
        for(; end > start; end--){
            var point = points[end];
            if (!isNaN(point.x) && !isNaN(point.y)) break;
        }
        return end;
    }
    function $68fbc1daad5cf8b5$var$_getEdge(a, b, prop, fn) {
        if (a && b) return fn(a[prop], b[prop]);
        return a ? a[prop] : b ? b[prop] : 0;
    }
    function $68fbc1daad5cf8b5$var$_createBoundaryLine(boundary, line) {
        var points = [];
        var _loop = false;
        if ($6892236ee0bf6afc$export$8b22cf2602fb60ce(boundary)) {
            _loop = true;
            points = boundary;
        } else points = $68fbc1daad5cf8b5$var$_pointsFromSegments(boundary, line);
        return points.length ? new $68fbc1daad5cf8b5$export$55e463fa7bcd3469({
            points: points,
            options: {
                tension: 0
            },
            _loop: _loop,
            _fullLoop: _loop
        }) : null;
    }
    function $68fbc1daad5cf8b5$var$_resolveTarget(sources, index57, propagate) {
        var source = sources[index57];
        var fill1 = source.fill;
        var visited = [
            index57
        ];
        var target;
        if (!propagate) return fill1;
        while(fill1 !== false && visited.indexOf(fill1) === -1){
            if (!$6892236ee0bf6afc$export$39b482c5e57630a8(fill1)) return fill1;
            target = sources[fill1];
            if (!target) return false;
            if (target.visible) return fill1;
            visited.push(fill1);
            fill1 = target.fill;
        }
        return false;
    }
    function $68fbc1daad5cf8b5$var$_decodeFill(line, index58, count) {
        var fill2 = $68fbc1daad5cf8b5$var$parseFillOption(line);
        if ($6892236ee0bf6afc$export$23f2a1d2818174ef(fill2)) return isNaN(fill2.value) ? false : fill2;
        var target = parseFloat(fill2);
        if ($6892236ee0bf6afc$export$39b482c5e57630a8(target) && Math.floor(target) === target) return $68fbc1daad5cf8b5$var$decodeTargetIndex(fill2[0], index58, target, count);
        return [
            "origin",
            "start",
            "end",
            "stack",
            "shape"
        ].indexOf(fill2) >= 0 && fill2;
    }
    function $68fbc1daad5cf8b5$var$decodeTargetIndex(firstCh, index59, target, count) {
        if (firstCh === "-" || firstCh === "+") target = index59 + target;
        if (target === index59 || target < 0 || target >= count) return false;
        return target;
    }
    function $68fbc1daad5cf8b5$var$_getTargetPixel(fill3, scale) {
        var pixel = null;
        if (fill3 === "start") pixel = scale.bottom;
        else if (fill3 === "end") pixel = scale.top;
        else if ($6892236ee0bf6afc$export$23f2a1d2818174ef(fill3)) pixel = scale.getPixelForValue(fill3.value);
        else if (scale.getBasePixel) pixel = scale.getBasePixel();
        return pixel;
    }
    function $68fbc1daad5cf8b5$var$_getTargetValue(fill4, scale, startValue) {
        var value;
        if (fill4 === "start") value = startValue;
        else if (fill4 === "end") value = scale.options.reverse ? scale.min : scale.max;
        else if ($6892236ee0bf6afc$export$23f2a1d2818174ef(fill4)) value = fill4.value;
        else value = scale.getBaseValue();
        return value;
    }
    function $68fbc1daad5cf8b5$var$parseFillOption(line) {
        var options = line.options;
        var fillOption = options.fill;
        var fill5 = $6892236ee0bf6afc$export$90a7f3efeed30595(fillOption && fillOption.target, fillOption);
        if (fill5 === undefined) fill5 = !!options.backgroundColor;
        if (fill5 === false || fill5 === null) return false;
        if (fill5 === true) return "origin";
        return fill5;
    }
    function $68fbc1daad5cf8b5$var$_buildStackLine(source) {
        var scale = source.scale, index60 = source.index, line = source.line;
        var points = [];
        var segments = line.segments;
        var sourcePoints = line.points;
        var linesBelow = $68fbc1daad5cf8b5$var$getLinesBelow(scale, index60);
        linesBelow.push($68fbc1daad5cf8b5$var$_createBoundaryLine({
            x: null,
            y: scale.bottom
        }, line));
        for(var i = 0; i < segments.length; i++){
            var segment = segments[i];
            for(var j = segment.start; j <= segment.end; j++)$68fbc1daad5cf8b5$var$addPointsBelow(points, sourcePoints[j], linesBelow);
        }
        return new $68fbc1daad5cf8b5$export$55e463fa7bcd3469({
            points: points,
            options: {
            }
        });
    }
    function $68fbc1daad5cf8b5$var$getLinesBelow(scale, index61) {
        var below = [];
        var metas = scale.getMatchingVisibleMetas("line");
        for(var i = 0; i < metas.length; i++){
            var meta = metas[i];
            if (meta.index === index61) break;
            if (!meta.hidden) below.unshift(meta.dataset);
        }
        return below;
    }
    function $68fbc1daad5cf8b5$var$addPointsBelow(points, sourcePoint, linesBelow) {
        var _points;
        var postponed = [];
        for(var j = 0; j < linesBelow.length; j++){
            var line = linesBelow[j];
            var ref = $68fbc1daad5cf8b5$var$findPoint(line, sourcePoint, "x"), first = ref.first, last = ref.last, point = ref.point;
            if (!point || first && last) continue;
            if (first) postponed.unshift(point);
            else {
                points.push(point);
                if (!last) break;
            }
        }
        (_points = points).push.apply(_points, /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(postponed));
    }
    function $68fbc1daad5cf8b5$var$findPoint(line, sourcePoint, property) {
        var point = line.interpolate(sourcePoint, property);
        if (!point) return {
        };
        var pointValue = point[property];
        var segments = line.segments;
        var linePoints = line.points;
        var first = false;
        var last = false;
        for(var i = 0; i < segments.length; i++){
            var segment = segments[i];
            var firstValue = linePoints[segment.start][property];
            var lastValue = linePoints[segment.end][property];
            if ($6892236ee0bf6afc$export$f38c853ae54ed474(pointValue, firstValue, lastValue)) {
                first = pointValue === firstValue;
                last = pointValue === lastValue;
                break;
            }
        }
        return {
            first: first,
            last: last,
            point: point
        };
    }
    var $68fbc1daad5cf8b5$var$simpleArc = /*#__PURE__*/ function() {
        function simpleArc(opts) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, simpleArc);
            this.x = opts.x;
            this.y = opts.y;
            this.radius = opts.radius;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(simpleArc, [
            {
                key: "pathSegment",
                value: function pathSegment(ctx, bounds, opts) {
                    var ref = this, x = ref.x, y = ref.y, radius = ref.radius;
                    bounds = bounds || {
                        start: 0,
                        end: $6892236ee0bf6afc$export$971d5caa766a69d7
                    };
                    ctx.arc(x, y, radius, bounds.end, bounds.start, true);
                    return !opts.bounds;
                }
            },
            {
                key: "interpolate",
                value: function interpolate(point) {
                    var ref = this, x = ref.x, y = ref.y, radius = ref.radius;
                    var angle = point.angle;
                    return {
                        x: x + Math.cos(angle) * radius,
                        y: y + Math.sin(angle) * radius,
                        angle: angle
                    };
                }
            }
        ]);
        return simpleArc;
    }();
    function $68fbc1daad5cf8b5$var$_getTarget(source) {
        var chart = source.chart, fill6 = source.fill, line = source.line;
        if ($6892236ee0bf6afc$export$39b482c5e57630a8(fill6)) return $68fbc1daad5cf8b5$var$getLineByIndex(chart, fill6);
        if (fill6 === "stack") return $68fbc1daad5cf8b5$var$_buildStackLine(source);
        if (fill6 === "shape") return true;
        var boundary = $68fbc1daad5cf8b5$var$computeBoundary(source);
        if (boundary instanceof $68fbc1daad5cf8b5$var$simpleArc) return boundary;
        return $68fbc1daad5cf8b5$var$_createBoundaryLine(boundary, line);
    }
    function $68fbc1daad5cf8b5$var$getLineByIndex(chart, index62) {
        var meta = chart.getDatasetMeta(index62);
        var visible = meta && chart.isDatasetVisible(index62);
        return visible ? meta.dataset : null;
    }
    function $68fbc1daad5cf8b5$var$computeBoundary(source) {
        var scale = source.scale || {
        };
        if (scale.getPointPositionForValue) return $68fbc1daad5cf8b5$var$computeCircularBoundary(source);
        return $68fbc1daad5cf8b5$var$computeLinearBoundary(source);
    }
    function $68fbc1daad5cf8b5$var$computeLinearBoundary(source) {
        var _scale = source.scale, scale = _scale === void 0 ? {
        } : _scale, fill7 = source.fill;
        var pixel = $68fbc1daad5cf8b5$var$_getTargetPixel(fill7, scale);
        if ($6892236ee0bf6afc$export$39b482c5e57630a8(pixel)) {
            var horizontal = scale.isHorizontal();
            return {
                x: horizontal ? pixel : null,
                y: horizontal ? null : pixel
            };
        }
        return null;
    }
    function $68fbc1daad5cf8b5$var$computeCircularBoundary(source) {
        var scale = source.scale, fill8 = source.fill;
        var options = scale.options;
        var length = scale.getLabels().length;
        var start = options.reverse ? scale.max : scale.min;
        var value = $68fbc1daad5cf8b5$var$_getTargetValue(fill8, scale, start);
        var target = [];
        if (options.grid.circular) {
            var center = scale.getPointPositionForValue(0, start);
            return new $68fbc1daad5cf8b5$var$simpleArc({
                x: center.x,
                y: center.y,
                radius: scale.getDistanceFromCenterForValue(value)
            });
        }
        for(var i = 0; i < length; ++i)target.push(scale.getPointPositionForValue(i, value));
        return target;
    }
    function $68fbc1daad5cf8b5$var$_drawfill(ctx, source, area) {
        var target = $68fbc1daad5cf8b5$var$_getTarget(source);
        var line = source.line, scale = source.scale, axis = source.axis;
        var lineOpts = line.options;
        var fillOption = lineOpts.fill;
        var color2 = lineOpts.backgroundColor;
        var ref = fillOption || {
        }, _above = ref.above, above = _above === void 0 ? color2 : _above, _below = ref.below, below = _below === void 0 ? color2 : _below;
        if (target && line.points.length) {
            $6892236ee0bf6afc$export$78acf4525d8a74c4(ctx, area);
            $68fbc1daad5cf8b5$var$doFill(ctx, {
                line: line,
                target: target,
                above: above,
                below: below,
                area: area,
                scale: scale,
                axis: axis
            });
            $6892236ee0bf6afc$export$dc98b0b04f4c7758(ctx);
        }
    }
    function $68fbc1daad5cf8b5$var$doFill(ctx, cfg) {
        var line = cfg.line, target = cfg.target, above = cfg.above, below = cfg.below, area = cfg.area, scale = cfg.scale;
        var property = line._loop ? "angle" : cfg.axis;
        ctx.save();
        if (property === "x" && below !== above) {
            $68fbc1daad5cf8b5$var$clipVertical(ctx, target, area.top);
            $68fbc1daad5cf8b5$var$fill(ctx, {
                line: line,
                target: target,
                color: above,
                scale: scale,
                property: property
            });
            ctx.restore();
            ctx.save();
            $68fbc1daad5cf8b5$var$clipVertical(ctx, target, area.bottom);
        }
        $68fbc1daad5cf8b5$var$fill(ctx, {
            line: line,
            target: target,
            color: below,
            scale: scale,
            property: property
        });
        ctx.restore();
    }
    function $68fbc1daad5cf8b5$var$clipVertical(ctx, target, clipY) {
        var segments = target.segments, points = target.points;
        var first = true;
        var lineLoop = false;
        ctx.beginPath();
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = segments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var segment = _step.value;
                var start = segment.start, end = segment.end;
                var firstPoint = points[start];
                var lastPoint = points[$68fbc1daad5cf8b5$var$_findSegmentEnd(start, end, points)];
                if (first) {
                    ctx.moveTo(firstPoint.x, firstPoint.y);
                    first = false;
                } else {
                    ctx.lineTo(firstPoint.x, clipY);
                    ctx.lineTo(firstPoint.x, firstPoint.y);
                }
                lineLoop = !!target.pathSegment(ctx, segment, {
                    move: lineLoop
                });
                if (lineLoop) ctx.closePath();
                else ctx.lineTo(lastPoint.x, clipY);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
        ctx.lineTo(target.first().x, clipY);
        ctx.closePath();
        ctx.clip();
    }
    function $68fbc1daad5cf8b5$var$fill(ctx, cfg) {
        var line = cfg.line, target = cfg.target, property = cfg.property, color3 = cfg.color, scale = cfg.scale;
        var segments = $68fbc1daad5cf8b5$var$_segments(line, target, property);
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = segments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var _value = _step.value, src = _value.source, tgt = _value.target, start = _value.start, end = _value.end;
                var tmp = src.style, ref = tmp === void 0 ? {
                } : tmp, _backgroundColor = ref.backgroundColor, backgroundColor = _backgroundColor === void 0 ? color3 : _backgroundColor;
                var notShape = target !== true;
                ctx.save();
                ctx.fillStyle = backgroundColor;
                $68fbc1daad5cf8b5$var$clipBounds(ctx, scale, notShape && $68fbc1daad5cf8b5$var$_getBounds(property, start, end));
                ctx.beginPath();
                var lineLoop = !!line.pathSegment(ctx, src);
                var loop = void 0;
                if (notShape) {
                    if (lineLoop) ctx.closePath();
                    else $68fbc1daad5cf8b5$var$interpolatedLineTo(ctx, target, end, property);
                    var targetLoop = !!target.pathSegment(ctx, tgt, {
                        move: lineLoop,
                        reverse: true
                    });
                    loop = lineLoop && targetLoop;
                    if (!loop) $68fbc1daad5cf8b5$var$interpolatedLineTo(ctx, target, start, property);
                }
                ctx.closePath();
                ctx.fill(loop ? "evenodd" : "nonzero");
                ctx.restore();
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally{
                if (_didIteratorError) throw _iteratorError;
            }
        }
    }
    function $68fbc1daad5cf8b5$var$clipBounds(ctx, scale, bounds) {
        var _chartArea = scale.chart.chartArea, top = _chartArea.top, bottom = _chartArea.bottom;
        var ref = bounds || {
        }, property = ref.property, start = ref.start, end = ref.end;
        if (property === "x") {
            ctx.beginPath();
            ctx.rect(start, top, end - start, bottom - top);
            ctx.clip();
        }
    }
    function $68fbc1daad5cf8b5$var$interpolatedLineTo(ctx, target, point, property) {
        var interpolatedPoint = target.interpolate(point, property);
        if (interpolatedPoint) ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
    }
    var $68fbc1daad5cf8b5$export$d19ba4d812bed757 = {
        id: "filler",
        afterDatasetsUpdate: function(chart, _args, options) {
            var count = (chart.data.datasets || []).length;
            var sources = [];
            var meta, i, line, source;
            for(i = 0; i < count; ++i){
                meta = chart.getDatasetMeta(i);
                line = meta.dataset;
                source = null;
                if (line && line.options && line instanceof $68fbc1daad5cf8b5$export$55e463fa7bcd3469) source = {
                    visible: chart.isDatasetVisible(i),
                    index: i,
                    fill: $68fbc1daad5cf8b5$var$_decodeFill(line, i, count),
                    chart: chart,
                    axis: meta.controller.options.indexAxis,
                    scale: meta.vScale,
                    line: line
                };
                meta.$filler = source;
                sources.push(source);
            }
            for(i = 0; i < count; ++i){
                source = sources[i];
                if (!source || source.fill === false) continue;
                source.fill = $68fbc1daad5cf8b5$var$_resolveTarget(sources, i, options.propagate);
            }
        },
        beforeDraw: function(chart, _args, options) {
            var draw3 = options.drawTime === "beforeDraw";
            var metasets = chart.getSortedVisibleDatasetMetas();
            var area = chart.chartArea;
            for(var i = metasets.length - 1; i >= 0; --i){
                var source = metasets[i].$filler;
                if (!source) continue;
                source.line.updateControlPoints(area, source.axis);
                if (draw3) $68fbc1daad5cf8b5$var$_drawfill(chart.ctx, source, area);
            }
        },
        beforeDatasetsDraw: function(chart, _args, options) {
            if (options.drawTime !== "beforeDatasetsDraw") return;
            var metasets = chart.getSortedVisibleDatasetMetas();
            for(var i = metasets.length - 1; i >= 0; --i){
                var source = metasets[i].$filler;
                if (source) $68fbc1daad5cf8b5$var$_drawfill(chart.ctx, source, chart.chartArea);
            }
        },
        beforeDatasetDraw: function(chart, args, options) {
            var source = args.meta.$filler;
            if (!source || source.fill === false || options.drawTime !== "beforeDatasetDraw") return;
            $68fbc1daad5cf8b5$var$_drawfill(chart.ctx, source, chart.chartArea);
        },
        defaults: {
            propagate: true,
            drawTime: "beforeDatasetDraw"
        }
    };
    var $68fbc1daad5cf8b5$var$getBoxSize = function(labelOpts, fontSize) {
        var _boxHeight = labelOpts.boxHeight, boxHeight = _boxHeight === void 0 ? fontSize : _boxHeight, _boxWidth = labelOpts.boxWidth, boxWidth = _boxWidth === void 0 ? fontSize : _boxWidth;
        if (labelOpts.usePointStyle) {
            boxHeight = Math.min(boxHeight, fontSize);
            boxWidth = Math.min(boxWidth, fontSize);
        }
        return {
            boxWidth: boxWidth,
            boxHeight: boxHeight,
            itemHeight: Math.max(fontSize, boxHeight)
        };
    };
    var $68fbc1daad5cf8b5$var$itemsEqual = function(a, b) {
        return a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
    };
    var $68fbc1daad5cf8b5$var$Legend = /*#__PURE__*/ function(Element) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(Legend, Element);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(Legend);
        function Legend(config) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Legend);
            var _this;
            _this = _super.call(this);
            _this._added = false;
            _this.legendHitBoxes = [];
            _this._hoveredItem = null;
            _this.doughnutMode = false;
            _this.chart = config.chart;
            _this.options = config.options;
            _this.ctx = config.ctx;
            _this.legendItems = undefined;
            _this.columnSizes = undefined;
            _this.lineWidths = undefined;
            _this.maxHeight = undefined;
            _this.maxWidth = undefined;
            _this.top = undefined;
            _this.bottom = undefined;
            _this.left = undefined;
            _this.right = undefined;
            _this.height = undefined;
            _this.width = undefined;
            _this._margins = undefined;
            _this.position = undefined;
            _this.weight = undefined;
            _this.fullSize = undefined;
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Legend, [
            {
                key: "update",
                value: function update(maxWidth, maxHeight, margins) {
                    this.maxWidth = maxWidth;
                    this.maxHeight = maxHeight;
                    this._margins = margins;
                    this.setDimensions();
                    this.buildLabels();
                    this.fit();
                }
            },
            {
                key: "setDimensions",
                value: function setDimensions() {
                    if (this.isHorizontal()) {
                        this.width = this.maxWidth;
                        this.left = this._margins.left;
                        this.right = this.width;
                    } else {
                        this.height = this.maxHeight;
                        this.top = this._margins.top;
                        this.bottom = this.height;
                    }
                }
            },
            {
                key: "buildLabels",
                value: function buildLabels() {
                    var _this = this;
                    var labelOpts = this.options.labels || {
                    };
                    var legendItems = $6892236ee0bf6afc$export$3722cfe417b6ed86(labelOpts.generateLabels, [
                        this.chart
                    ], this) || [];
                    if (labelOpts.filter) legendItems = legendItems.filter(function(item) {
                        return labelOpts.filter(item, _this.chart.data);
                    });
                    if (labelOpts.sort) legendItems = legendItems.sort(function(a, b) {
                        return labelOpts.sort(a, b, _this.chart.data);
                    });
                    if (this.options.reverse) legendItems.reverse();
                    this.legendItems = legendItems;
                }
            },
            {
                key: "fit",
                value: function fit() {
                    var ref = this, options = ref.options, ctx = ref.ctx;
                    if (!options.display) {
                        this.width = this.height = 0;
                        return;
                    }
                    var labelOpts = options.labels;
                    var labelFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(labelOpts.font);
                    var fontSize = labelFont.size;
                    var titleHeight = this._computeTitleHeight();
                    var ref10 = $68fbc1daad5cf8b5$var$getBoxSize(labelOpts, fontSize), boxWidth = ref10.boxWidth, itemHeight = ref10.itemHeight;
                    var width, height;
                    ctx.font = labelFont.string;
                    if (this.isHorizontal()) {
                        width = this.maxWidth;
                        height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
                    } else {
                        height = this.maxHeight;
                        width = this._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;
                    }
                    this.width = Math.min(width, options.maxWidth || this.maxWidth);
                    this.height = Math.min(height, options.maxHeight || this.maxHeight);
                }
            },
            {
                key: "_fitRows",
                value: function _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
                    var ref = this, ctx = ref.ctx, maxWidth = ref.maxWidth, _options = ref.options, padding = _options.labels.padding;
                    var hitboxes = this.legendHitBoxes = [];
                    var lineWidths = this.lineWidths = [
                        0
                    ];
                    var lineHeight = itemHeight + padding;
                    var totalHeight = titleHeight;
                    ctx.textAlign = "left";
                    ctx.textBaseline = "middle";
                    var row = -1;
                    var top = -lineHeight;
                    this.legendItems.forEach(function(legendItem, i) {
                        var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
                        if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
                            totalHeight += lineHeight;
                            lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
                            top += lineHeight;
                            row++;
                        }
                        hitboxes[i] = {
                            left: 0,
                            top: top,
                            row: row,
                            width: itemWidth,
                            height: itemHeight
                        };
                        lineWidths[lineWidths.length - 1] += itemWidth + padding;
                    });
                    return totalHeight;
                }
            },
            {
                key: "_fitCols",
                value: function _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {
                    var ref = this, ctx = ref.ctx, maxHeight = ref.maxHeight, _options = ref.options, padding = _options.labels.padding;
                    var hitboxes = this.legendHitBoxes = [];
                    var columnSizes = this.columnSizes = [];
                    var heightLimit = maxHeight - titleHeight;
                    var totalWidth = padding;
                    var currentColWidth = 0;
                    var currentColHeight = 0;
                    var left = 0;
                    var col = 0;
                    this.legendItems.forEach(function(legendItem, i) {
                        var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
                        if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
                            totalWidth += currentColWidth + padding;
                            columnSizes.push({
                                width: currentColWidth,
                                height: currentColHeight
                            });
                            left += currentColWidth + padding;
                            col++;
                            currentColWidth = currentColHeight = 0;
                        }
                        hitboxes[i] = {
                            left: left,
                            top: currentColHeight,
                            col: col,
                            width: itemWidth,
                            height: itemHeight
                        };
                        currentColWidth = Math.max(currentColWidth, itemWidth);
                        currentColHeight += itemHeight + padding;
                    });
                    totalWidth += currentColWidth;
                    columnSizes.push({
                        width: currentColWidth,
                        height: currentColHeight
                    });
                    return totalWidth;
                }
            },
            {
                key: "adjustHitBoxes",
                value: function adjustHitBoxes() {
                    if (!this.options.display) return;
                    var titleHeight = this._computeTitleHeight();
                    var ref = this, hitboxes = ref.legendHitBoxes, _options = ref.options, align = _options.align, padding = _options.labels.padding, rtl = _options.rtl;
                    var rtlHelper = $6892236ee0bf6afc$export$28f7fcd39efa255(rtl, this.left, this.width);
                    if (this.isHorizontal()) {
                        var row = 0;
                        var left = $6892236ee0bf6afc$export$3c2fa207a37baaea(align, this.left + padding, this.right - this.lineWidths[row]);
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(var _iterator = hitboxes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var hitbox = _step.value;
                                if (row !== hitbox.row) {
                                    row = hitbox.row;
                                    left = $6892236ee0bf6afc$export$3c2fa207a37baaea(align, this.left + padding, this.right - this.lineWidths[row]);
                                }
                                hitbox.top += this.top + titleHeight + padding;
                                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
                                left += hitbox.width + padding;
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                            } finally{
                                if (_didIteratorError) throw _iteratorError;
                            }
                        }
                    } else {
                        var col = 0;
                        var top = $6892236ee0bf6afc$export$3c2fa207a37baaea(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
                        var _iteratorNormalCompletion3 = true, _didIteratorError3 = false, _iteratorError3 = undefined;
                        try {
                            for(var _iterator3 = hitboxes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true){
                                var hitbox1 = _step3.value;
                                if (hitbox1.col !== col) {
                                    col = hitbox1.col;
                                    top = $6892236ee0bf6afc$export$3c2fa207a37baaea(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
                                }
                                hitbox1.top = top;
                                hitbox1.left += this.left + padding;
                                hitbox1.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox1.left), hitbox1.width);
                                top += hitbox1.height + padding;
                            }
                        } catch (err) {
                            _didIteratorError3 = true;
                            _iteratorError3 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) _iterator3["return"]();
                            } finally{
                                if (_didIteratorError3) throw _iteratorError3;
                            }
                        }
                    }
                }
            },
            {
                key: "isHorizontal",
                value: function isHorizontal() {
                    return this.options.position === "top" || this.options.position === "bottom";
                }
            },
            {
                key: "draw",
                value: function draw2() {
                    if (this.options.display) {
                        var ctx = this.ctx;
                        $6892236ee0bf6afc$export$78acf4525d8a74c4(ctx, this);
                        this._draw();
                        $6892236ee0bf6afc$export$dc98b0b04f4c7758(ctx);
                    }
                }
            },
            {
                key: "_draw",
                value: function _draw() {
                    var _this = this;
                    var ref = this, opts = ref.options, columnSizes = ref.columnSizes, lineWidths = ref.lineWidths, ctx = ref.ctx;
                    var align = opts.align, labelOpts = opts.labels;
                    var defaultColor = $6892236ee0bf6afc$export$4368d992c4eafac0.color;
                    var rtlHelper = $6892236ee0bf6afc$export$28f7fcd39efa255(opts.rtl, this.left, this.width);
                    var labelFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(labelOpts.font);
                    var fontColor = labelOpts.color, padding = labelOpts.padding;
                    var fontSize = labelFont.size;
                    var halfFontSize = fontSize / 2;
                    var cursor;
                    this.drawTitle();
                    ctx.textAlign = rtlHelper.textAlign("left");
                    ctx.textBaseline = "middle";
                    ctx.lineWidth = 0.5;
                    ctx.font = labelFont.string;
                    var ref11 = $68fbc1daad5cf8b5$var$getBoxSize(labelOpts, fontSize), boxWidth = ref11.boxWidth, boxHeight = ref11.boxHeight, itemHeight = ref11.itemHeight;
                    var drawLegendBox = function drawLegendBox(x, y, legendItem) {
                        if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) return;
                        ctx.save();
                        var lineWidth = $6892236ee0bf6afc$export$90a7f3efeed30595(legendItem.lineWidth, 1);
                        ctx.fillStyle = $6892236ee0bf6afc$export$90a7f3efeed30595(legendItem.fillStyle, defaultColor);
                        ctx.lineCap = $6892236ee0bf6afc$export$90a7f3efeed30595(legendItem.lineCap, "butt");
                        ctx.lineDashOffset = $6892236ee0bf6afc$export$90a7f3efeed30595(legendItem.lineDashOffset, 0);
                        ctx.lineJoin = $6892236ee0bf6afc$export$90a7f3efeed30595(legendItem.lineJoin, "miter");
                        ctx.lineWidth = lineWidth;
                        ctx.strokeStyle = $6892236ee0bf6afc$export$90a7f3efeed30595(legendItem.strokeStyle, defaultColor);
                        ctx.setLineDash($6892236ee0bf6afc$export$90a7f3efeed30595(legendItem.lineDash, []));
                        if (labelOpts.usePointStyle) {
                            var drawOptions = {
                                radius: boxWidth * Math.SQRT2 / 2,
                                pointStyle: legendItem.pointStyle,
                                rotation: legendItem.rotation,
                                borderWidth: lineWidth
                            };
                            var centerX = rtlHelper.xPlus(x, boxWidth / 2);
                            var centerY = y + halfFontSize;
                            $6892236ee0bf6afc$export$6554612db691658e(ctx, drawOptions, centerX, centerY);
                        } else {
                            var yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
                            var xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
                            var borderRadius = $6892236ee0bf6afc$export$d66dc83d8cfc8dd(legendItem.borderRadius);
                            ctx.beginPath();
                            if (Object.values(borderRadius).some(function(v) {
                                return v !== 0;
                            })) $6892236ee0bf6afc$export$493d36ec626b6698(ctx, {
                                x: xBoxLeft,
                                y: yBoxTop,
                                w: boxWidth,
                                h: boxHeight,
                                radius: borderRadius
                            });
                            else ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
                            ctx.fill();
                            if (lineWidth !== 0) ctx.stroke();
                        }
                        ctx.restore();
                    };
                    var fillText = function fillText(x, y, legendItem) {
                        $6892236ee0bf6afc$export$8743009a87fcb00f(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {
                            strikethrough: legendItem.hidden,
                            textAlign: rtlHelper.textAlign(legendItem.textAlign)
                        });
                    };
                    var isHorizontal = this.isHorizontal();
                    var titleHeight = this._computeTitleHeight();
                    if (isHorizontal) cursor = {
                        x: $6892236ee0bf6afc$export$3c2fa207a37baaea(align, this.left + padding, this.right - lineWidths[0]),
                        y: this.top + padding + titleHeight,
                        line: 0
                    };
                    else cursor = {
                        x: this.left + padding,
                        y: $6892236ee0bf6afc$export$3c2fa207a37baaea(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
                        line: 0
                    };
                    $6892236ee0bf6afc$export$3d12bd131bb975d1(this.ctx, opts.textDirection);
                    var lineHeight = itemHeight + padding;
                    this.legendItems.forEach(function(legendItem, i) {
                        ctx.strokeStyle = legendItem.fontColor || fontColor;
                        ctx.fillStyle = legendItem.fontColor || fontColor;
                        var textWidth = ctx.measureText(legendItem.text).width;
                        var textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
                        var width = boxWidth + halfFontSize + textWidth;
                        var x = cursor.x;
                        var y = cursor.y;
                        rtlHelper.setWidth(_this.width);
                        if (isHorizontal) {
                            if (i > 0 && x + width + padding > _this.right) {
                                y = cursor.y += lineHeight;
                                cursor.line++;
                                x = cursor.x = $6892236ee0bf6afc$export$3c2fa207a37baaea(align, _this.left + padding, _this.right - lineWidths[cursor.line]);
                            }
                        } else if (i > 0 && y + lineHeight > _this.bottom) {
                            x = cursor.x = x + columnSizes[cursor.line].width + padding;
                            cursor.line++;
                            y = cursor.y = $6892236ee0bf6afc$export$3c2fa207a37baaea(align, _this.top + titleHeight + padding, _this.bottom - columnSizes[cursor.line].height);
                        }
                        var realX = rtlHelper.x(x);
                        drawLegendBox(realX, y, legendItem);
                        x = $6892236ee0bf6afc$export$91c6e00c14e7e6fd(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : _this.right, opts.rtl);
                        fillText(rtlHelper.x(x), y, legendItem);
                        if (isHorizontal) cursor.x += width + padding;
                        else cursor.y += lineHeight;
                    });
                    $6892236ee0bf6afc$export$9d398bebfec1c039(this.ctx, opts.textDirection);
                }
            },
            {
                key: "drawTitle",
                value: function drawTitle() {
                    var opts = this.options;
                    var titleOpts = opts.title;
                    var titleFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(titleOpts.font);
                    var titlePadding = $6892236ee0bf6afc$export$96f57966bedc81b4(titleOpts.padding);
                    if (!titleOpts.display) return;
                    var rtlHelper = $6892236ee0bf6afc$export$28f7fcd39efa255(opts.rtl, this.left, this.width);
                    var ctx = this.ctx;
                    var position = titleOpts.position;
                    var halfFontSize = titleFont.size / 2;
                    var topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
                    var y;
                    var left = this.left;
                    var maxWidth = this.width;
                    if (this.isHorizontal()) {
                        var _Math;
                        maxWidth = (_Math = Math).max.apply(_Math, /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(this.lineWidths));
                        y = this.top + topPaddingPlusHalfFontSize;
                        left = $6892236ee0bf6afc$export$3c2fa207a37baaea(opts.align, left, this.right - maxWidth);
                    } else {
                        var maxHeight = this.columnSizes.reduce(function(acc, size) {
                            return Math.max(acc, size.height);
                        }, 0);
                        y = topPaddingPlusHalfFontSize + $6892236ee0bf6afc$export$3c2fa207a37baaea(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
                    }
                    var x = $6892236ee0bf6afc$export$3c2fa207a37baaea(position, left, left + maxWidth);
                    ctx.textAlign = rtlHelper.textAlign($6892236ee0bf6afc$export$34aec0b863436764(position));
                    ctx.textBaseline = "middle";
                    ctx.strokeStyle = titleOpts.color;
                    ctx.fillStyle = titleOpts.color;
                    ctx.font = titleFont.string;
                    $6892236ee0bf6afc$export$8743009a87fcb00f(ctx, titleOpts.text, x, y, titleFont);
                }
            },
            {
                key: "_computeTitleHeight",
                value: function _computeTitleHeight() {
                    var titleOpts = this.options.title;
                    var titleFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(titleOpts.font);
                    var titlePadding = $6892236ee0bf6afc$export$96f57966bedc81b4(titleOpts.padding);
                    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
                }
            },
            {
                key: "_getLegendItemAt",
                value: function _getLegendItemAt(x, y) {
                    var i, hitBox, lh;
                    if ($6892236ee0bf6afc$export$f38c853ae54ed474(x, this.left, this.right) && $6892236ee0bf6afc$export$f38c853ae54ed474(y, this.top, this.bottom)) {
                        lh = this.legendHitBoxes;
                        for(i = 0; i < lh.length; ++i){
                            hitBox = lh[i];
                            if ($6892236ee0bf6afc$export$f38c853ae54ed474(x, hitBox.left, hitBox.left + hitBox.width) && $6892236ee0bf6afc$export$f38c853ae54ed474(y, hitBox.top, hitBox.top + hitBox.height)) return this.legendItems[i];
                        }
                    }
                    return null;
                }
            },
            {
                key: "handleEvent",
                value: function handleEvent(e) {
                    var opts = this.options;
                    if (!$68fbc1daad5cf8b5$var$isListened(e.type, opts)) return;
                    var hoveredItem = this._getLegendItemAt(e.x, e.y);
                    if (e.type === "mousemove" || e.type === "mouseout") {
                        var previous = this._hoveredItem;
                        var sameItem = $68fbc1daad5cf8b5$var$itemsEqual(previous, hoveredItem);
                        if (previous && !sameItem) $6892236ee0bf6afc$export$3722cfe417b6ed86(opts.onLeave, [
                            e,
                            previous,
                            this
                        ], this);
                        this._hoveredItem = hoveredItem;
                        if (hoveredItem && !sameItem) $6892236ee0bf6afc$export$3722cfe417b6ed86(opts.onHover, [
                            e,
                            hoveredItem,
                            this
                        ], this);
                    } else if (hoveredItem) $6892236ee0bf6afc$export$3722cfe417b6ed86(opts.onClick, [
                        e,
                        hoveredItem,
                        this
                    ], this);
                }
            }
        ]);
        return Legend;
    }(/*@__PURE__*/ $parcel$interopDefault($16755fe9f4f0f745$exports)($68fbc1daad5cf8b5$export$db77ccec0bb4ccac));
    function $68fbc1daad5cf8b5$var$isListened(type, opts) {
        if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) return true;
        if (opts.onClick && (type === "click" || type === "mouseup")) return true;
        return false;
    }
    var $68fbc1daad5cf8b5$export$ed247974535929c7 = {
        id: "legend",
        _element: $68fbc1daad5cf8b5$var$Legend,
        start: function(chart, _args, options) {
            var legend = chart.legend = new $68fbc1daad5cf8b5$var$Legend({
                ctx: chart.ctx,
                options: options,
                chart: chart
            });
            $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.configure(chart, legend, options);
            $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.addBox(chart, legend);
        },
        stop: function(chart) {
            $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.removeBox(chart, chart.legend);
            delete chart.legend;
        },
        beforeUpdate: function(chart, _args, options) {
            var legend = chart.legend;
            $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.configure(chart, legend, options);
            legend.options = options;
        },
        afterUpdate: function(chart) {
            var legend = chart.legend;
            legend.buildLabels();
            legend.adjustHitBoxes();
        },
        afterEvent: function(chart, args) {
            if (!args.replay) chart.legend.handleEvent(args.event);
        },
        defaults: {
            display: true,
            position: "top",
            align: "center",
            fullSize: true,
            reverse: false,
            weight: 1000,
            onClick: function(e, legendItem, legend) {
                var index63 = legendItem.datasetIndex;
                var ci = legend.chart;
                if (ci.isDatasetVisible(index63)) {
                    ci.hide(index63);
                    legendItem.hidden = true;
                } else {
                    ci.show(index63);
                    legendItem.hidden = false;
                }
            },
            onHover: null,
            onLeave: null,
            labels: {
                color: function(ctx) {
                    return ctx.chart.options.color;
                },
                boxWidth: 40,
                padding: 10,
                generateLabels: function(chart) {
                    var datasets = chart.data.datasets;
                    var _options = chart.legend.options, _labels = _options.labels, usePointStyle = _labels.usePointStyle, pointStyle = _labels.pointStyle, textAlign = _labels.textAlign, color4 = _labels.color;
                    return chart._getSortedDatasetMetas().map(function(meta) {
                        var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
                        var borderWidth = $6892236ee0bf6afc$export$96f57966bedc81b4(style.borderWidth);
                        return {
                            text: datasets[meta.index].label,
                            fillStyle: style.backgroundColor,
                            fontColor: color4,
                            hidden: !meta.visible,
                            lineCap: style.borderCapStyle,
                            lineDash: style.borderDash,
                            lineDashOffset: style.borderDashOffset,
                            lineJoin: style.borderJoinStyle,
                            lineWidth: (borderWidth.width + borderWidth.height) / 4,
                            strokeStyle: style.borderColor,
                            pointStyle: pointStyle || style.pointStyle,
                            rotation: style.rotation,
                            textAlign: textAlign || style.textAlign,
                            borderRadius: 0,
                            datasetIndex: meta.index
                        };
                    }, this);
                }
            },
            title: {
                color: function(ctx) {
                    return ctx.chart.options.color;
                },
                display: false,
                position: "center",
                text: ""
            }
        },
        descriptors: {
            _scriptable: function(name) {
                return !name.startsWith("on");
            },
            labels: {
                _scriptable: function(name) {
                    return ![
                        "generateLabels",
                        "filter",
                        "sort"
                    ].includes(name);
                }
            }
        }
    };
    var $68fbc1daad5cf8b5$var$Title = /*#__PURE__*/ function(Element) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(Title, Element);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(Title);
        function Title(config) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Title);
            var _this;
            _this = _super.call(this);
            _this.chart = config.chart;
            _this.options = config.options;
            _this.ctx = config.ctx;
            _this._padding = undefined;
            _this.top = undefined;
            _this.bottom = undefined;
            _this.left = undefined;
            _this.right = undefined;
            _this.width = undefined;
            _this.height = undefined;
            _this.position = undefined;
            _this.weight = undefined;
            _this.fullSize = undefined;
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Title, [
            {
                key: "update",
                value: function update(maxWidth, maxHeight) {
                    var opts = this.options;
                    this.left = 0;
                    this.top = 0;
                    if (!opts.display) {
                        this.width = this.height = this.right = this.bottom = 0;
                        return;
                    }
                    this.width = this.right = maxWidth;
                    this.height = this.bottom = maxHeight;
                    var lineCount = $6892236ee0bf6afc$export$8b22cf2602fb60ce(opts.text) ? opts.text.length : 1;
                    this._padding = $6892236ee0bf6afc$export$96f57966bedc81b4(opts.padding);
                    var textSize = lineCount * $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(opts.font).lineHeight + this._padding.height;
                    if (this.isHorizontal()) this.height = textSize;
                    else this.width = textSize;
                }
            },
            {
                key: "isHorizontal",
                value: function isHorizontal() {
                    var pos = this.options.position;
                    return pos === "top" || pos === "bottom";
                }
            },
            {
                key: "_drawArgs",
                value: function _drawArgs(offset) {
                    var ref = this, top = ref.top, left = ref.left, bottom = ref.bottom, right = ref.right, options = ref.options;
                    var align = options.align;
                    var rotation = 0;
                    var maxWidth, titleX, titleY;
                    if (this.isHorizontal()) {
                        titleX = $6892236ee0bf6afc$export$3c2fa207a37baaea(align, left, right);
                        titleY = top + offset;
                        maxWidth = right - left;
                    } else {
                        if (options.position === "left") {
                            titleX = left + offset;
                            titleY = $6892236ee0bf6afc$export$3c2fa207a37baaea(align, bottom, top);
                            rotation = $6892236ee0bf6afc$export$56c0d5a1e737357d * -0.5;
                        } else {
                            titleX = right - offset;
                            titleY = $6892236ee0bf6afc$export$3c2fa207a37baaea(align, top, bottom);
                            rotation = $6892236ee0bf6afc$export$56c0d5a1e737357d * 0.5;
                        }
                        maxWidth = bottom - top;
                    }
                    return {
                        titleX: titleX,
                        titleY: titleY,
                        maxWidth: maxWidth,
                        rotation: rotation
                    };
                }
            },
            {
                key: "draw",
                value: function draw2() {
                    var ctx = this.ctx;
                    var opts = this.options;
                    if (!opts.display) return;
                    var fontOpts = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(opts.font);
                    var lineHeight = fontOpts.lineHeight;
                    var offset = lineHeight / 2 + this._padding.top;
                    var ref = this._drawArgs(offset), titleX = ref.titleX, titleY = ref.titleY, maxWidth = ref.maxWidth, rotation = ref.rotation;
                    $6892236ee0bf6afc$export$8743009a87fcb00f(ctx, opts.text, 0, 0, fontOpts, {
                        color: opts.color,
                        maxWidth: maxWidth,
                        rotation: rotation,
                        textAlign: $6892236ee0bf6afc$export$34aec0b863436764(opts.align),
                        textBaseline: "middle",
                        translation: [
                            titleX,
                            titleY
                        ]
                    });
                }
            }
        ]);
        return Title;
    }(/*@__PURE__*/ $parcel$interopDefault($16755fe9f4f0f745$exports)($68fbc1daad5cf8b5$export$db77ccec0bb4ccac));
    function $68fbc1daad5cf8b5$var$createTitle(chart, titleOpts) {
        var title = new $68fbc1daad5cf8b5$var$Title({
            ctx: chart.ctx,
            options: titleOpts,
            chart: chart
        });
        $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.configure(chart, title, titleOpts);
        $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.addBox(chart, title);
        chart.titleBlock = title;
    }
    var $68fbc1daad5cf8b5$export$f99233281efd08a0 = {
        id: "title",
        _element: $68fbc1daad5cf8b5$var$Title,
        start: function(chart, _args, options) {
            $68fbc1daad5cf8b5$var$createTitle(chart, options);
        },
        stop: function(chart) {
            var titleBlock = chart.titleBlock;
            $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.removeBox(chart, titleBlock);
            delete chart.titleBlock;
        },
        beforeUpdate: function(chart, _args, options) {
            var title = chart.titleBlock;
            $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.configure(chart, title, options);
            title.options = options;
        },
        defaults: {
            align: "center",
            display: false,
            font: {
                weight: "bold"
            },
            fullSize: true,
            padding: 10,
            position: "top",
            text: "",
            weight: 2000
        },
        defaultRoutes: {
            color: "color"
        },
        descriptors: {
            _scriptable: true,
            _indexable: false
        }
    };
    var $68fbc1daad5cf8b5$var$map = new WeakMap();
    var $68fbc1daad5cf8b5$export$d5c56664638992a4 = {
        id: "subtitle",
        start: function(chart, _args, options) {
            var title = new $68fbc1daad5cf8b5$var$Title({
                ctx: chart.ctx,
                options: options,
                chart: chart
            });
            $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.configure(chart, title, options);
            $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.addBox(chart, title);
            $68fbc1daad5cf8b5$var$map.set(chart, title);
        },
        stop: function(chart) {
            $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.removeBox(chart, $68fbc1daad5cf8b5$var$map.get(chart));
            $68fbc1daad5cf8b5$var$map["delete"](chart);
        },
        beforeUpdate: function(chart, _args, options) {
            var title = $68fbc1daad5cf8b5$var$map.get(chart);
            $68fbc1daad5cf8b5$export$1ecca0613f5e56d2.configure(chart, title, options);
            title.options = options;
        },
        defaults: {
            align: "center",
            display: false,
            font: {
                weight: "normal"
            },
            fullSize: true,
            padding: 0,
            position: "top",
            text: "",
            weight: 1500
        },
        defaultRoutes: {
            color: "color"
        },
        descriptors: {
            _scriptable: true,
            _indexable: false
        }
    };
    var $68fbc1daad5cf8b5$var$positioners = {
        average: function(items) {
            if (!items.length) return false;
            var i, len;
            var x = 0;
            var y = 0;
            var count = 0;
            for(i = 0, len = items.length; i < len; ++i){
                var el = items[i].element;
                if (el && el.hasValue()) {
                    var pos = el.tooltipPosition();
                    x += pos.x;
                    y += pos.y;
                    ++count;
                }
            }
            return {
                x: x / count,
                y: y / count
            };
        },
        nearest: function(items, eventPosition) {
            if (!items.length) return false;
            var x = eventPosition.x;
            var y = eventPosition.y;
            var minDistance = Number.POSITIVE_INFINITY;
            var i, len, nearestElement;
            for(i = 0, len = items.length; i < len; ++i){
                var el = items[i].element;
                if (el && el.hasValue()) {
                    var center = el.getCenterPoint();
                    var d = $6892236ee0bf6afc$export$24baa2b76016ce0e(eventPosition, center);
                    if (d < minDistance) {
                        minDistance = d;
                        nearestElement = el;
                    }
                }
            }
            if (nearestElement) {
                var tp = nearestElement.tooltipPosition();
                x = tp.x;
                y = tp.y;
            }
            return {
                x: x,
                y: y
            };
        }
    };
    function $68fbc1daad5cf8b5$var$pushOrConcat(base, toPush) {
        if (toPush) {
            if ($6892236ee0bf6afc$export$8b22cf2602fb60ce(toPush)) Array.prototype.push.apply(base, toPush);
            else base.push(toPush);
        }
        return base;
    }
    function $68fbc1daad5cf8b5$var$splitNewlines(str) {
        if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) return str.split("\n");
        return str;
    }
    function $68fbc1daad5cf8b5$var$createTooltipItem(chart, item) {
        var element = item.element, datasetIndex = item.datasetIndex, index64 = item.index;
        var controller = chart.getDatasetMeta(datasetIndex).controller;
        var ref = controller.getLabelAndValue(index64), label = ref.label, value = ref.value;
        return {
            chart: chart,
            label: label,
            parsed: controller.getParsed(index64),
            raw: chart.data.datasets[datasetIndex].data[index64],
            formattedValue: value,
            dataset: controller.getDataset(),
            dataIndex: index64,
            datasetIndex: datasetIndex,
            element: element
        };
    }
    function $68fbc1daad5cf8b5$var$getTooltipSize(tooltip, options) {
        var ctx = tooltip.chart.ctx;
        var body = tooltip.body, footer = tooltip.footer, title = tooltip.title;
        var boxWidth = options.boxWidth, boxHeight = options.boxHeight;
        var bodyFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(options.bodyFont);
        var titleFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(options.titleFont);
        var footerFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(options.footerFont);
        var titleLineCount = title.length;
        var footerLineCount = footer.length;
        var bodyLineItemCount = body.length;
        var padding = $6892236ee0bf6afc$export$96f57966bedc81b4(options.padding);
        var height = padding.height;
        var width = 0;
        var combinedBodyLength = body.reduce(function(count, bodyItem) {
            return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
        }, 0);
        combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
        if (titleLineCount) height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
        if (combinedBodyLength) {
            var bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
            height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
        }
        if (footerLineCount) height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
        var widthPadding = 0;
        var maxLineWidth = function maxLineWidth(line) {
            width = Math.max(width, ctx.measureText(line).width + widthPadding);
        };
        ctx.save();
        ctx.font = titleFont.string;
        $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(tooltip.title, maxLineWidth);
        ctx.font = bodyFont.string;
        $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
        widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
        $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(body, function(bodyItem) {
            $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(bodyItem.before, maxLineWidth);
            $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(bodyItem.lines, maxLineWidth);
            $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(bodyItem.after, maxLineWidth);
        });
        widthPadding = 0;
        ctx.font = footerFont.string;
        $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(tooltip.footer, maxLineWidth);
        ctx.restore();
        width += padding.width;
        return {
            width: width,
            height: height
        };
    }
    function $68fbc1daad5cf8b5$var$determineYAlign(chart, size) {
        var y = size.y, height = size.height;
        if (y < height / 2) return "top";
        else if (y > chart.height - height / 2) return "bottom";
        return "center";
    }
    function $68fbc1daad5cf8b5$var$doesNotFitWithAlign(xAlign, chart, options, size) {
        var x = size.x, width = size.width;
        var caret = options.caretSize + options.caretPadding;
        if (xAlign === "left" && x + width + caret > chart.width) return true;
        if (xAlign === "right" && x - width - caret < 0) return true;
    }
    function $68fbc1daad5cf8b5$var$determineXAlign(chart, options, size, yAlign) {
        var x = size.x, width = size.width;
        var chartWidth = chart.width, _chartArea = chart.chartArea, left = _chartArea.left, right = _chartArea.right;
        var xAlign = "center";
        if (yAlign === "center") xAlign = x <= (left + right) / 2 ? "left" : "right";
        else if (x <= width / 2) xAlign = "left";
        else if (x >= chartWidth - width / 2) xAlign = "right";
        if ($68fbc1daad5cf8b5$var$doesNotFitWithAlign(xAlign, chart, options, size)) xAlign = "center";
        return xAlign;
    }
    function $68fbc1daad5cf8b5$var$determineAlignment(chart, options, size) {
        var yAlign = size.yAlign || options.yAlign || $68fbc1daad5cf8b5$var$determineYAlign(chart, size);
        return {
            xAlign: size.xAlign || options.xAlign || $68fbc1daad5cf8b5$var$determineXAlign(chart, options, size, yAlign),
            yAlign: yAlign
        };
    }
    function $68fbc1daad5cf8b5$var$alignX(size, xAlign) {
        var x = size.x, width = size.width;
        if (xAlign === "right") x -= width;
        else if (xAlign === "center") x -= width / 2;
        return x;
    }
    function $68fbc1daad5cf8b5$var$alignY(size, yAlign, paddingAndSize) {
        var y = size.y, height = size.height;
        if (yAlign === "top") y += paddingAndSize;
        else if (yAlign === "bottom") y -= height + paddingAndSize;
        else y -= height / 2;
        return y;
    }
    function $68fbc1daad5cf8b5$var$getBackgroundPoint(options, size, alignment, chart) {
        var caretSize = options.caretSize, caretPadding = options.caretPadding, cornerRadius = options.cornerRadius;
        var xAlign = alignment.xAlign, yAlign = alignment.yAlign;
        var paddingAndSize = caretSize + caretPadding;
        var ref = $6892236ee0bf6afc$export$d66dc83d8cfc8dd(cornerRadius), topLeft = ref.topLeft, topRight = ref.topRight, bottomLeft = ref.bottomLeft, bottomRight = ref.bottomRight;
        var x = $68fbc1daad5cf8b5$var$alignX(size, xAlign);
        var y = $68fbc1daad5cf8b5$var$alignY(size, yAlign, paddingAndSize);
        if (yAlign === "center") {
            if (xAlign === "left") x += paddingAndSize;
            else if (xAlign === "right") x -= paddingAndSize;
        } else if (xAlign === "left") x -= Math.max(topLeft, bottomLeft) + caretSize;
        else if (xAlign === "right") x += Math.max(topRight, bottomRight) + caretSize;
        return {
            x: $6892236ee0bf6afc$export$efccba1c4a2ef57b(x, 0, chart.width - size.width),
            y: $6892236ee0bf6afc$export$efccba1c4a2ef57b(y, 0, chart.height - size.height)
        };
    }
    function $68fbc1daad5cf8b5$var$getAlignedX(tooltip, align, options) {
        var padding = $6892236ee0bf6afc$export$96f57966bedc81b4(options.padding);
        return align === "center" ? tooltip.x + tooltip.width / 2 : align === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
    }
    function $68fbc1daad5cf8b5$var$getBeforeAfterBodyLines(callback1) {
        return $68fbc1daad5cf8b5$var$pushOrConcat([], $68fbc1daad5cf8b5$var$splitNewlines(callback1));
    }
    function $68fbc1daad5cf8b5$var$createTooltipContext(parent, tooltip, tooltipItems) {
        return $6892236ee0bf6afc$export$dda1d9f60106f0e9(parent, {
            tooltip: tooltip,
            tooltipItems: tooltipItems,
            type: "tooltip"
        });
    }
    function $68fbc1daad5cf8b5$var$overrideCallbacks(callbacks, context) {
        var override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
        return override ? callbacks.override(override) : callbacks;
    }
    var $68fbc1daad5cf8b5$var$Tooltip = /*#__PURE__*/ function(Element) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(Tooltip, Element);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(Tooltip);
        function Tooltip(config) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, Tooltip);
            var _this;
            _this = _super.call(this);
            _this.opacity = 0;
            _this._active = [];
            _this._eventPosition = undefined;
            _this._size = undefined;
            _this._cachedAnimations = undefined;
            _this._tooltipItems = [];
            _this.$animations = undefined;
            _this.$context = undefined;
            _this.chart = config.chart || config._chart;
            _this._chart = _this.chart;
            _this.options = config.options;
            _this.dataPoints = undefined;
            _this.title = undefined;
            _this.beforeBody = undefined;
            _this.body = undefined;
            _this.afterBody = undefined;
            _this.footer = undefined;
            _this.xAlign = undefined;
            _this.yAlign = undefined;
            _this.x = undefined;
            _this.y = undefined;
            _this.height = undefined;
            _this.width = undefined;
            _this.caretX = undefined;
            _this.caretY = undefined;
            _this.labelColors = undefined;
            _this.labelPointStyles = undefined;
            _this.labelTextColors = undefined;
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(Tooltip, [
            {
                key: "initialize",
                value: function initialize(options) {
                    this.options = options;
                    this._cachedAnimations = undefined;
                    this.$context = undefined;
                }
            },
            {
                key: "_resolveAnimations",
                value: function _resolveAnimations() {
                    var cached = this._cachedAnimations;
                    if (cached) return cached;
                    var chart = this.chart;
                    var options = this.options.setContext(this.getContext());
                    var opts = options.enabled && chart.options.animation && options.animations;
                    var animations = new $68fbc1daad5cf8b5$export$8ab227dac26677d(this.chart, opts);
                    if (opts._cacheable) this._cachedAnimations = Object.freeze(animations);
                    return animations;
                }
            },
            {
                key: "getContext",
                value: function getContext() {
                    return this.$context || (this.$context = $68fbc1daad5cf8b5$var$createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
                }
            },
            {
                key: "getTitle",
                value: function getTitle(context, options) {
                    var callbacks = options.callbacks;
                    var beforeTitle = callbacks.beforeTitle.apply(this, [
                        context
                    ]);
                    var title = callbacks.title.apply(this, [
                        context
                    ]);
                    var afterTitle = callbacks.afterTitle.apply(this, [
                        context
                    ]);
                    var lines = [];
                    lines = $68fbc1daad5cf8b5$var$pushOrConcat(lines, $68fbc1daad5cf8b5$var$splitNewlines(beforeTitle));
                    lines = $68fbc1daad5cf8b5$var$pushOrConcat(lines, $68fbc1daad5cf8b5$var$splitNewlines(title));
                    lines = $68fbc1daad5cf8b5$var$pushOrConcat(lines, $68fbc1daad5cf8b5$var$splitNewlines(afterTitle));
                    return lines;
                }
            },
            {
                key: "getBeforeBody",
                value: function getBeforeBody(tooltipItems, options) {
                    return $68fbc1daad5cf8b5$var$getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [
                        tooltipItems
                    ]));
                }
            },
            {
                key: "getBody",
                value: function getBody(tooltipItems, options) {
                    var _this = this;
                    var callbacks = options.callbacks;
                    var bodyItems = [];
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(tooltipItems, function(context) {
                        var bodyItem = {
                            before: [],
                            lines: [],
                            after: []
                        };
                        var scoped = $68fbc1daad5cf8b5$var$overrideCallbacks(callbacks, context);
                        $68fbc1daad5cf8b5$var$pushOrConcat(bodyItem.before, $68fbc1daad5cf8b5$var$splitNewlines(scoped.beforeLabel.call(_this, context)));
                        $68fbc1daad5cf8b5$var$pushOrConcat(bodyItem.lines, scoped.label.call(_this, context));
                        $68fbc1daad5cf8b5$var$pushOrConcat(bodyItem.after, $68fbc1daad5cf8b5$var$splitNewlines(scoped.afterLabel.call(_this, context)));
                        bodyItems.push(bodyItem);
                    });
                    return bodyItems;
                }
            },
            {
                key: "getAfterBody",
                value: function getAfterBody(tooltipItems, options) {
                    return $68fbc1daad5cf8b5$var$getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [
                        tooltipItems
                    ]));
                }
            },
            {
                key: "getFooter",
                value: function getFooter(tooltipItems, options) {
                    var callbacks = options.callbacks;
                    var beforeFooter = callbacks.beforeFooter.apply(this, [
                        tooltipItems
                    ]);
                    var footer = callbacks.footer.apply(this, [
                        tooltipItems
                    ]);
                    var afterFooter = callbacks.afterFooter.apply(this, [
                        tooltipItems
                    ]);
                    var lines = [];
                    lines = $68fbc1daad5cf8b5$var$pushOrConcat(lines, $68fbc1daad5cf8b5$var$splitNewlines(beforeFooter));
                    lines = $68fbc1daad5cf8b5$var$pushOrConcat(lines, $68fbc1daad5cf8b5$var$splitNewlines(footer));
                    lines = $68fbc1daad5cf8b5$var$pushOrConcat(lines, $68fbc1daad5cf8b5$var$splitNewlines(afterFooter));
                    return lines;
                }
            },
            {
                key: "_createItems",
                value: function _createItems(options) {
                    var _this = this;
                    var active = this._active;
                    var data = this.chart.data;
                    var labelColors = [];
                    var labelPointStyles = [];
                    var labelTextColors = [];
                    var tooltipItems = [];
                    var i, len;
                    for(i = 0, len = active.length; i < len; ++i)tooltipItems.push($68fbc1daad5cf8b5$var$createTooltipItem(this.chart, active[i]));
                    if (options.filter) tooltipItems = tooltipItems.filter(function(element, index65, array) {
                        return options.filter(element, index65, array, data);
                    });
                    if (options.itemSort) tooltipItems = tooltipItems.sort(function(a, b) {
                        return options.itemSort(a, b, data);
                    });
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(tooltipItems, function(context) {
                        var scoped = $68fbc1daad5cf8b5$var$overrideCallbacks(options.callbacks, context);
                        labelColors.push(scoped.labelColor.call(_this, context));
                        labelPointStyles.push(scoped.labelPointStyle.call(_this, context));
                        labelTextColors.push(scoped.labelTextColor.call(_this, context));
                    });
                    this.labelColors = labelColors;
                    this.labelPointStyles = labelPointStyles;
                    this.labelTextColors = labelTextColors;
                    this.dataPoints = tooltipItems;
                    return tooltipItems;
                }
            },
            {
                key: "update",
                value: function update(changed, replay) {
                    var options = this.options.setContext(this.getContext());
                    var active = this._active;
                    var properties;
                    var tooltipItems = [];
                    if (!active.length) {
                        if (this.opacity !== 0) properties = {
                            opacity: 0
                        };
                    } else {
                        var position = $68fbc1daad5cf8b5$var$positioners[options.position].call(this, active, this._eventPosition);
                        tooltipItems = this._createItems(options);
                        this.title = this.getTitle(tooltipItems, options);
                        this.beforeBody = this.getBeforeBody(tooltipItems, options);
                        this.body = this.getBody(tooltipItems, options);
                        this.afterBody = this.getAfterBody(tooltipItems, options);
                        this.footer = this.getFooter(tooltipItems, options);
                        var size = this._size = $68fbc1daad5cf8b5$var$getTooltipSize(this, options);
                        var positionAndSize = Object.assign({
                        }, position, size);
                        var alignment = $68fbc1daad5cf8b5$var$determineAlignment(this.chart, options, positionAndSize);
                        var backgroundPoint = $68fbc1daad5cf8b5$var$getBackgroundPoint(options, positionAndSize, alignment, this.chart);
                        this.xAlign = alignment.xAlign;
                        this.yAlign = alignment.yAlign;
                        properties = {
                            opacity: 1,
                            x: backgroundPoint.x,
                            y: backgroundPoint.y,
                            width: size.width,
                            height: size.height,
                            caretX: position.x,
                            caretY: position.y
                        };
                    }
                    this._tooltipItems = tooltipItems;
                    this.$context = undefined;
                    if (properties) this._resolveAnimations().update(this, properties);
                    if (changed && options.external) options.external.call(this, {
                        chart: this.chart,
                        tooltip: this,
                        replay: replay
                    });
                }
            },
            {
                key: "drawCaret",
                value: function drawCaret(tooltipPoint, ctx, size, options) {
                    var caretPosition = this.getCaretPosition(tooltipPoint, size, options);
                    ctx.lineTo(caretPosition.x1, caretPosition.y1);
                    ctx.lineTo(caretPosition.x2, caretPosition.y2);
                    ctx.lineTo(caretPosition.x3, caretPosition.y3);
                }
            },
            {
                key: "getCaretPosition",
                value: function getCaretPosition(tooltipPoint, size, options) {
                    var ref = this, xAlign = ref.xAlign, yAlign = ref.yAlign;
                    var caretSize = options.caretSize, cornerRadius = options.cornerRadius;
                    var ref12 = $6892236ee0bf6afc$export$d66dc83d8cfc8dd(cornerRadius), topLeft = ref12.topLeft, topRight = ref12.topRight, bottomLeft = ref12.bottomLeft, bottomRight = ref12.bottomRight;
                    var ptX = tooltipPoint.x, ptY = tooltipPoint.y;
                    var width = size.width, height = size.height;
                    var x1, x2, x3, y1, y2, y3;
                    if (yAlign === "center") {
                        y2 = ptY + height / 2;
                        if (xAlign === "left") {
                            x1 = ptX;
                            x2 = x1 - caretSize;
                            y1 = y2 + caretSize;
                            y3 = y2 - caretSize;
                        } else {
                            x1 = ptX + width;
                            x2 = x1 + caretSize;
                            y1 = y2 - caretSize;
                            y3 = y2 + caretSize;
                        }
                        x3 = x1;
                    } else {
                        if (xAlign === "left") x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
                        else if (xAlign === "right") x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
                        else x2 = this.caretX;
                        if (yAlign === "top") {
                            y1 = ptY;
                            y2 = y1 - caretSize;
                            x1 = x2 - caretSize;
                            x3 = x2 + caretSize;
                        } else {
                            y1 = ptY + height;
                            y2 = y1 + caretSize;
                            x1 = x2 + caretSize;
                            x3 = x2 - caretSize;
                        }
                        y3 = y1;
                    }
                    return {
                        x1: x1,
                        x2: x2,
                        x3: x3,
                        y1: y1,
                        y2: y2,
                        y3: y3
                    };
                }
            },
            {
                key: "drawTitle",
                value: function drawTitle(pt, ctx, options) {
                    var title = this.title;
                    var length = title.length;
                    var titleFont, titleSpacing, i;
                    if (length) {
                        var rtlHelper = $6892236ee0bf6afc$export$28f7fcd39efa255(options.rtl, this.x, this.width);
                        pt.x = $68fbc1daad5cf8b5$var$getAlignedX(this, options.titleAlign, options);
                        ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
                        ctx.textBaseline = "middle";
                        titleFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(options.titleFont);
                        titleSpacing = options.titleSpacing;
                        ctx.fillStyle = options.titleColor;
                        ctx.font = titleFont.string;
                        for(i = 0; i < length; ++i){
                            ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
                            pt.y += titleFont.lineHeight + titleSpacing;
                            if (i + 1 === length) pt.y += options.titleMarginBottom - titleSpacing;
                        }
                    }
                }
            },
            {
                key: "_drawColorBox",
                value: function _drawColorBox(ctx, pt, i, rtlHelper, options) {
                    var labelColors = this.labelColors[i];
                    var labelPointStyle = this.labelPointStyles[i];
                    var boxHeight = options.boxHeight, boxWidth = options.boxWidth, boxPadding = options.boxPadding;
                    var bodyFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(options.bodyFont);
                    var colorX = $68fbc1daad5cf8b5$var$getAlignedX(this, "left", options);
                    var rtlColorX = rtlHelper.x(colorX);
                    var yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
                    var colorY = pt.y + yOffSet;
                    if (options.usePointStyle) {
                        var drawOptions = {
                            radius: Math.min(boxWidth, boxHeight) / 2,
                            pointStyle: labelPointStyle.pointStyle,
                            rotation: labelPointStyle.rotation,
                            borderWidth: 1
                        };
                        var centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
                        var centerY = colorY + boxHeight / 2;
                        ctx.strokeStyle = options.multiKeyBackground;
                        ctx.fillStyle = options.multiKeyBackground;
                        $6892236ee0bf6afc$export$6554612db691658e(ctx, drawOptions, centerX, centerY);
                        ctx.strokeStyle = labelColors.borderColor;
                        ctx.fillStyle = labelColors.backgroundColor;
                        $6892236ee0bf6afc$export$6554612db691658e(ctx, drawOptions, centerX, centerY);
                    } else {
                        ctx.lineWidth = labelColors.borderWidth || 1;
                        ctx.strokeStyle = labelColors.borderColor;
                        ctx.setLineDash(labelColors.borderDash || []);
                        ctx.lineDashOffset = labelColors.borderDashOffset || 0;
                        var outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);
                        var innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);
                        var borderRadius = $6892236ee0bf6afc$export$d66dc83d8cfc8dd(labelColors.borderRadius);
                        if (Object.values(borderRadius).some(function(v) {
                            return v !== 0;
                        })) {
                            ctx.beginPath();
                            ctx.fillStyle = options.multiKeyBackground;
                            $6892236ee0bf6afc$export$493d36ec626b6698(ctx, {
                                x: outerX,
                                y: colorY,
                                w: boxWidth,
                                h: boxHeight,
                                radius: borderRadius
                            });
                            ctx.fill();
                            ctx.stroke();
                            ctx.fillStyle = labelColors.backgroundColor;
                            ctx.beginPath();
                            $6892236ee0bf6afc$export$493d36ec626b6698(ctx, {
                                x: innerX,
                                y: colorY + 1,
                                w: boxWidth - 2,
                                h: boxHeight - 2,
                                radius: borderRadius
                            });
                            ctx.fill();
                        } else {
                            ctx.fillStyle = options.multiKeyBackground;
                            ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
                            ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
                            ctx.fillStyle = labelColors.backgroundColor;
                            ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
                        }
                    }
                    ctx.fillStyle = this.labelTextColors[i];
                }
            },
            {
                key: "drawBody",
                value: function drawBody(pt, ctx, options) {
                    var body = this.body;
                    var bodySpacing = options.bodySpacing, bodyAlign = options.bodyAlign, displayColors = options.displayColors, boxHeight = options.boxHeight, boxWidth = options.boxWidth, boxPadding = options.boxPadding;
                    var bodyFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(options.bodyFont);
                    var bodyLineHeight = bodyFont.lineHeight;
                    var xLinePadding = 0;
                    var rtlHelper = $6892236ee0bf6afc$export$28f7fcd39efa255(options.rtl, this.x, this.width);
                    var fillLineOfText = function fillLineOfText(line) {
                        ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
                        pt.y += bodyLineHeight + bodySpacing;
                    };
                    var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
                    var bodyItem, textColor, lines, i, j, ilen, jlen;
                    ctx.textAlign = bodyAlign;
                    ctx.textBaseline = "middle";
                    ctx.font = bodyFont.string;
                    pt.x = $68fbc1daad5cf8b5$var$getAlignedX(this, bodyAlignForCalculation, options);
                    ctx.fillStyle = options.bodyColor;
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(this.beforeBody, fillLineOfText);
                    xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
                    for(i = 0, ilen = body.length; i < ilen; ++i){
                        bodyItem = body[i];
                        textColor = this.labelTextColors[i];
                        ctx.fillStyle = textColor;
                        $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(bodyItem.before, fillLineOfText);
                        lines = bodyItem.lines;
                        if (displayColors && lines.length) {
                            this._drawColorBox(ctx, pt, i, rtlHelper, options);
                            bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
                        }
                        for(j = 0, jlen = lines.length; j < jlen; ++j){
                            fillLineOfText(lines[j]);
                            bodyLineHeight = bodyFont.lineHeight;
                        }
                        $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(bodyItem.after, fillLineOfText);
                    }
                    xLinePadding = 0;
                    bodyLineHeight = bodyFont.lineHeight;
                    $6892236ee0bf6afc$export$a9c23c6ac3fc3eca(this.afterBody, fillLineOfText);
                    pt.y -= bodySpacing;
                }
            },
            {
                key: "drawFooter",
                value: function drawFooter(pt, ctx, options) {
                    var footer = this.footer;
                    var length = footer.length;
                    var footerFont, i;
                    if (length) {
                        var rtlHelper = $6892236ee0bf6afc$export$28f7fcd39efa255(options.rtl, this.x, this.width);
                        pt.x = $68fbc1daad5cf8b5$var$getAlignedX(this, options.footerAlign, options);
                        pt.y += options.footerMarginTop;
                        ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
                        ctx.textBaseline = "middle";
                        footerFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(options.footerFont);
                        ctx.fillStyle = options.footerColor;
                        ctx.font = footerFont.string;
                        for(i = 0; i < length; ++i){
                            ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
                            pt.y += footerFont.lineHeight + options.footerSpacing;
                        }
                    }
                }
            },
            {
                key: "drawBackground",
                value: function drawBackground(pt, ctx, tooltipSize, options) {
                    var ref = this, xAlign = ref.xAlign, yAlign = ref.yAlign;
                    var x = pt.x, y = pt.y;
                    var width = tooltipSize.width, height = tooltipSize.height;
                    var ref13 = $6892236ee0bf6afc$export$d66dc83d8cfc8dd(options.cornerRadius), topLeft = ref13.topLeft, topRight = ref13.topRight, bottomLeft = ref13.bottomLeft, bottomRight = ref13.bottomRight;
                    ctx.fillStyle = options.backgroundColor;
                    ctx.strokeStyle = options.borderColor;
                    ctx.lineWidth = options.borderWidth;
                    ctx.beginPath();
                    ctx.moveTo(x + topLeft, y);
                    if (yAlign === "top") this.drawCaret(pt, ctx, tooltipSize, options);
                    ctx.lineTo(x + width - topRight, y);
                    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
                    if (yAlign === "center" && xAlign === "right") this.drawCaret(pt, ctx, tooltipSize, options);
                    ctx.lineTo(x + width, y + height - bottomRight);
                    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
                    if (yAlign === "bottom") this.drawCaret(pt, ctx, tooltipSize, options);
                    ctx.lineTo(x + bottomLeft, y + height);
                    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
                    if (yAlign === "center" && xAlign === "left") this.drawCaret(pt, ctx, tooltipSize, options);
                    ctx.lineTo(x, y + topLeft);
                    ctx.quadraticCurveTo(x, y, x + topLeft, y);
                    ctx.closePath();
                    ctx.fill();
                    if (options.borderWidth > 0) ctx.stroke();
                }
            },
            {
                key: "_updateAnimationTarget",
                value: function _updateAnimationTarget(options) {
                    var chart = this.chart;
                    var anims = this.$animations;
                    var animX = anims && anims.x;
                    var animY = anims && anims.y;
                    if (animX || animY) {
                        var position = $68fbc1daad5cf8b5$var$positioners[options.position].call(this, this._active, this._eventPosition);
                        if (!position) return;
                        var size = this._size = $68fbc1daad5cf8b5$var$getTooltipSize(this, options);
                        var positionAndSize = Object.assign({
                        }, position, this._size);
                        var alignment = $68fbc1daad5cf8b5$var$determineAlignment(chart, options, positionAndSize);
                        var point = $68fbc1daad5cf8b5$var$getBackgroundPoint(options, positionAndSize, alignment, chart);
                        if (animX._to !== point.x || animY._to !== point.y) {
                            this.xAlign = alignment.xAlign;
                            this.yAlign = alignment.yAlign;
                            this.width = size.width;
                            this.height = size.height;
                            this.caretX = position.x;
                            this.caretY = position.y;
                            this._resolveAnimations().update(this, point);
                        }
                    }
                }
            },
            {
                key: "_willRender",
                value: function _willRender() {
                    return !!this.opacity;
                }
            },
            {
                key: "draw",
                value: function draw2(ctx) {
                    var options = this.options.setContext(this.getContext());
                    var opacity = this.opacity;
                    if (!opacity) return;
                    this._updateAnimationTarget(options);
                    var tooltipSize = {
                        width: this.width,
                        height: this.height
                    };
                    var pt = {
                        x: this.x,
                        y: this.y
                    };
                    opacity = Math.abs(opacity) < 0.001 ? 0 : opacity;
                    var padding = $6892236ee0bf6afc$export$96f57966bedc81b4(options.padding);
                    var hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
                    if (options.enabled && hasTooltipContent) {
                        ctx.save();
                        ctx.globalAlpha = opacity;
                        this.drawBackground(pt, ctx, tooltipSize, options);
                        $6892236ee0bf6afc$export$3d12bd131bb975d1(ctx, options.textDirection);
                        pt.y += padding.top;
                        this.drawTitle(pt, ctx, options);
                        this.drawBody(pt, ctx, options);
                        this.drawFooter(pt, ctx, options);
                        $6892236ee0bf6afc$export$9d398bebfec1c039(ctx, options.textDirection);
                        ctx.restore();
                    }
                }
            },
            {
                key: "getActiveElements",
                value: function getActiveElements() {
                    return this._active || [];
                }
            },
            {
                key: "setActiveElements",
                value: function setActiveElements(activeElements, eventPosition) {
                    var _this = this;
                    var lastActive = this._active;
                    var active = activeElements.map(function(param) {
                        var datasetIndex = param.datasetIndex, index66 = param.index;
                        var meta = _this.chart.getDatasetMeta(datasetIndex);
                        if (!meta) throw new Error("Cannot find a dataset at index " + datasetIndex);
                        return {
                            datasetIndex: datasetIndex,
                            element: meta.data[index66],
                            index: index66
                        };
                    });
                    var changed = !$6892236ee0bf6afc$export$ee7c8ad385a60b7b(lastActive, active);
                    var positionChanged = this._positionChanged(active, eventPosition);
                    if (changed || positionChanged) {
                        this._active = active;
                        this._eventPosition = eventPosition;
                        this._ignoreReplayEvents = true;
                        this.update(true);
                    }
                }
            },
            {
                key: "handleEvent",
                value: function handleEvent(e, replay) {
                    var inChartArea = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
                    if (replay && this._ignoreReplayEvents) return false;
                    this._ignoreReplayEvents = false;
                    var options = this.options;
                    var lastActive = this._active || [];
                    var active = this._getActiveElements(e, lastActive, replay, inChartArea);
                    var positionChanged = this._positionChanged(active, e);
                    var changed = replay || !$6892236ee0bf6afc$export$ee7c8ad385a60b7b(active, lastActive) || positionChanged;
                    if (changed) {
                        this._active = active;
                        if (options.enabled || options.external) {
                            this._eventPosition = {
                                x: e.x,
                                y: e.y
                            };
                            this.update(true, replay);
                        }
                    }
                    return changed;
                }
            },
            {
                key: "_getActiveElements",
                value: function _getActiveElements(e, lastActive, replay, inChartArea) {
                    var options = this.options;
                    if (e.type === "mouseout") return [];
                    if (!inChartArea) return lastActive;
                    var active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
                    if (options.reverse) active.reverse();
                    return active;
                }
            },
            {
                key: "_positionChanged",
                value: function _positionChanged(active, e) {
                    var ref = this, caretX = ref.caretX, caretY = ref.caretY, options = ref.options;
                    var position = $68fbc1daad5cf8b5$var$positioners[options.position].call(this, active, e);
                    return position !== false && (caretX !== position.x || caretY !== position.y);
                }
            }
        ]);
        return Tooltip;
    }(/*@__PURE__*/ $parcel$interopDefault($16755fe9f4f0f745$exports)($68fbc1daad5cf8b5$export$db77ccec0bb4ccac));
    $68fbc1daad5cf8b5$var$Tooltip.positioners = $68fbc1daad5cf8b5$var$positioners;
    var $68fbc1daad5cf8b5$export$28c660c63b792dea = {
        id: "tooltip",
        _element: $68fbc1daad5cf8b5$var$Tooltip,
        positioners: $68fbc1daad5cf8b5$var$positioners,
        afterInit: function(chart, _args, options) {
            if (options) chart.tooltip = new $68fbc1daad5cf8b5$var$Tooltip({
                chart: chart,
                options: options
            });
        },
        beforeUpdate: function(chart, _args, options) {
            if (chart.tooltip) chart.tooltip.initialize(options);
        },
        reset: function(chart, _args, options) {
            if (chart.tooltip) chart.tooltip.initialize(options);
        },
        afterDraw: function(chart) {
            var tooltip = chart.tooltip;
            if (tooltip && tooltip._willRender()) {
                var args = {
                    tooltip: tooltip
                };
                if (chart.notifyPlugins("beforeTooltipDraw", args) === false) return;
                tooltip.draw(chart.ctx);
                chart.notifyPlugins("afterTooltipDraw", args);
            }
        },
        afterEvent: function(chart, args) {
            if (chart.tooltip) {
                var useFinalPosition = args.replay;
                if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) args.changed = true;
            }
        },
        defaults: {
            enabled: true,
            external: null,
            position: "average",
            backgroundColor: "rgba(0,0,0,0.8)",
            titleColor: "#fff",
            titleFont: {
                weight: "bold"
            },
            titleSpacing: 2,
            titleMarginBottom: 6,
            titleAlign: "left",
            bodyColor: "#fff",
            bodySpacing: 2,
            bodyFont: {
            },
            bodyAlign: "left",
            footerColor: "#fff",
            footerSpacing: 2,
            footerMarginTop: 6,
            footerFont: {
                weight: "bold"
            },
            footerAlign: "left",
            padding: 6,
            caretPadding: 2,
            caretSize: 5,
            cornerRadius: 6,
            boxHeight: function(ctx, opts) {
                return opts.bodyFont.size;
            },
            boxWidth: function(ctx, opts) {
                return opts.bodyFont.size;
            },
            multiKeyBackground: "#fff",
            displayColors: true,
            boxPadding: 0,
            borderColor: "rgba(0,0,0,0)",
            borderWidth: 0,
            animation: {
                duration: 400,
                easing: "easeOutQuart"
            },
            animations: {
                numbers: {
                    type: "number",
                    properties: [
                        "x",
                        "y",
                        "width",
                        "height",
                        "caretX",
                        "caretY"
                    ]
                },
                opacity: {
                    easing: "linear",
                    duration: 200
                }
            },
            callbacks: {
                beforeTitle: $6892236ee0bf6afc$export$890c4ad488842ce7,
                title: function(tooltipItems) {
                    if (tooltipItems.length > 0) {
                        var item = tooltipItems[0];
                        var labels = item.chart.data.labels;
                        var labelCount = labels ? labels.length : 0;
                        if (this && this.options && this.options.mode === "dataset") return item.dataset.label || "";
                        else if (item.label) return item.label;
                        else if (labelCount > 0 && item.dataIndex < labelCount) return labels[item.dataIndex];
                    }
                    return "";
                },
                afterTitle: $6892236ee0bf6afc$export$890c4ad488842ce7,
                beforeBody: $6892236ee0bf6afc$export$890c4ad488842ce7,
                beforeLabel: $6892236ee0bf6afc$export$890c4ad488842ce7,
                label: function(tooltipItem) {
                    if (this && this.options && this.options.mode === "dataset") return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
                    var label = tooltipItem.dataset.label || "";
                    if (label) label += ": ";
                    var value = tooltipItem.formattedValue;
                    if (!$6892236ee0bf6afc$export$342063e11d6c3cad(value)) label += value;
                    return label;
                },
                labelColor: function(tooltipItem) {
                    var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
                    var options = meta.controller.getStyle(tooltipItem.dataIndex);
                    return {
                        borderColor: options.borderColor,
                        backgroundColor: options.backgroundColor,
                        borderWidth: options.borderWidth,
                        borderDash: options.borderDash,
                        borderDashOffset: options.borderDashOffset,
                        borderRadius: 0
                    };
                },
                labelTextColor: function() {
                    return this.options.bodyColor;
                },
                labelPointStyle: function(tooltipItem) {
                    var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
                    var options = meta.controller.getStyle(tooltipItem.dataIndex);
                    return {
                        pointStyle: options.pointStyle,
                        rotation: options.rotation
                    };
                },
                afterLabel: $6892236ee0bf6afc$export$890c4ad488842ce7,
                afterBody: $6892236ee0bf6afc$export$890c4ad488842ce7,
                beforeFooter: $6892236ee0bf6afc$export$890c4ad488842ce7,
                footer: $6892236ee0bf6afc$export$890c4ad488842ce7,
                afterFooter: $6892236ee0bf6afc$export$890c4ad488842ce7
            }
        },
        defaultRoutes: {
            bodyFont: "font",
            footerFont: "font",
            titleFont: "font"
        },
        descriptors: {
            _scriptable: function(name) {
                return name !== "filter" && name !== "itemSort" && name !== "external";
            },
            _indexable: false,
            callbacks: {
                _scriptable: false,
                _indexable: false
            },
            animation: {
                _fallback: false
            },
            animations: {
                _fallback: "animation"
            }
        },
        additionalOptionScopes: [
            "interaction"
        ]
    };
    var $68fbc1daad5cf8b5$export$8b3ca321c77fdea6 = /*#__PURE__*/ Object.freeze({
        __proto__: null,
        Decimation: $68fbc1daad5cf8b5$export$be17f937e9aa7533,
        Filler: $68fbc1daad5cf8b5$export$d19ba4d812bed757,
        Legend: $68fbc1daad5cf8b5$export$ed247974535929c7,
        SubTitle: $68fbc1daad5cf8b5$export$d5c56664638992a4,
        Title: $68fbc1daad5cf8b5$export$f99233281efd08a0,
        Tooltip: $68fbc1daad5cf8b5$export$28c660c63b792dea
    });
    var $68fbc1daad5cf8b5$var$addIfString = function(labels, raw, index67, addedLabels) {
        if (typeof raw === "string") {
            index67 = labels.push(raw) - 1;
            addedLabels.unshift({
                index: index67,
                label: raw
            });
        } else if (isNaN(raw)) index67 = null;
        return index67;
    };
    function $68fbc1daad5cf8b5$var$findOrAddLabel(labels, raw, index68, addedLabels) {
        var first = labels.indexOf(raw);
        if (first === -1) return $68fbc1daad5cf8b5$var$addIfString(labels, raw, index68, addedLabels);
        var last = labels.lastIndexOf(raw);
        return first !== last ? index68 : first;
    }
    var $68fbc1daad5cf8b5$var$validIndex = function(index69, max) {
        return index69 === null ? null : $6892236ee0bf6afc$export$efccba1c4a2ef57b(Math.round(index69), 0, max);
    };
    var $68fbc1daad5cf8b5$export$29e663ba4d09fe7 = /*#__PURE__*/ function(Scale) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(CategoryScale, Scale);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(CategoryScale);
        function CategoryScale(cfg) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, CategoryScale);
            var _this;
            _this = _super.call(this, cfg);
            _this._startValue = undefined;
            _this._valueRange = 0;
            _this._addedLabels = [];
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(CategoryScale, [
            {
                key: "init",
                value: function init(scaleOptions) {
                    var added = this._addedLabels;
                    if (added.length) {
                        var labels = this.getLabels();
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(var _iterator = added[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var _value = _step.value, index70 = _value.index, label = _value.label;
                                if (labels[index70] === label) labels.splice(index70, 1);
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
                            } finally{
                                if (_didIteratorError) throw _iteratorError;
                            }
                        }
                        this._addedLabels = [];
                    }
                    /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(CategoryScale.prototype), "init", this).call(this, scaleOptions);
                }
            },
            {
                key: "parse",
                value: function parse1(raw, index71) {
                    if ($6892236ee0bf6afc$export$342063e11d6c3cad(raw)) return null;
                    var labels = this.getLabels();
                    index71 = isFinite(index71) && labels[index71] === raw ? index71 : $68fbc1daad5cf8b5$var$findOrAddLabel(labels, raw, $6892236ee0bf6afc$export$90a7f3efeed30595(index71, raw), this._addedLabels);
                    return $68fbc1daad5cf8b5$var$validIndex(index71, labels.length - 1);
                }
            },
            {
                key: "determineDataLimits",
                value: function determineDataLimits() {
                    var ref = this.getUserBounds(), minDefined = ref.minDefined, maxDefined = ref.maxDefined;
                    var ref14 = this.getMinMax(true), min = ref14.min, max = ref14.max;
                    if (this.options.bounds === "ticks") {
                        if (!minDefined) min = 0;
                        if (!maxDefined) max = this.getLabels().length - 1;
                    }
                    this.min = min;
                    this.max = max;
                }
            },
            {
                key: "buildTicks",
                value: function buildTicks() {
                    var min = this.min;
                    var max = this.max;
                    var offset = this.options.offset;
                    var ticks = [];
                    var labels = this.getLabels();
                    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
                    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
                    this._startValue = this.min - (offset ? 0.5 : 0);
                    for(var value = min; value <= max; value++)ticks.push({
                        value: value
                    });
                    return ticks;
                }
            },
            {
                key: "getLabelForValue",
                value: function getLabelForValue(value) {
                    var labels = this.getLabels();
                    if (value >= 0 && value < labels.length) return labels[value];
                    return value;
                }
            },
            {
                key: "configure",
                value: function configure() {
                    /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(CategoryScale.prototype), "configure", this).call(this);
                    if (!this.isHorizontal()) this._reversePixels = !this._reversePixels;
                }
            },
            {
                key: "getPixelForValue",
                value: function getPixelForValue(value) {
                    if (typeof value !== "number") value = this.parse(value);
                    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
                }
            },
            {
                key: "getPixelForTick",
                value: function getPixelForTick(index72) {
                    var ticks = this.ticks;
                    if (index72 < 0 || index72 > ticks.length - 1) return null;
                    return this.getPixelForValue(ticks[index72].value);
                }
            },
            {
                key: "getValueForPixel",
                value: function getValueForPixel(pixel) {
                    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
                }
            },
            {
                key: "getBasePixel",
                value: function getBasePixel() {
                    return this.bottom;
                }
            }
        ]);
        return CategoryScale;
    }($68fbc1daad5cf8b5$export$d60cfc58d3c358b6);
    $68fbc1daad5cf8b5$export$29e663ba4d09fe7.id = "category";
    $68fbc1daad5cf8b5$export$29e663ba4d09fe7.defaults = {
        ticks: {
            callback: $68fbc1daad5cf8b5$export$29e663ba4d09fe7.prototype.getLabelForValue
        }
    };
    function $68fbc1daad5cf8b5$var$generateTicks$1(generationOptions, dataRange) {
        var ticks = [];
        var MIN_SPACING = 0.00000000000001;
        var bounds = generationOptions.bounds, step = generationOptions.step, min = generationOptions.min, max = generationOptions.max, precision = generationOptions.precision, count = generationOptions.count, maxTicks = generationOptions.maxTicks, maxDigits = generationOptions.maxDigits, includeBounds = generationOptions.includeBounds;
        var unit = step || 1;
        var maxSpaces = maxTicks - 1;
        var rmin = dataRange.min, rmax = dataRange.max;
        var minDefined = !$6892236ee0bf6afc$export$342063e11d6c3cad(min);
        var maxDefined = !$6892236ee0bf6afc$export$342063e11d6c3cad(max);
        var countDefined = !$6892236ee0bf6afc$export$342063e11d6c3cad(count);
        var minSpacing = (rmax - rmin) / (maxDigits + 1);
        var spacing = $6892236ee0bf6afc$export$cf2f7c5792f80b46((rmax - rmin) / maxSpaces / unit) * unit;
        var factor, niceMin, niceMax, numSpaces;
        if (spacing < MIN_SPACING && !minDefined && !maxDefined) return [
            {
                value: rmin
            },
            {
                value: rmax
            }
        ];
        numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
        if (numSpaces > maxSpaces) spacing = $6892236ee0bf6afc$export$cf2f7c5792f80b46(numSpaces * spacing / maxSpaces / unit) * unit;
        if (!$6892236ee0bf6afc$export$342063e11d6c3cad(precision)) {
            factor = Math.pow(10, precision);
            spacing = Math.ceil(spacing * factor) / factor;
        }
        if (bounds === "ticks") {
            niceMin = Math.floor(rmin / spacing) * spacing;
            niceMax = Math.ceil(rmax / spacing) * spacing;
        } else {
            niceMin = rmin;
            niceMax = rmax;
        }
        if (minDefined && maxDefined && step && $6892236ee0bf6afc$export$53a70dd1ebbae346((max - min) / step, spacing / 1000)) {
            numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
            spacing = (max - min) / numSpaces;
            niceMin = min;
            niceMax = max;
        } else if (countDefined) {
            niceMin = minDefined ? min : niceMin;
            niceMax = maxDefined ? max : niceMax;
            numSpaces = count - 1;
            spacing = (niceMax - niceMin) / numSpaces;
        } else {
            numSpaces = (niceMax - niceMin) / spacing;
            if ($6892236ee0bf6afc$export$a33b77bbdbb8366c(numSpaces, Math.round(numSpaces), spacing / 1000)) numSpaces = Math.round(numSpaces);
            else numSpaces = Math.ceil(numSpaces);
        }
        var decimalPlaces = Math.max($6892236ee0bf6afc$export$b9a6b53f9be3734(spacing), $6892236ee0bf6afc$export$b9a6b53f9be3734(niceMin));
        factor = Math.pow(10, $6892236ee0bf6afc$export$342063e11d6c3cad(precision) ? decimalPlaces : precision);
        niceMin = Math.round(niceMin * factor) / factor;
        niceMax = Math.round(niceMax * factor) / factor;
        var j = 0;
        if (minDefined) {
            if (includeBounds && niceMin !== min) {
                ticks.push({
                    value: min
                });
                if (niceMin < min) j++;
                if ($6892236ee0bf6afc$export$a33b77bbdbb8366c(Math.round((niceMin + j * spacing) * factor) / factor, min, $68fbc1daad5cf8b5$var$relativeLabelSize(min, minSpacing, generationOptions))) j++;
            } else if (niceMin < min) j++;
        }
        for(; j < numSpaces; ++j)ticks.push({
            value: Math.round((niceMin + j * spacing) * factor) / factor
        });
        if (maxDefined && includeBounds && niceMax !== max) {
            if (ticks.length && $6892236ee0bf6afc$export$a33b77bbdbb8366c(ticks[ticks.length - 1].value, max, $68fbc1daad5cf8b5$var$relativeLabelSize(max, minSpacing, generationOptions))) ticks[ticks.length - 1].value = max;
            else ticks.push({
                value: max
            });
        } else if (!maxDefined || niceMax === max) ticks.push({
            value: niceMax
        });
        return ticks;
    }
    function $68fbc1daad5cf8b5$var$relativeLabelSize(value, minSpacing, param) {
        var horizontal = param.horizontal, minRotation = param.minRotation;
        var rad = $6892236ee0bf6afc$export$625550452a3fa3ec(minRotation);
        var ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
        var length = 0.75 * minSpacing * ("" + value).length;
        return Math.min(minSpacing / ratio, length);
    }
    var $68fbc1daad5cf8b5$var$LinearScaleBase = /*#__PURE__*/ function(Scale) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(LinearScaleBase, Scale);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(LinearScaleBase);
        function LinearScaleBase(cfg) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, LinearScaleBase);
            var _this;
            _this = _super.call(this, cfg);
            _this.start = undefined;
            _this.end = undefined;
            _this._startValue = undefined;
            _this._endValue = undefined;
            _this._valueRange = 0;
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(LinearScaleBase, [
            {
                key: "parse",
                value: function parse1(raw, index) {
                    if ($6892236ee0bf6afc$export$342063e11d6c3cad(raw)) return null;
                    if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) return null;
                    return +raw;
                }
            },
            {
                key: "handleTickRangeOptions",
                value: function handleTickRangeOptions() {
                    var beginAtZero = this.options.beginAtZero;
                    var ref = this.getUserBounds(), minDefined = ref.minDefined, maxDefined = ref.maxDefined;
                    var ref15 = this, min = ref15.min, max = ref15.max;
                    var setMin = function(v) {
                        return min = minDefined ? min : v;
                    };
                    var setMax = function(v) {
                        return max = maxDefined ? max : v;
                    };
                    if (beginAtZero) {
                        var minSign = $6892236ee0bf6afc$export$2408f22a0fab9ae5(min);
                        var maxSign = $6892236ee0bf6afc$export$2408f22a0fab9ae5(max);
                        if (minSign < 0 && maxSign < 0) setMax(0);
                        else if (minSign > 0 && maxSign > 0) setMin(0);
                    }
                    if (min === max) {
                        var offset = 1;
                        if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) offset = Math.abs(max * 0.05);
                        setMax(max + offset);
                        if (!beginAtZero) setMin(min - offset);
                    }
                    this.min = min;
                    this.max = max;
                }
            },
            {
                key: "getTickLimit",
                value: function getTickLimit() {
                    var tickOpts = this.options.ticks;
                    var maxTicksLimit = tickOpts.maxTicksLimit, stepSize = tickOpts.stepSize;
                    var maxTicks;
                    if (stepSize) {
                        maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
                        if (maxTicks > 1000) {
                            console.warn("scales.".concat(this.id, ".ticks.stepSize: ").concat(stepSize, " would result generating up to ").concat(maxTicks, " ticks. Limiting to 1000."));
                            maxTicks = 1000;
                        }
                    } else {
                        maxTicks = this.computeTickLimit();
                        maxTicksLimit = maxTicksLimit || 11;
                    }
                    if (maxTicksLimit) maxTicks = Math.min(maxTicksLimit, maxTicks);
                    return maxTicks;
                }
            },
            {
                key: "computeTickLimit",
                value: function computeTickLimit() {
                    return Number.POSITIVE_INFINITY;
                }
            },
            {
                key: "buildTicks",
                value: function buildTicks() {
                    var opts = this.options;
                    var tickOpts = opts.ticks;
                    var maxTicks = this.getTickLimit();
                    maxTicks = Math.max(2, maxTicks);
                    var numericGeneratorOptions = {
                        maxTicks: maxTicks,
                        bounds: opts.bounds,
                        min: opts.min,
                        max: opts.max,
                        precision: tickOpts.precision,
                        step: tickOpts.stepSize,
                        count: tickOpts.count,
                        maxDigits: this._maxDigits(),
                        horizontal: this.isHorizontal(),
                        minRotation: tickOpts.minRotation || 0,
                        includeBounds: tickOpts.includeBounds !== false
                    };
                    var dataRange = this._range || this;
                    var ticks = $68fbc1daad5cf8b5$var$generateTicks$1(numericGeneratorOptions, dataRange);
                    if (opts.bounds === "ticks") $6892236ee0bf6afc$export$158acd800e1ef08b(ticks, this, "value");
                    if (opts.reverse) {
                        ticks.reverse();
                        this.start = this.max;
                        this.end = this.min;
                    } else {
                        this.start = this.min;
                        this.end = this.max;
                    }
                    return ticks;
                }
            },
            {
                key: "configure",
                value: function configure() {
                    var ticks = this.ticks;
                    var start = this.min;
                    var end = this.max;
                    /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(LinearScaleBase.prototype), "configure", this).call(this);
                    if (this.options.offset && ticks.length) {
                        var offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
                        start -= offset;
                        end += offset;
                    }
                    this._startValue = start;
                    this._endValue = end;
                    this._valueRange = end - start;
                }
            },
            {
                key: "getLabelForValue",
                value: function getLabelForValue(value) {
                    return $6892236ee0bf6afc$export$ae1af26003f05816(value, this.chart.options.locale, this.options.ticks.format);
                }
            }
        ]);
        return LinearScaleBase;
    }($68fbc1daad5cf8b5$export$d60cfc58d3c358b6);
    var $68fbc1daad5cf8b5$export$e7f4e5e8656f0b93 = /*#__PURE__*/ function(LinearScaleBase) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(LinearScale, LinearScaleBase);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(LinearScale);
        function LinearScale() {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, LinearScale);
            return _super.apply(this, arguments);
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(LinearScale, [
            {
                key: "determineDataLimits",
                value: function determineDataLimits() {
                    var ref = this.getMinMax(true), min = ref.min, max = ref.max;
                    this.min = $6892236ee0bf6afc$export$39b482c5e57630a8(min) ? min : 0;
                    this.max = $6892236ee0bf6afc$export$39b482c5e57630a8(max) ? max : 1;
                    this.handleTickRangeOptions();
                }
            },
            {
                key: "computeTickLimit",
                value: function computeTickLimit() {
                    var horizontal = this.isHorizontal();
                    var length = horizontal ? this.width : this.height;
                    var minRotation = $6892236ee0bf6afc$export$625550452a3fa3ec(this.options.ticks.minRotation);
                    var ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
                    var tickFont = this._resolveTickFontOptions(0);
                    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
                }
            },
            {
                key: "getPixelForValue",
                value: function getPixelForValue(value) {
                    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
                }
            },
            {
                key: "getValueForPixel",
                value: function getValueForPixel(pixel) {
                    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
                }
            }
        ]);
        return LinearScale;
    }($68fbc1daad5cf8b5$var$LinearScaleBase);
    $68fbc1daad5cf8b5$export$e7f4e5e8656f0b93.id = "linear";
    $68fbc1daad5cf8b5$export$e7f4e5e8656f0b93.defaults = {
        ticks: {
            callback: $68fbc1daad5cf8b5$export$27c7467594ef87bd.formatters.numeric
        }
    };
    function $68fbc1daad5cf8b5$var$isMajor(tickVal) {
        var remain = tickVal / Math.pow(10, Math.floor($6892236ee0bf6afc$export$3a1a48c8f6ef640e(tickVal)));
        return remain === 1;
    }
    function $68fbc1daad5cf8b5$var$generateTicks(generationOptions, dataRange) {
        var endExp = Math.floor($6892236ee0bf6afc$export$3a1a48c8f6ef640e(dataRange.max));
        var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
        var ticks = [];
        var tickVal = $6892236ee0bf6afc$export$c4ce752e73470fba(generationOptions.min, Math.pow(10, Math.floor($6892236ee0bf6afc$export$3a1a48c8f6ef640e(dataRange.min))));
        var exp = Math.floor($6892236ee0bf6afc$export$3a1a48c8f6ef640e(tickVal));
        var significand = Math.floor(tickVal / Math.pow(10, exp));
        var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
        do {
            ticks.push({
                value: tickVal,
                major: $68fbc1daad5cf8b5$var$isMajor(tickVal)
            });
            ++significand;
            if (significand === 10) {
                significand = 1;
                ++exp;
                precision = exp >= 0 ? 1 : precision;
            }
            tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
        }while (exp < endExp || exp === endExp && significand < endSignificand)
        var lastTick = $6892236ee0bf6afc$export$c4ce752e73470fba(generationOptions.max, tickVal);
        ticks.push({
            value: lastTick,
            major: $68fbc1daad5cf8b5$var$isMajor(tickVal)
        });
        return ticks;
    }
    var $68fbc1daad5cf8b5$export$85295eaf7cb3ac3e = /*#__PURE__*/ function(Scale) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(LogarithmicScale, Scale);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(LogarithmicScale);
        function LogarithmicScale(cfg) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, LogarithmicScale);
            var _this;
            _this = _super.call(this, cfg);
            _this.start = undefined;
            _this.end = undefined;
            _this._startValue = undefined;
            _this._valueRange = 0;
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(LogarithmicScale, [
            {
                key: "parse",
                value: function parse1(raw, index73) {
                    var value = $68fbc1daad5cf8b5$var$LinearScaleBase.prototype.parse.apply(this, [
                        raw,
                        index73
                    ]);
                    if (value === 0) {
                        this._zero = true;
                        return undefined;
                    }
                    return $6892236ee0bf6afc$export$39b482c5e57630a8(value) && value > 0 ? value : null;
                }
            },
            {
                key: "determineDataLimits",
                value: function determineDataLimits() {
                    var ref = this.getMinMax(true), min = ref.min, max = ref.max;
                    this.min = $6892236ee0bf6afc$export$39b482c5e57630a8(min) ? Math.max(0, min) : null;
                    this.max = $6892236ee0bf6afc$export$39b482c5e57630a8(max) ? Math.max(0, max) : null;
                    if (this.options.beginAtZero) this._zero = true;
                    this.handleTickRangeOptions();
                }
            },
            {
                key: "handleTickRangeOptions",
                value: function handleTickRangeOptions() {
                    var ref = this.getUserBounds(), minDefined = ref.minDefined, maxDefined = ref.maxDefined;
                    var min = this.min;
                    var max = this.max;
                    var setMin = function(v) {
                        return min = minDefined ? min : v;
                    };
                    var setMax = function(v) {
                        return max = maxDefined ? max : v;
                    };
                    var exp = function(v, m) {
                        return Math.pow(10, Math.floor($6892236ee0bf6afc$export$3a1a48c8f6ef640e(v)) + m);
                    };
                    if (min === max) {
                        if (min <= 0) {
                            setMin(1);
                            setMax(10);
                        } else {
                            setMin(exp(min, -1));
                            setMax(exp(max, 1));
                        }
                    }
                    if (min <= 0) setMin(exp(max, -1));
                    if (max <= 0) setMax(exp(min, 1));
                    if (this._zero && this.min !== this._suggestedMin && min === exp(this.min, 0)) setMin(exp(min, -1));
                    this.min = min;
                    this.max = max;
                }
            },
            {
                key: "buildTicks",
                value: function buildTicks() {
                    var opts = this.options;
                    var generationOptions = {
                        min: this._userMin,
                        max: this._userMax
                    };
                    var ticks = $68fbc1daad5cf8b5$var$generateTicks(generationOptions, this);
                    if (opts.bounds === "ticks") $6892236ee0bf6afc$export$158acd800e1ef08b(ticks, this, "value");
                    if (opts.reverse) {
                        ticks.reverse();
                        this.start = this.max;
                        this.end = this.min;
                    } else {
                        this.start = this.min;
                        this.end = this.max;
                    }
                    return ticks;
                }
            },
            {
                key: "getLabelForValue",
                value: function getLabelForValue(value) {
                    return value === undefined ? "0" : $6892236ee0bf6afc$export$ae1af26003f05816(value, this.chart.options.locale, this.options.ticks.format);
                }
            },
            {
                key: "configure",
                value: function configure() {
                    var start = this.min;
                    /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(LogarithmicScale.prototype), "configure", this).call(this);
                    this._startValue = $6892236ee0bf6afc$export$3a1a48c8f6ef640e(start);
                    this._valueRange = $6892236ee0bf6afc$export$3a1a48c8f6ef640e(this.max) - $6892236ee0bf6afc$export$3a1a48c8f6ef640e(start);
                }
            },
            {
                key: "getPixelForValue",
                value: function getPixelForValue(value) {
                    if (value === undefined || value === 0) value = this.min;
                    if (value === null || isNaN(value)) return NaN;
                    return this.getPixelForDecimal(value === this.min ? 0 : ($6892236ee0bf6afc$export$3a1a48c8f6ef640e(value) - this._startValue) / this._valueRange);
                }
            },
            {
                key: "getValueForPixel",
                value: function getValueForPixel(pixel) {
                    var decimal = this.getDecimalForPixel(pixel);
                    return Math.pow(10, this._startValue + decimal * this._valueRange);
                }
            }
        ]);
        return LogarithmicScale;
    }($68fbc1daad5cf8b5$export$d60cfc58d3c358b6);
    $68fbc1daad5cf8b5$export$85295eaf7cb3ac3e.id = "logarithmic";
    $68fbc1daad5cf8b5$export$85295eaf7cb3ac3e.defaults = {
        ticks: {
            callback: $68fbc1daad5cf8b5$export$27c7467594ef87bd.formatters.logarithmic,
            major: {
                enabled: true
            }
        }
    };
    function $68fbc1daad5cf8b5$var$getTickBackdropHeight(opts) {
        var tickOpts = opts.ticks;
        if (tickOpts.display && opts.display) {
            var padding = $6892236ee0bf6afc$export$96f57966bedc81b4(tickOpts.backdropPadding);
            return $6892236ee0bf6afc$export$90a7f3efeed30595(tickOpts.font && tickOpts.font.size, $6892236ee0bf6afc$export$4368d992c4eafac0.font.size) + padding.height;
        }
        return 0;
    }
    function $68fbc1daad5cf8b5$var$measureLabelSize(ctx, font, label) {
        label = $6892236ee0bf6afc$export$8b22cf2602fb60ce(label) ? label : [
            label
        ];
        return {
            w: $6892236ee0bf6afc$export$a05254e7c3aeba6e(ctx, font.string, label),
            h: label.length * font.lineHeight
        };
    }
    function $68fbc1daad5cf8b5$var$determineLimits(angle, pos, size, min, max) {
        if (angle === min || angle === max) return {
            start: pos - size / 2,
            end: pos + size / 2
        };
        else if (angle < min || angle > max) return {
            start: pos - size,
            end: pos
        };
        return {
            start: pos,
            end: pos + size
        };
    }
    function $68fbc1daad5cf8b5$var$fitWithPointLabels(scale) {
        var orig = {
            l: scale.left + scale._padding.left,
            r: scale.right - scale._padding.right,
            t: scale.top + scale._padding.top,
            b: scale.bottom - scale._padding.bottom
        };
        var limits = Object.assign({
        }, orig);
        var labelSizes = [];
        var padding = [];
        var valueCount = scale._pointLabels.length;
        var pointLabelOpts = scale.options.pointLabels;
        var additionalAngle = pointLabelOpts.centerPointLabels ? $6892236ee0bf6afc$export$56c0d5a1e737357d / valueCount : 0;
        for(var i = 0; i < valueCount; i++){
            var opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
            padding[i] = opts.padding;
            var pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
            var plFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(opts.font);
            var textSize = $68fbc1daad5cf8b5$var$measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
            labelSizes[i] = textSize;
            var angleRadians = $6892236ee0bf6afc$export$9fa96a7d116ea3ce(scale.getIndexAngle(i) + additionalAngle);
            var angle = Math.round($6892236ee0bf6afc$export$25ce5a424b770e84(angleRadians));
            var hLimits = $68fbc1daad5cf8b5$var$determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
            var vLimits = $68fbc1daad5cf8b5$var$determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
            $68fbc1daad5cf8b5$var$updateLimits(limits, orig, angleRadians, hLimits, vLimits);
        }
        scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
        scale._pointLabelItems = $68fbc1daad5cf8b5$var$buildPointLabelItems(scale, labelSizes, padding);
    }
    function $68fbc1daad5cf8b5$var$updateLimits(limits, orig, angle, hLimits, vLimits) {
        var sin = Math.abs(Math.sin(angle));
        var cos = Math.abs(Math.cos(angle));
        var x = 0;
        var y = 0;
        if (hLimits.start < orig.l) {
            x = (orig.l - hLimits.start) / sin;
            limits.l = Math.min(limits.l, orig.l - x);
        } else if (hLimits.end > orig.r) {
            x = (hLimits.end - orig.r) / sin;
            limits.r = Math.max(limits.r, orig.r + x);
        }
        if (vLimits.start < orig.t) {
            y = (orig.t - vLimits.start) / cos;
            limits.t = Math.min(limits.t, orig.t - y);
        } else if (vLimits.end > orig.b) {
            y = (vLimits.end - orig.b) / cos;
            limits.b = Math.max(limits.b, orig.b + y);
        }
    }
    function $68fbc1daad5cf8b5$var$buildPointLabelItems(scale, labelSizes, padding) {
        var items = [];
        var valueCount = scale._pointLabels.length;
        var opts = scale.options;
        var extra = $68fbc1daad5cf8b5$var$getTickBackdropHeight(opts) / 2;
        var outerDistance = scale.drawingArea;
        var additionalAngle = opts.pointLabels.centerPointLabels ? $6892236ee0bf6afc$export$56c0d5a1e737357d / valueCount : 0;
        for(var i = 0; i < valueCount; i++){
            var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);
            var angle = Math.round($6892236ee0bf6afc$export$25ce5a424b770e84($6892236ee0bf6afc$export$9fa96a7d116ea3ce(pointLabelPosition.angle + $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd)));
            var size = labelSizes[i];
            var y = $68fbc1daad5cf8b5$var$yForAngle(pointLabelPosition.y, size.h, angle);
            var textAlign = $68fbc1daad5cf8b5$var$getTextAlignForAngle(angle);
            var left = $68fbc1daad5cf8b5$var$leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
            items.push({
                x: pointLabelPosition.x,
                y: y,
                textAlign: textAlign,
                left: left,
                top: y,
                right: left + size.w,
                bottom: y + size.h
            });
        }
        return items;
    }
    function $68fbc1daad5cf8b5$var$getTextAlignForAngle(angle) {
        if (angle === 0 || angle === 180) return "center";
        else if (angle < 180) return "left";
        return "right";
    }
    function $68fbc1daad5cf8b5$var$leftForTextAlign(x, w, align) {
        if (align === "right") x -= w;
        else if (align === "center") x -= w / 2;
        return x;
    }
    function $68fbc1daad5cf8b5$var$yForAngle(y, h, angle) {
        if (angle === 90 || angle === 270) y -= h / 2;
        else if (angle > 270 || angle < 90) y -= h;
        return y;
    }
    function $68fbc1daad5cf8b5$var$drawPointLabels(scale, labelCount) {
        var ctx = scale.ctx, pointLabels = scale.options.pointLabels;
        for(var i = labelCount - 1; i >= 0; i--){
            var optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
            var plFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(optsAtIndex.font);
            var _i = scale._pointLabelItems[i], x = _i.x, y = _i.y, textAlign = _i.textAlign, left = _i.left, top = _i.top, right = _i.right, bottom = _i.bottom;
            var backdropColor = optsAtIndex.backdropColor;
            if (!$6892236ee0bf6afc$export$342063e11d6c3cad(backdropColor)) {
                var borderRadius = $6892236ee0bf6afc$export$d66dc83d8cfc8dd(optsAtIndex.borderRadius);
                var padding = $6892236ee0bf6afc$export$96f57966bedc81b4(optsAtIndex.backdropPadding);
                ctx.fillStyle = backdropColor;
                var backdropLeft = left - padding.left;
                var backdropTop = top - padding.top;
                var backdropWidth = right - left + padding.width;
                var backdropHeight = bottom - top + padding.height;
                if (Object.values(borderRadius).some(function(v) {
                    return v !== 0;
                })) {
                    ctx.beginPath();
                    $6892236ee0bf6afc$export$493d36ec626b6698(ctx, {
                        x: backdropLeft,
                        y: backdropTop,
                        w: backdropWidth,
                        h: backdropHeight,
                        radius: borderRadius
                    });
                    ctx.fill();
                } else ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
            }
            $6892236ee0bf6afc$export$8743009a87fcb00f(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {
                color: optsAtIndex.color,
                textAlign: textAlign,
                textBaseline: "middle"
            });
        }
    }
    function $68fbc1daad5cf8b5$var$pathRadiusLine(scale, radius, circular, labelCount) {
        var ctx = scale.ctx;
        if (circular) ctx.arc(scale.xCenter, scale.yCenter, radius, 0, $6892236ee0bf6afc$export$971d5caa766a69d7);
        else {
            var pointPosition = scale.getPointPosition(0, radius);
            ctx.moveTo(pointPosition.x, pointPosition.y);
            for(var i = 1; i < labelCount; i++){
                pointPosition = scale.getPointPosition(i, radius);
                ctx.lineTo(pointPosition.x, pointPosition.y);
            }
        }
    }
    function $68fbc1daad5cf8b5$var$drawRadiusLine(scale, gridLineOpts, radius, labelCount) {
        var ctx = scale.ctx;
        var circular = gridLineOpts.circular;
        var color5 = gridLineOpts.color, lineWidth = gridLineOpts.lineWidth;
        if (!circular && !labelCount || !color5 || !lineWidth || radius < 0) return;
        ctx.save();
        ctx.strokeStyle = color5;
        ctx.lineWidth = lineWidth;
        ctx.setLineDash(gridLineOpts.borderDash);
        ctx.lineDashOffset = gridLineOpts.borderDashOffset;
        ctx.beginPath();
        $68fbc1daad5cf8b5$var$pathRadiusLine(scale, radius, circular, labelCount);
        ctx.closePath();
        ctx.stroke();
        ctx.restore();
    }
    function $68fbc1daad5cf8b5$var$createPointLabelContext(parent, index74, label) {
        return $6892236ee0bf6afc$export$dda1d9f60106f0e9(parent, {
            label: label,
            index: index74,
            type: "pointLabel"
        });
    }
    var $68fbc1daad5cf8b5$export$cfafc36d95386d38 = /*#__PURE__*/ function(LinearScaleBase1) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(RadialLinearScale, LinearScaleBase1);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(RadialLinearScale);
        function RadialLinearScale(cfg) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, RadialLinearScale);
            var _this;
            _this = _super.call(this, cfg);
            _this.xCenter = undefined;
            _this.yCenter = undefined;
            _this.drawingArea = undefined;
            _this._pointLabels = [];
            _this._pointLabelItems = [];
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(RadialLinearScale, [
            {
                key: "setDimensions",
                value: function setDimensions() {
                    var padding = this._padding = $6892236ee0bf6afc$export$96f57966bedc81b4($68fbc1daad5cf8b5$var$getTickBackdropHeight(this.options) / 2);
                    var w = this.width = this.maxWidth - padding.width;
                    var h = this.height = this.maxHeight - padding.height;
                    this.xCenter = Math.floor(this.left + w / 2 + padding.left);
                    this.yCenter = Math.floor(this.top + h / 2 + padding.top);
                    this.drawingArea = Math.floor(Math.min(w, h) / 2);
                }
            },
            {
                key: "determineDataLimits",
                value: function determineDataLimits() {
                    var ref = this.getMinMax(false), min = ref.min, max = ref.max;
                    this.min = $6892236ee0bf6afc$export$39b482c5e57630a8(min) && !isNaN(min) ? min : 0;
                    this.max = $6892236ee0bf6afc$export$39b482c5e57630a8(max) && !isNaN(max) ? max : 0;
                    this.handleTickRangeOptions();
                }
            },
            {
                key: "computeTickLimit",
                value: function computeTickLimit() {
                    return Math.ceil(this.drawingArea / $68fbc1daad5cf8b5$var$getTickBackdropHeight(this.options));
                }
            },
            {
                key: "generateTickLabels",
                value: function generateTickLabels(ticks) {
                    var _this = this;
                    $68fbc1daad5cf8b5$var$LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
                    this._pointLabels = this.getLabels().map(function(value, index75) {
                        var label = $6892236ee0bf6afc$export$3722cfe417b6ed86(_this.options.pointLabels.callback, [
                            value,
                            index75
                        ], _this);
                        return label || label === 0 ? label : "";
                    }).filter(function(v, i) {
                        return _this.chart.getDataVisibility(i);
                    });
                }
            },
            {
                key: "fit",
                value: function fit() {
                    var opts = this.options;
                    if (opts.display && opts.pointLabels.display) $68fbc1daad5cf8b5$var$fitWithPointLabels(this);
                    else this.setCenterPoint(0, 0, 0, 0);
                }
            },
            {
                key: "setCenterPoint",
                value: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
                    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
                    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
                    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
                }
            },
            {
                key: "getIndexAngle",
                value: function getIndexAngle(index76) {
                    var angleMultiplier = $6892236ee0bf6afc$export$971d5caa766a69d7 / (this._pointLabels.length || 1);
                    var startAngle = this.options.startAngle || 0;
                    return $6892236ee0bf6afc$export$9fa96a7d116ea3ce(index76 * angleMultiplier + $6892236ee0bf6afc$export$625550452a3fa3ec(startAngle));
                }
            },
            {
                key: "getDistanceFromCenterForValue",
                value: function getDistanceFromCenterForValue(value) {
                    if ($6892236ee0bf6afc$export$342063e11d6c3cad(value)) return NaN;
                    var scalingFactor = this.drawingArea / (this.max - this.min);
                    if (this.options.reverse) return (this.max - value) * scalingFactor;
                    return (value - this.min) * scalingFactor;
                }
            },
            {
                key: "getValueForDistanceFromCenter",
                value: function getValueForDistanceFromCenter(distance) {
                    if ($6892236ee0bf6afc$export$342063e11d6c3cad(distance)) return NaN;
                    var scaledDistance = distance / (this.drawingArea / (this.max - this.min));
                    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
                }
            },
            {
                key: "getPointLabelContext",
                value: function getPointLabelContext(index77) {
                    var pointLabels = this._pointLabels || [];
                    if (index77 >= 0 && index77 < pointLabels.length) {
                        var pointLabel = pointLabels[index77];
                        return $68fbc1daad5cf8b5$var$createPointLabelContext(this.getContext(), index77, pointLabel);
                    }
                }
            },
            {
                key: "getPointPosition",
                value: function getPointPosition(index78, distanceFromCenter) {
                    var additionalAngle = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
                    var angle = this.getIndexAngle(index78) - $6892236ee0bf6afc$export$7f8ddf7c7c20b3cd + additionalAngle;
                    return {
                        x: Math.cos(angle) * distanceFromCenter + this.xCenter,
                        y: Math.sin(angle) * distanceFromCenter + this.yCenter,
                        angle: angle
                    };
                }
            },
            {
                key: "getPointPositionForValue",
                value: function getPointPositionForValue(index79, value) {
                    return this.getPointPosition(index79, this.getDistanceFromCenterForValue(value));
                }
            },
            {
                key: "getBasePosition",
                value: function getBasePosition(index80) {
                    return this.getPointPositionForValue(index80 || 0, this.getBaseValue());
                }
            },
            {
                key: "getPointLabelPosition",
                value: function getPointLabelPosition(index81) {
                    var _index = this._pointLabelItems[index81], left = _index.left, top = _index.top, right = _index.right, bottom = _index.bottom;
                    return {
                        left: left,
                        top: top,
                        right: right,
                        bottom: bottom
                    };
                }
            },
            {
                key: "drawBackground",
                value: function drawBackground() {
                    var _options = this.options, backgroundColor = _options.backgroundColor, circular = _options.grid.circular;
                    if (backgroundColor) {
                        var ctx = this.ctx;
                        ctx.save();
                        ctx.beginPath();
                        $68fbc1daad5cf8b5$var$pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
                        ctx.closePath();
                        ctx.fillStyle = backgroundColor;
                        ctx.fill();
                        ctx.restore();
                    }
                }
            },
            {
                key: "drawGrid",
                value: function drawGrid() {
                    var _this = this;
                    var ctx = this.ctx;
                    var opts = this.options;
                    var angleLines = opts.angleLines, grid = opts.grid;
                    var labelCount = this._pointLabels.length;
                    var i, offset, position;
                    if (opts.pointLabels.display) $68fbc1daad5cf8b5$var$drawPointLabels(this, labelCount);
                    if (grid.display) this.ticks.forEach(function(tick, index82) {
                        if (index82 !== 0) {
                            offset = _this.getDistanceFromCenterForValue(tick.value);
                            var optsAtIndex = grid.setContext(_this.getContext(index82 - 1));
                            $68fbc1daad5cf8b5$var$drawRadiusLine(_this, optsAtIndex, offset, labelCount);
                        }
                    });
                    if (angleLines.display) {
                        ctx.save();
                        for(i = labelCount - 1; i >= 0; i--){
                            var optsAtIndex1 = angleLines.setContext(this.getPointLabelContext(i));
                            var color6 = optsAtIndex1.color, lineWidth = optsAtIndex1.lineWidth;
                            if (!lineWidth || !color6) continue;
                            ctx.lineWidth = lineWidth;
                            ctx.strokeStyle = color6;
                            ctx.setLineDash(optsAtIndex1.borderDash);
                            ctx.lineDashOffset = optsAtIndex1.borderDashOffset;
                            offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
                            position = this.getPointPosition(i, offset);
                            ctx.beginPath();
                            ctx.moveTo(this.xCenter, this.yCenter);
                            ctx.lineTo(position.x, position.y);
                            ctx.stroke();
                        }
                        ctx.restore();
                    }
                }
            },
            {
                key: "drawBorder",
                value: function drawBorder() {
                }
            },
            {
                key: "drawLabels",
                value: function drawLabels() {
                    var _this = this;
                    var ctx = this.ctx;
                    var opts = this.options;
                    var tickOpts = opts.ticks;
                    if (!tickOpts.display) return;
                    var startAngle = this.getIndexAngle(0);
                    var offset, width;
                    ctx.save();
                    ctx.translate(this.xCenter, this.yCenter);
                    ctx.rotate(startAngle);
                    ctx.textAlign = "center";
                    ctx.textBaseline = "middle";
                    this.ticks.forEach(function(tick, index83) {
                        if (index83 === 0 && !opts.reverse) return;
                        var optsAtIndex = tickOpts.setContext(_this.getContext(index83));
                        var tickFont = $6892236ee0bf6afc$export$3d8c2f653ac9d0b9(optsAtIndex.font);
                        offset = _this.getDistanceFromCenterForValue(_this.ticks[index83].value);
                        if (optsAtIndex.showLabelBackdrop) {
                            ctx.font = tickFont.string;
                            width = ctx.measureText(tick.label).width;
                            ctx.fillStyle = optsAtIndex.backdropColor;
                            var padding = $6892236ee0bf6afc$export$96f57966bedc81b4(optsAtIndex.backdropPadding);
                            ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
                        }
                        $6892236ee0bf6afc$export$8743009a87fcb00f(ctx, tick.label, 0, -offset, tickFont, {
                            color: optsAtIndex.color
                        });
                    });
                    ctx.restore();
                }
            },
            {
                key: "drawTitle",
                value: function drawTitle() {
                }
            }
        ]);
        return RadialLinearScale;
    }($68fbc1daad5cf8b5$var$LinearScaleBase);
    $68fbc1daad5cf8b5$export$cfafc36d95386d38.id = "radialLinear";
    $68fbc1daad5cf8b5$export$cfafc36d95386d38.defaults = {
        display: true,
        animate: true,
        position: "chartArea",
        angleLines: {
            display: true,
            lineWidth: 1,
            borderDash: [],
            borderDashOffset: 0
        },
        grid: {
            circular: false
        },
        startAngle: 0,
        ticks: {
            showLabelBackdrop: true,
            callback: $68fbc1daad5cf8b5$export$27c7467594ef87bd.formatters.numeric
        },
        pointLabels: {
            backdropColor: undefined,
            backdropPadding: 2,
            display: true,
            font: {
                size: 10
            },
            callback: function(label) {
                return label;
            },
            padding: 5,
            centerPointLabels: false
        }
    };
    $68fbc1daad5cf8b5$export$cfafc36d95386d38.defaultRoutes = {
        "angleLines.color": "borderColor",
        "pointLabels.color": "color",
        "ticks.color": "color"
    };
    $68fbc1daad5cf8b5$export$cfafc36d95386d38.descriptors = {
        angleLines: {
            _fallback: "grid"
        }
    };
    var $68fbc1daad5cf8b5$var$INTERVALS = {
        millisecond: {
            common: true,
            size: 1,
            steps: 1000
        },
        second: {
            common: true,
            size: 1000,
            steps: 60
        },
        minute: {
            common: true,
            size: 60000,
            steps: 60
        },
        hour: {
            common: true,
            size: 3600000,
            steps: 24
        },
        day: {
            common: true,
            size: 86400000,
            steps: 30
        },
        week: {
            common: false,
            size: 604800000,
            steps: 4
        },
        month: {
            common: true,
            size: 2628000000,
            steps: 12
        },
        quarter: {
            common: false,
            size: 7884000000,
            steps: 4
        },
        year: {
            common: true,
            size: 31540000000
        }
    };
    var $68fbc1daad5cf8b5$var$UNITS = Object.keys($68fbc1daad5cf8b5$var$INTERVALS);
    function $68fbc1daad5cf8b5$var$sorter(a, b) {
        return a - b;
    }
    function $68fbc1daad5cf8b5$var$parse(scale, input) {
        if ($6892236ee0bf6afc$export$342063e11d6c3cad(input)) return null;
        var adapter = scale._adapter;
        var __parseOpts = scale._parseOpts, parser = __parseOpts.parser, round = __parseOpts.round, isoWeekday = __parseOpts.isoWeekday;
        var value = input;
        if (typeof parser === "function") value = parser(value);
        if (!$6892236ee0bf6afc$export$39b482c5e57630a8(value)) value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
        if (value === null) return null;
        if (round) value = round === "week" && ($6892236ee0bf6afc$export$9e5f44173e64f162(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round);
        return +value;
    }
    function $68fbc1daad5cf8b5$var$determineUnitForAutoTicks(minUnit, min, max, capacity) {
        var ilen = $68fbc1daad5cf8b5$var$UNITS.length;
        for(var i = $68fbc1daad5cf8b5$var$UNITS.indexOf(minUnit); i < ilen - 1; ++i){
            var interval = $68fbc1daad5cf8b5$var$INTERVALS[$68fbc1daad5cf8b5$var$UNITS[i]];
            var factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
            if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) return $68fbc1daad5cf8b5$var$UNITS[i];
        }
        return $68fbc1daad5cf8b5$var$UNITS[ilen - 1];
    }
    function $68fbc1daad5cf8b5$var$determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
        for(var i = $68fbc1daad5cf8b5$var$UNITS.length - 1; i >= $68fbc1daad5cf8b5$var$UNITS.indexOf(minUnit); i--){
            var unit = $68fbc1daad5cf8b5$var$UNITS[i];
            if ($68fbc1daad5cf8b5$var$INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) return unit;
        }
        return $68fbc1daad5cf8b5$var$UNITS[minUnit ? $68fbc1daad5cf8b5$var$UNITS.indexOf(minUnit) : 0];
    }
    function $68fbc1daad5cf8b5$var$determineMajorUnit(unit) {
        for(var i = $68fbc1daad5cf8b5$var$UNITS.indexOf(unit) + 1, ilen = $68fbc1daad5cf8b5$var$UNITS.length; i < ilen; ++i){
            if ($68fbc1daad5cf8b5$var$INTERVALS[$68fbc1daad5cf8b5$var$UNITS[i]].common) return $68fbc1daad5cf8b5$var$UNITS[i];
        }
    }
    function $68fbc1daad5cf8b5$var$addTick(ticks, time, timestamps) {
        if (!timestamps) ticks[time] = true;
        else if (timestamps.length) {
            var ref = $6892236ee0bf6afc$export$91477dc880baac21(timestamps, time), lo = ref.lo, hi = ref.hi;
            var timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
            ticks[timestamp] = true;
        }
    }
    function $68fbc1daad5cf8b5$var$setMajorTicks(scale, ticks, map1, majorUnit) {
        var adapter = scale._adapter;
        var first = +adapter.startOf(ticks[0].value, majorUnit);
        var last = ticks[ticks.length - 1].value;
        var major, index84;
        for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){
            index84 = map1[major];
            if (index84 >= 0) ticks[index84].major = true;
        }
        return ticks;
    }
    function $68fbc1daad5cf8b5$var$ticksFromTimestamps(scale, values, majorUnit) {
        var ticks = [];
        var map2 = {
        };
        var ilen = values.length;
        var i, value;
        for(i = 0; i < ilen; ++i){
            value = values[i];
            map2[value] = i;
            ticks.push({
                value: value,
                major: false
            });
        }
        return ilen === 0 || !majorUnit ? ticks : $68fbc1daad5cf8b5$var$setMajorTicks(scale, ticks, map2, majorUnit);
    }
    var $68fbc1daad5cf8b5$export$a894c72689ff3ec = /*#__PURE__*/ function(Scale) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(TimeScale, Scale);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(TimeScale);
        function TimeScale(props) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, TimeScale);
            var _this;
            _this = _super.call(this, props);
            _this._cache = {
                data: [],
                labels: [],
                all: []
            };
            _this._unit = "day";
            _this._majorUnit = undefined;
            _this._offsets = {
            };
            _this._normalized = false;
            _this._parseOpts = undefined;
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(TimeScale, [
            {
                key: "init",
                value: function init(scaleOpts, opts) {
                    var time = scaleOpts.time || (scaleOpts.time = {
                    });
                    var adapter = this._adapter = new $68fbc1daad5cf8b5$export$f32766ea09ec8bc4._date(scaleOpts.adapters.date);
                    $6892236ee0bf6afc$export$7910e0436ed8d1de(time.displayFormats, adapter.formats());
                    this._parseOpts = {
                        parser: time.parser,
                        round: time.round,
                        isoWeekday: time.isoWeekday
                    };
                    /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(TimeScale.prototype), "init", this).call(this, scaleOpts);
                    this._normalized = opts.normalized;
                }
            },
            {
                key: "parse",
                value: function parse1(raw, index) {
                    if (raw === undefined) return null;
                    return $68fbc1daad5cf8b5$var$parse(this, raw);
                }
            },
            {
                key: "beforeLayout",
                value: function beforeLayout() {
                    /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(TimeScale.prototype), "beforeLayout", this).call(this);
                    this._cache = {
                        data: [],
                        labels: [],
                        all: []
                    };
                }
            },
            {
                key: "determineDataLimits",
                value: function determineDataLimits() {
                    var _applyBounds = function _applyBounds(bounds) {
                        if (!minDefined && !isNaN(bounds.min)) min = Math.min(min, bounds.min);
                        if (!maxDefined && !isNaN(bounds.max)) max = Math.max(max, bounds.max);
                    };
                    var options = this.options;
                    var adapter = this._adapter;
                    var unit = options.time.unit || "day";
                    var ref = this.getUserBounds(), min = ref.min, max = ref.max, minDefined = ref.minDefined, maxDefined = ref.maxDefined;
                    if (!minDefined || !maxDefined) {
                        _applyBounds(this._getLabelBounds());
                        if (options.bounds !== "ticks" || options.ticks.source !== "labels") _applyBounds(this.getMinMax(false));
                    }
                    min = $6892236ee0bf6afc$export$39b482c5e57630a8(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
                    max = $6892236ee0bf6afc$export$39b482c5e57630a8(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
                    this.min = Math.min(min, max - 1);
                    this.max = Math.max(min + 1, max);
                }
            },
            {
                key: "_getLabelBounds",
                value: function _getLabelBounds() {
                    var arr = this.getLabelTimestamps();
                    var min = Number.POSITIVE_INFINITY;
                    var max = Number.NEGATIVE_INFINITY;
                    if (arr.length) {
                        min = arr[0];
                        max = arr[arr.length - 1];
                    }
                    return {
                        min: min,
                        max: max
                    };
                }
            },
            {
                key: "buildTicks",
                value: function buildTicks() {
                    var options = this.options;
                    var timeOpts = options.time;
                    var tickOpts = options.ticks;
                    var timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
                    if (options.bounds === "ticks" && timestamps.length) {
                        this.min = this._userMin || timestamps[0];
                        this.max = this._userMax || timestamps[timestamps.length - 1];
                    }
                    var min = this.min;
                    var max = this.max;
                    var ticks = $6892236ee0bf6afc$export$23ebac1979863676(timestamps, min, max);
                    this._unit = timeOpts.unit || (tickOpts.autoSkip ? $68fbc1daad5cf8b5$var$determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : $68fbc1daad5cf8b5$var$determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
                    this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? undefined : $68fbc1daad5cf8b5$var$determineMajorUnit(this._unit);
                    this.initOffsets(timestamps);
                    if (options.reverse) ticks.reverse();
                    return $68fbc1daad5cf8b5$var$ticksFromTimestamps(this, ticks, this._majorUnit);
                }
            },
            {
                key: "afterAutoSkip",
                value: function afterAutoSkip() {
                    if (this.options.offsetAfterAutoskip) this.initOffsets(this.ticks.map(function(tick) {
                        return +tick.value;
                    }));
                }
            },
            {
                key: "initOffsets",
                value: function initOffsets(timestamps) {
                    var start = 0;
                    var end = 0;
                    var first, last;
                    if (this.options.offset && timestamps.length) {
                        first = this.getDecimalForValue(timestamps[0]);
                        if (timestamps.length === 1) start = 1 - first;
                        else start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
                        last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
                        if (timestamps.length === 1) end = last;
                        else end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
                    }
                    var limit = timestamps.length < 3 ? 0.5 : 0.25;
                    start = $6892236ee0bf6afc$export$efccba1c4a2ef57b(start, 0, limit);
                    end = $6892236ee0bf6afc$export$efccba1c4a2ef57b(end, 0, limit);
                    this._offsets = {
                        start: start,
                        end: end,
                        factor: 1 / (start + 1 + end)
                    };
                }
            },
            {
                key: "_generate",
                value: function _generate() {
                    var adapter = this._adapter;
                    var min = this.min;
                    var max = this.max;
                    var options = this.options;
                    var timeOpts = options.time;
                    var minor = timeOpts.unit || $68fbc1daad5cf8b5$var$determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
                    var stepSize = $6892236ee0bf6afc$export$90a7f3efeed30595(timeOpts.stepSize, 1);
                    var weekday = minor === "week" ? timeOpts.isoWeekday : false;
                    var hasWeekday = $6892236ee0bf6afc$export$9e5f44173e64f162(weekday) || weekday === true;
                    var ticks = {
                    };
                    var first = min;
                    var time, count;
                    if (hasWeekday) first = +adapter.startOf(first, "isoWeek", weekday);
                    first = +adapter.startOf(first, hasWeekday ? "day" : minor);
                    if (adapter.diff(max, min, minor) > 100000 * stepSize) throw new Error(min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor);
                    var timestamps = options.ticks.source === "data" && this.getDataTimestamps();
                    for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++)$68fbc1daad5cf8b5$var$addTick(ticks, time, timestamps);
                    if (time === max || options.bounds === "ticks" || count === 1) $68fbc1daad5cf8b5$var$addTick(ticks, time, timestamps);
                    return Object.keys(ticks).sort(function(a, b) {
                        return a - b;
                    }).map(function(x) {
                        return +x;
                    });
                }
            },
            {
                key: "getLabelForValue",
                value: function getLabelForValue(value) {
                    var adapter = this._adapter;
                    var timeOpts = this.options.time;
                    if (timeOpts.tooltipFormat) return adapter.format(value, timeOpts.tooltipFormat);
                    return adapter.format(value, timeOpts.displayFormats.datetime);
                }
            },
            {
                key: "_tickFormatFunction",
                value: function _tickFormatFunction(time, index85, ticks, format) {
                    var options = this.options;
                    var formats = options.time.displayFormats;
                    var unit = this._unit;
                    var majorUnit = this._majorUnit;
                    var minorFormat = unit && formats[unit];
                    var majorFormat = majorUnit && formats[majorUnit];
                    var tick = ticks[index85];
                    var major = majorUnit && majorFormat && tick && tick.major;
                    var label = this._adapter.format(time, format || (major ? majorFormat : minorFormat));
                    var formatter = options.ticks.callback;
                    return formatter ? $6892236ee0bf6afc$export$3722cfe417b6ed86(formatter, [
                        label,
                        index85,
                        ticks
                    ], this) : label;
                }
            },
            {
                key: "generateTickLabels",
                value: function generateTickLabels(ticks) {
                    var i, ilen, tick;
                    for(i = 0, ilen = ticks.length; i < ilen; ++i){
                        tick = ticks[i];
                        tick.label = this._tickFormatFunction(tick.value, i, ticks);
                    }
                }
            },
            {
                key: "getDecimalForValue",
                value: function getDecimalForValue(value) {
                    return value === null ? NaN : (value - this.min) / (this.max - this.min);
                }
            },
            {
                key: "getPixelForValue",
                value: function getPixelForValue(value) {
                    var offsets = this._offsets;
                    var pos = this.getDecimalForValue(value);
                    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
                }
            },
            {
                key: "getValueForPixel",
                value: function getValueForPixel(pixel) {
                    var offsets = this._offsets;
                    var pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
                    return this.min + pos * (this.max - this.min);
                }
            },
            {
                key: "_getLabelSize",
                value: function _getLabelSize(label) {
                    var ticksOpts = this.options.ticks;
                    var tickLabelWidth = this.ctx.measureText(label).width;
                    var angle = $6892236ee0bf6afc$export$625550452a3fa3ec(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
                    var cosRotation = Math.cos(angle);
                    var sinRotation = Math.sin(angle);
                    var tickFontSize = this._resolveTickFontOptions(0).size;
                    return {
                        w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
                        h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
                    };
                }
            },
            {
                key: "_getLabelCapacity",
                value: function _getLabelCapacity(exampleTime) {
                    var timeOpts = this.options.time;
                    var displayFormats = timeOpts.displayFormats;
                    var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
                    var exampleLabel = this._tickFormatFunction(exampleTime, 0, $68fbc1daad5cf8b5$var$ticksFromTimestamps(this, [
                        exampleTime
                    ], this._majorUnit), format);
                    var size = this._getLabelSize(exampleLabel);
                    var capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
                    return capacity > 0 ? capacity : 1;
                }
            },
            {
                key: "getDataTimestamps",
                value: function getDataTimestamps() {
                    var timestamps = this._cache.data || [];
                    var i, ilen;
                    if (timestamps.length) return timestamps;
                    var metas = this.getMatchingVisibleMetas();
                    if (this._normalized && metas.length) return this._cache.data = metas[0].controller.getAllParsedValues(this);
                    for(i = 0, ilen = metas.length; i < ilen; ++i)timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
                    return this._cache.data = this.normalize(timestamps);
                }
            },
            {
                key: "getLabelTimestamps",
                value: function getLabelTimestamps() {
                    var timestamps = this._cache.labels || [];
                    var i, ilen;
                    if (timestamps.length) return timestamps;
                    var labels = this.getLabels();
                    for(i = 0, ilen = labels.length; i < ilen; ++i)timestamps.push($68fbc1daad5cf8b5$var$parse(this, labels[i]));
                    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
                }
            },
            {
                key: "normalize",
                value: function normalize(values) {
                    return $6892236ee0bf6afc$export$71511d61b312f219(values.sort($68fbc1daad5cf8b5$var$sorter));
                }
            }
        ]);
        return TimeScale;
    }($68fbc1daad5cf8b5$export$d60cfc58d3c358b6);
    $68fbc1daad5cf8b5$export$a894c72689ff3ec.id = "time";
    $68fbc1daad5cf8b5$export$a894c72689ff3ec.defaults = {
        bounds: "data",
        adapters: {
        },
        time: {
            parser: false,
            unit: false,
            round: false,
            isoWeekday: false,
            minUnit: "millisecond",
            displayFormats: {
            }
        },
        ticks: {
            source: "auto",
            major: {
                enabled: false
            }
        }
    };
    function $68fbc1daad5cf8b5$var$interpolate(table, val, reverse) {
        var lo = 0;
        var hi = table.length - 1;
        var prevSource, nextSource, prevTarget, nextTarget;
        if (reverse) {
            var ref;
            if (val >= table[lo].pos && val <= table[hi].pos) ref = $6892236ee0bf6afc$export$d141bba7fdc215a3(table, "pos", val), lo = ref.lo, hi = ref.hi;
            var ref16;
            ref16 = table[lo], prevSource = ref16.pos, prevTarget = ref16.time;
            var ref17;
            ref17 = table[hi], nextSource = ref17.pos, nextTarget = ref17.time;
        } else {
            var ref18;
            if (val >= table[lo].time && val <= table[hi].time) ref18 = $6892236ee0bf6afc$export$d141bba7fdc215a3(table, "time", val), lo = ref18.lo, hi = ref18.hi;
            var ref19;
            ref19 = table[lo], prevSource = ref19.time, prevTarget = ref19.pos;
            var ref20;
            ref20 = table[hi], nextSource = ref20.time, nextTarget = ref20.pos;
        }
        var span = nextSource - prevSource;
        return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
    }
    var $68fbc1daad5cf8b5$export$85df64a8eb6dc986 = /*#__PURE__*/ function(TimeScale) {
        /*@__PURE__*/ $parcel$interopDefault($564f7ef37bc8bd96$exports)(TimeSeriesScale, TimeScale);
        var _super = /*@__PURE__*/ $parcel$interopDefault($471f5fa2b7524a03$exports)(TimeSeriesScale);
        function TimeSeriesScale(props) {
            /*@__PURE__*/ $parcel$interopDefault($01a7f0bc5f30e98e$exports)(this, TimeSeriesScale);
            var _this;
            _this = _super.call(this, props);
            _this._table = [];
            _this._minPos = undefined;
            _this._tableRange = undefined;
            return _this;
        }
        /*@__PURE__*/ $parcel$interopDefault($6708ab7a357b03d9$exports)(TimeSeriesScale, [
            {
                key: "initOffsets",
                value: function initOffsets() {
                    var timestamps = this._getTimestampsForTable();
                    var table = this._table = this.buildLookupTable(timestamps);
                    this._minPos = $68fbc1daad5cf8b5$var$interpolate(table, this.min);
                    this._tableRange = $68fbc1daad5cf8b5$var$interpolate(table, this.max) - this._minPos;
                    /*@__PURE__*/ $parcel$interopDefault($f452dcf8faa6ea67$exports)(/*@__PURE__*/ $parcel$interopDefault($Ebg6X)(TimeSeriesScale.prototype), "initOffsets", this).call(this, timestamps);
                }
            },
            {
                key: "buildLookupTable",
                value: function buildLookupTable(timestamps) {
                    var ref = this, min = ref.min, max = ref.max;
                    var items = [];
                    var table = [];
                    var i, ilen, prev, curr, next;
                    for(i = 0, ilen = timestamps.length; i < ilen; ++i){
                        curr = timestamps[i];
                        if (curr >= min && curr <= max) items.push(curr);
                    }
                    if (items.length < 2) return [
                        {
                            time: min,
                            pos: 0
                        },
                        {
                            time: max,
                            pos: 1
                        }
                    ];
                    for(i = 0, ilen = items.length; i < ilen; ++i){
                        next = items[i + 1];
                        prev = items[i - 1];
                        curr = items[i];
                        if (Math.round((next + prev) / 2) !== curr) table.push({
                            time: curr,
                            pos: i / (ilen - 1)
                        });
                    }
                    return table;
                }
            },
            {
                key: "_getTimestampsForTable",
                value: function _getTimestampsForTable() {
                    var timestamps = this._cache.all || [];
                    if (timestamps.length) return timestamps;
                    var data = this.getDataTimestamps();
                    var label = this.getLabelTimestamps();
                    if (data.length && label.length) timestamps = this.normalize(data.concat(label));
                    else timestamps = data.length ? data : label;
                    timestamps = this._cache.all = timestamps;
                    return timestamps;
                }
            },
            {
                key: "getDecimalForValue",
                value: function getDecimalForValue(value) {
                    return ($68fbc1daad5cf8b5$var$interpolate(this._table, value) - this._minPos) / this._tableRange;
                }
            },
            {
                key: "getValueForPixel",
                value: function getValueForPixel(pixel) {
                    var offsets = this._offsets;
                    var decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
                    return $68fbc1daad5cf8b5$var$interpolate(this._table, decimal * this._tableRange + this._minPos, true);
                }
            }
        ]);
        return TimeSeriesScale;
    }($68fbc1daad5cf8b5$export$a894c72689ff3ec);
    $68fbc1daad5cf8b5$export$85df64a8eb6dc986.id = "timeseries";
    $68fbc1daad5cf8b5$export$85df64a8eb6dc986.defaults = $68fbc1daad5cf8b5$export$a894c72689ff3ec.defaults;
    var $68fbc1daad5cf8b5$export$bcac1c16f1530ec2 = /*#__PURE__*/ Object.freeze({
        __proto__: null,
        CategoryScale: $68fbc1daad5cf8b5$export$29e663ba4d09fe7,
        LinearScale: $68fbc1daad5cf8b5$export$e7f4e5e8656f0b93,
        LogarithmicScale: $68fbc1daad5cf8b5$export$85295eaf7cb3ac3e,
        RadialLinearScale: $68fbc1daad5cf8b5$export$cfafc36d95386d38,
        TimeScale: $68fbc1daad5cf8b5$export$a894c72689ff3ec,
        TimeSeriesScale: $68fbc1daad5cf8b5$export$85df64a8eb6dc986
    });
    var $68fbc1daad5cf8b5$export$e8959e79e3af550f = [
        $68fbc1daad5cf8b5$export$a6506504f799c5d5,
        $68fbc1daad5cf8b5$export$7a5d735b2ab6389d,
        $68fbc1daad5cf8b5$export$8b3ca321c77fdea6,
        $68fbc1daad5cf8b5$export$bcac1c16f1530ec2, 
    ];
    $68fbc1daad5cf8b5$export$acaa6426d77a227e.register($68fbc1daad5cf8b5$export$d48203c759d6a1fc, $68fbc1daad5cf8b5$export$e04603e7d8b77172, $68fbc1daad5cf8b5$export$28c660c63b792dea);
    // VIEW
    // mortgage amount - сумма ипотеки
    var $731578ad9cd9cebd$var$renderMortgageAmount = function(elements, watchedState) {
        var resultMortgageAmount = elements.resultMortgageAmount;
        var result = watchedState.result;
        if (resultMortgageAmount) resultMortgageAmount.innerHTML = result["mortgage-amount"].toLocaleString("en-US", {
            minimumFractionDigits: 2
        });
    };
    // monthly payment - ежемесячный платеж
    var $731578ad9cd9cebd$var$renderMonthlyPayment = function(elements, watchedState) {
        var resultMonthlyPayment = elements.resultMonthlyPayment;
        var result = watchedState.result;
        if (resultMonthlyPayment) resultMonthlyPayment.innerHTML = result["monthly-payment"].toLocaleString("en-US", {
            minimumFractionDigits: 2
        });
    };
    // total cost - общая ипотека
    var $731578ad9cd9cebd$var$renderTotalCost = function(elements, watchedState) {
        var resultTotalCost = elements.resultTotalCost;
        var result = watchedState.result;
        if (resultTotalCost) resultTotalCost.innerHTML = result["mortgage-total-cost"].toLocaleString("en-US", {
            minimumFractionDigits: 2
        });
    };
    // render donut
    var $731578ad9cd9cebd$var$renderDonutChart = function(elements, watchedState) {
        var donutBox = elements.donutBox;
        var donutData = watchedState.donutData;
        var allDataForChart = donutData.filter(function(item) {
            var data = item.data;
            if (data) return item;
            return 0;
        });
        var chartLabels = allDataForChart.map(function(param) {
            var name = param.name;
            return name;
        });
        var chartData = allDataForChart.map(function(param) {
            var data = param.data;
            return data;
        });
        var chartColors = allDataForChart.map(function(param) {
            var color = param.color;
            return color;
        });
        var donutConfigData = {
            labels: chartLabels,
            datasets: [
                {
                    data: chartData,
                    backgroundColor: chartColors,
                    borderRadius: 5,
                    spacing: 5,
                    hoverOffset: 3
                }
            ]
        };
        var config = {
            type: "doughnut",
            data: donutConfigData,
            options: []
        };
        var chartStatus = $68fbc1daad5cf8b5$export$acaa6426d77a227e.getChart(donutBox);
        if (chartStatus !== undefined) chartStatus.destroy();
        new $68fbc1daad5cf8b5$export$acaa6426d77a227e(donutBox, config);
    };
    var $731578ad9cd9cebd$export$b3890eb0ae9dca99 = function(elements, watchedState) {
        // renderMortgageAmount
        $731578ad9cd9cebd$var$renderMortgageAmount(elements, watchedState);
        // renderTotalCost
        $731578ad9cd9cebd$var$renderTotalCost(elements, watchedState);
        // renderMonthlyPayment
        $731578ad9cd9cebd$var$renderMonthlyPayment(elements, watchedState);
        // renderDonutChart
        $731578ad9cd9cebd$var$renderDonutChart(elements, watchedState);
    };
    var $731578ad9cd9cebd$export$659466fae8e0b94d = function(elements, value) {
        var switchPmiBlock = elements.switchPmiBlock;
        if (value) switchPmiBlock.forEach(function(item) {
            return item.style.display = "none";
        });
        else switchPmiBlock.forEach(function(item) {
            return item.style.display = "block";
        });
    };
    var $731578ad9cd9cebd$export$9c7c917e2ae392f5 = function(elements, value) {
        var switchTaxesBlock = elements.switchTaxesBlock;
        if (value) switchTaxesBlock.forEach(function(item) {
            var itemResult = item;
            itemResult.style.display = "none";
        });
        else switchTaxesBlock.forEach(function(item) {
            var itemResult = item;
            itemResult.style.display = "block";
        });
    };
    var $731578ad9cd9cebd$export$2837078cde969e9f = function(elements, watchedState) {
        var donutLegendItems = elements.donutLegendItems;
        var donutData = watchedState.donutData;
        donutLegendItems.forEach(function(item) {
            donutData.forEach(function(param, index) {
                var name = param.name, color = param.color;
                if (item.getAttribute("data-calc-legend-name") === donutData[index].name) item.style.backgroundColor = donutData[index].color;
            });
        });
    };
    // controller
    // watch exclude changes
    var $e8f0aab56831b4ac$var$updateExclude = function(form, watchedState) {
        var excludesElements = form.querySelectorAll("[data-calc-exclude]");
        var exclude = watchedState.form.exclude;
        /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(excludesElements).forEach(function(excludeItem) {
            var checked = excludeItem.checked;
            var calcExclude = excludeItem.dataset.calcExclude;
            var calcExcludeCollection = calcExclude.split(",");
            calcExcludeCollection.forEach(function(name) {
                exclude[name] = !checked;
            });
        });
    };
    var $e8f0aab56831b4ac$var$updateValues = function(elements, watchedState) {
        var values = watchedState.form.values;
        var form = elements.form;
        var formData = new FormData(form);
        // update values
        /*@__PURE__*/ $parcel$interopDefault($5b6ed2e9038412d1$exports)(formData.entries()).forEach(function(param) {
            var _param = /*@__PURE__*/ $parcel$interopDefault($ffe0db64804a4aa2$exports)(param, 2), key = _param[0], value = _param[1];
            if (key in values) values[key] = value === "" ? 0 : +value;
        });
        // update exclude list
        $e8f0aab56831b4ac$var$updateExclude(form, watchedState);
    };
    var $e8f0aab56831b4ac$var$init = function() {
        // MODEL
        var elements = {
            form: document.forms.calc,
            resultMortgageAmount: document.querySelector('[data-calc-result="amount"]'),
            resultTotalCost: document.querySelector('[data-calc-result="total"]'),
            resultMonthlyPayment: document.querySelector('[data-calc-result="monthly"]'),
            switchPmiBlock: document.querySelectorAll("[data-pmi-rate]"),
            switchTaxesBlock: document.querySelectorAll("[data-property-tax]"),
            // for donut
            donutBox: document.querySelector('[data-calc="donut"]'),
            donutLegendItems: document.querySelectorAll("[data-calc-legend-name]")
        };
        // MODEL
        var state = {
            form: {
                values: {
                    "home-price": null,
                    "down-payment": null,
                    "interest-rate": null,
                    "home-insurance": null,
                    "property-tax": null,
                    "pmi-rate": null,
                    "hoa-dues": null,
                    term: null
                },
                exclude: {
                    "home-insurance": null,
                    "pmi-rate": null,
                    "property-tax": null
                }
            },
            result: {
                "mortgage-amount": null,
                "monthly-payment": null,
                "mortgage-insurance": null,
                "mortgage-total-cost": null
            },
            donutData: [
                {
                    key: "pi",
                    name: "P&I",
                    color: "#0D93FF",
                    data: null
                },
                {
                    key: "insurance",
                    name: "Insurance",
                    color: "#07BECB",
                    data: null
                },
                {
                    key: "taxes",
                    name: "Taxes",
                    color: "#333333",
                    data: null
                },
                {
                    key: "pmi",
                    name: "PMI",
                    color: "#D3E2EE",
                    data: null
                },
                {
                    key: "hoa",
                    name: "HOA",
                    color: "#F2F2F2",
                    data: null
                }, 
            ]
        };
        // MODEL
        var watchedState = $68a8cbaf2c829e6f$export$2e2bcd8739ae039(state, function(path, value) {
            switch(path){
                case "form.exclude.pmi-rate":
                    $731578ad9cd9cebd$export$659466fae8e0b94d(elements, value);
                    break;
                case "form.exclude.property-tax":
                    $731578ad9cd9cebd$export$9c7c917e2ae392f5(elements, value);
                    break;
                default:
                    break;
            }
            $9b425c3cfbd41b4f$export$2e2bcd8739ae039(elements, watchedState);
        });
        // CONTROLLER
        var form = elements.form;
        form.addEventListener("submit", function(e) {
            e.preventDefault();
            $731578ad9cd9cebd$export$b3890eb0ae9dca99(elements, watchedState);
        });
        form.addEventListener("change", function() {
            $e8f0aab56831b4ac$var$updateValues(elements, watchedState);
            $731578ad9cd9cebd$export$b3890eb0ae9dca99(elements, watchedState);
        });
        // FIRST START
        $e8f0aab56831b4ac$var$updateValues(elements, watchedState);
        $731578ad9cd9cebd$export$b3890eb0ae9dca99(elements, watchedState);
        $731578ad9cd9cebd$export$2837078cde969e9f(elements, watchedState);
    };
    $e8f0aab56831b4ac$var$init();
})();


const $df29249fe447c065$var$$7e291c172da4527f$export$f8bb2f9f4607ed91 = ".";
const $df29249fe447c065$var$$7e291c172da4527f$export$9cb8e7b38dc3cece = Symbol("target");
const $df29249fe447c065$var$$7e291c172da4527f$export$881b71df7abed909 = Symbol("unsubscribe");
function $df29249fe447c065$var$$62b9e4e9c78e635e$export$2191e61a810db5fc(value) {
    return value instanceof Date || value instanceof Set || value instanceof Map || value instanceof WeakSet || value instanceof WeakMap || ArrayBuffer.isView(value);
}
function $df29249fe447c065$var$$62b9e4e9c78e635e$export$281bb0ec97352a76(value) {
    return (typeof value === "object" ? value === null : typeof value !== "function") || value instanceof RegExp;
}
var $df29249fe447c065$var$$7bf8ec2f1e22e106$export$2e2bcd8739ae039 = Array.isArray;
function $df29249fe447c065$var$$668222ccaa68481f$export$2e2bcd8739ae039(value) {
    return typeof value === "symbol";
}
const $df29249fe447c065$var$$f91752e229fd69d9$var$path = {
    after: (path1, subPath)=>{
        if ($df29249fe447c065$var$$7bf8ec2f1e22e106$export$2e2bcd8739ae039(path1)) return path1.slice(subPath.length);
        if (subPath === "") return path1;
        return path1.slice(subPath.length + 1);
    },
    concat: (path2, key)=>{
        if ($df29249fe447c065$var$$7bf8ec2f1e22e106$export$2e2bcd8739ae039(path2)) {
            path2 = [
                ...path2
            ];
            if (key) path2.push(key);
            return path2;
        }
        if (key && key.toString !== undefined) {
            if (path2 !== "") path2 += $df29249fe447c065$var$$7e291c172da4527f$export$f8bb2f9f4607ed91;
            if ($df29249fe447c065$var$$668222ccaa68481f$export$2e2bcd8739ae039(key)) return path2 + key.toString();
            return path2 + key;
        }
        return path2;
    },
    initial: (path3)=>{
        if ($df29249fe447c065$var$$7bf8ec2f1e22e106$export$2e2bcd8739ae039(path3)) return path3.slice(0, -1);
        if (path3 === "") return path3;
        const index = path3.lastIndexOf($df29249fe447c065$var$$7e291c172da4527f$export$f8bb2f9f4607ed91);
        if (index === -1) return "";
        return path3.slice(0, index);
    },
    last: (path4)=>{
        if ($df29249fe447c065$var$$7bf8ec2f1e22e106$export$2e2bcd8739ae039(path4)) return path4[path4.length - 1] || "";
        if (path4 === "") return path4;
        const index = path4.lastIndexOf($df29249fe447c065$var$$7e291c172da4527f$export$f8bb2f9f4607ed91);
        if (index === -1) return path4;
        return path4.slice(index + 1);
    },
    walk: (path5, callback)=>{
        if ($df29249fe447c065$var$$7bf8ec2f1e22e106$export$2e2bcd8739ae039(path5)) for (const key of path5)callback(key);
        else if (path5 !== "") {
            let position = 0;
            let index = path5.indexOf($df29249fe447c065$var$$7e291c172da4527f$export$f8bb2f9f4607ed91);
            if (index === -1) callback(path5);
            else while(position < path5.length){
                if (index === -1) index = path5.length;
                callback(path5.slice(position, index));
                position = index + 1;
                index = path5.indexOf($df29249fe447c065$var$$7e291c172da4527f$export$f8bb2f9f4607ed91, position);
            }
        }
    },
    get (object, path6) {
        this.walk(path6, (key)=>{
            if (object) object = object[key];
        });
        return object;
    }
};
var $df29249fe447c065$var$$f91752e229fd69d9$export$2e2bcd8739ae039 = $df29249fe447c065$var$$f91752e229fd69d9$var$path;
function $df29249fe447c065$var$$ec8fe538e41297a5$export$2e2bcd8739ae039(value) {
    return typeof value === "object" && typeof value.next === "function";
}
function $df29249fe447c065$var$$12ea6ec8908c03e4$export$2e2bcd8739ae039(iterator, target, thisArg, applyPath, prepareValue) {
    const originalNext = iterator.next;
    if (target.name === "entries") iterator.next = function() {
        const result = originalNext.call(this);
        if (result.done === false) {
            result.value[0] = prepareValue(result.value[0], target, result.value[0], applyPath);
            result.value[1] = prepareValue(result.value[1], target, result.value[0], applyPath);
        }
        return result;
    };
    else if (target.name === "values") {
        const keyIterator = thisArg[$df29249fe447c065$var$$7e291c172da4527f$export$9cb8e7b38dc3cece].keys();
        iterator.next = function() {
            const result = originalNext.call(this);
            if (result.done === false) result.value = prepareValue(result.value, target, keyIterator.next().value, applyPath);
            return result;
        };
    } else iterator.next = function() {
        const result = originalNext.call(this);
        if (result.done === false) result.value = prepareValue(result.value, target, result.value, applyPath);
        return result;
    };
    return iterator;
}
function $df29249fe447c065$var$$6c9ff15c0535cd26$export$2e2bcd8739ae039(cache, options, property) {
    return cache.isUnsubscribed || options.ignoreSymbols && $df29249fe447c065$var$$668222ccaa68481f$export$2e2bcd8739ae039(property) || options.ignoreUnderscores && property.charAt(0) === "_" || "ignoreKeys" in options && options.ignoreKeys.includes(property);
}
class $df29249fe447c065$var$$fe1fd95010e1effe$export$2e2bcd8739ae039 {
    _getDescriptorCache() {
        if (this._descriptorCache === undefined) this._descriptorCache = new WeakMap();
        return this._descriptorCache;
    }
    _getProperties(target) {
        const descriptorCache = this._getDescriptorCache();
        let properties = descriptorCache.get(target);
        if (properties === undefined) {
            properties = {
            };
            descriptorCache.set(target, properties);
        }
        return properties;
    }
    _getOwnPropertyDescriptor(target, property) {
        if (this.isUnsubscribed) return Reflect.getOwnPropertyDescriptor(target, property);
        const properties = this._getProperties(target);
        let descriptor = properties[property];
        if (descriptor === undefined) {
            descriptor = Reflect.getOwnPropertyDescriptor(target, property);
            properties[property] = descriptor;
        }
        return descriptor;
    }
    getProxy(target, path1, handler, proxyTarget) {
        if (this.isUnsubscribed) return target;
        const reflectTarget = target[proxyTarget];
        const source = reflectTarget || target;
        this._pathCache.set(source, path1);
        let proxy = this._proxyCache.get(source);
        if (proxy === undefined) {
            proxy = reflectTarget === undefined ? new Proxy(target, handler) : target;
            this._proxyCache.set(source, proxy);
        }
        return proxy;
    }
    getPath(target) {
        return this.isUnsubscribed ? undefined : this._pathCache.get(target);
    }
    isDetached(target, object) {
        return !Object.is(target, $df29249fe447c065$var$$f91752e229fd69d9$export$2e2bcd8739ae039.get(object, this.getPath(target)));
    }
    defineProperty(target, property, descriptor) {
        if (!Reflect.defineProperty(target, property, descriptor)) return false;
        if (!this.isUnsubscribed) this._getProperties(target)[property] = descriptor;
        return true;
    }
    setProperty(target, property, value, receiver, previous) {
        if (!this._equals(previous, value) || !(property in target)) {
            const descriptor = this._getOwnPropertyDescriptor(target, property);
            if (descriptor !== undefined && "set" in descriptor) return Reflect.set(target, property, value, receiver);
            return Reflect.set(target, property, value);
        }
        return true;
    }
    deleteProperty(target, property, previous) {
        if (Reflect.deleteProperty(target, property)) {
            if (!this.isUnsubscribed) {
                const properties = this._getDescriptorCache().get(target);
                if (properties) {
                    delete properties[property];
                    this._pathCache.delete(previous);
                }
            }
            return true;
        }
        return false;
    }
    isSameDescriptor(a, target, property) {
        const b = this._getOwnPropertyDescriptor(target, property);
        return a !== undefined && b !== undefined && Object.is(a.value, b.value) && (a.writable || false) === (b.writable || false) && (a.enumerable || false) === (b.enumerable || false) && (a.configurable || false) === (b.configurable || false) && a.get === b.get && a.set === b.set;
    }
    isGetInvariant(target, property) {
        const descriptor = this._getOwnPropertyDescriptor(target, property);
        return descriptor !== undefined && descriptor.configurable !== true && descriptor.writable !== true;
    }
    unsubscribe() {
        this._descriptorCache = null;
        this._pathCache = null;
        this._proxyCache = null;
        this.isUnsubscribed = true;
    }
    constructor(equals){
        this._equals = equals;
        this._proxyCache = new WeakMap();
        this._pathCache = new WeakMap();
        this.isUnsubscribed = false;
    }
}
function $df29249fe447c065$var$$3340bc64d7ec7cdf$export$2e2bcd8739ae039(value) {
    return toString.call(value) === "[object Object]";
}
function $df29249fe447c065$var$$e0921caba6edf45c$export$2e2bcd8739ae039() {
    return true;
}
function $df29249fe447c065$var$$9b3eedb5f9e3cc76$export$2e2bcd8739ae039(clone, value) {
    return clone.length !== value.length || clone.some((item, index)=>value[index] !== item
    );
}
const $df29249fe447c065$var$$bbbce5e33f95c7ed$export$87ab45442debb687 = new Set([
    "hasOwnProperty",
    "isPrototypeOf",
    "propertyIsEnumerable",
    "toLocaleString",
    "toString",
    "valueOf", 
]);
const $df29249fe447c065$var$$9b5ee925cf31606b$var$IMMUTABLE_ARRAY_METHODS = new Set([
    "concat",
    "includes",
    "indexOf",
    "join",
    "keys",
    "lastIndexOf", 
]);
const $df29249fe447c065$var$$9b5ee925cf31606b$export$4e33e1ac2be38fa3 = {
    push: $df29249fe447c065$var$$e0921caba6edf45c$export$2e2bcd8739ae039,
    pop: $df29249fe447c065$var$$e0921caba6edf45c$export$2e2bcd8739ae039,
    shift: $df29249fe447c065$var$$e0921caba6edf45c$export$2e2bcd8739ae039,
    unshift: $df29249fe447c065$var$$e0921caba6edf45c$export$2e2bcd8739ae039,
    copyWithin: $df29249fe447c065$var$$9b3eedb5f9e3cc76$export$2e2bcd8739ae039,
    reverse: $df29249fe447c065$var$$9b3eedb5f9e3cc76$export$2e2bcd8739ae039,
    sort: $df29249fe447c065$var$$9b3eedb5f9e3cc76$export$2e2bcd8739ae039,
    splice: $df29249fe447c065$var$$9b3eedb5f9e3cc76$export$2e2bcd8739ae039,
    flat: $df29249fe447c065$var$$9b3eedb5f9e3cc76$export$2e2bcd8739ae039,
    fill: $df29249fe447c065$var$$9b3eedb5f9e3cc76$export$2e2bcd8739ae039
};
const $df29249fe447c065$var$$9b5ee925cf31606b$export$157c4abf6d17869e = new Set([
    ...$df29249fe447c065$var$$bbbce5e33f95c7ed$export$87ab45442debb687,
    ...$df29249fe447c065$var$$9b5ee925cf31606b$var$IMMUTABLE_ARRAY_METHODS,
    ...Object.keys($df29249fe447c065$var$$9b5ee925cf31606b$export$4e33e1ac2be38fa3), 
]);
function $df29249fe447c065$var$$5d92907737393f03$export$2e2bcd8739ae039(clone, value) {
    if (clone.size !== value.size) return true;
    for (const element of clone){
        if (!value.has(element)) return true;
    }
    return false;
}
const $df29249fe447c065$var$$8172dff6dcfccb32$export$fc33389dd13370bf = [
    "keys",
    "values",
    "entries", 
];
const $df29249fe447c065$var$$8172dff6dcfccb32$export$917446fc33e7cb53 = new Set([
    "has",
    "toString", 
]);
const $df29249fe447c065$var$$8172dff6dcfccb32$export$1b750ad9668ebc59 = {
    add: $df29249fe447c065$var$$5d92907737393f03$export$2e2bcd8739ae039,
    clear: $df29249fe447c065$var$$5d92907737393f03$export$2e2bcd8739ae039,
    delete: $df29249fe447c065$var$$5d92907737393f03$export$2e2bcd8739ae039,
    forEach: $df29249fe447c065$var$$5d92907737393f03$export$2e2bcd8739ae039
};
const $df29249fe447c065$var$$8172dff6dcfccb32$export$31c36d107390313f = new Set([
    ...$df29249fe447c065$var$$8172dff6dcfccb32$export$917446fc33e7cb53,
    ...Object.keys($df29249fe447c065$var$$8172dff6dcfccb32$export$1b750ad9668ebc59),
    ...$df29249fe447c065$var$$8172dff6dcfccb32$export$fc33389dd13370bf, 
]);
function $df29249fe447c065$var$$c0d7177279319035$export$2e2bcd8739ae039(clone, value) {
    if (clone.size !== value.size) return true;
    let bValue;
    for (const [key, aValue] of clone){
        bValue = value.get(key);
        if (bValue !== aValue || bValue === undefined && !value.has(key)) return true;
    }
    return false;
}
const $df29249fe447c065$var$$c11ee12c803bdb6f$var$IMMUTABLE_MAP_METHODS = new Set([
    ...$df29249fe447c065$var$$8172dff6dcfccb32$export$917446fc33e7cb53,
    "get"
]);
const $df29249fe447c065$var$$c11ee12c803bdb6f$export$5e358a2f59cad3d0 = {
    set: $df29249fe447c065$var$$c0d7177279319035$export$2e2bcd8739ae039,
    clear: $df29249fe447c065$var$$c0d7177279319035$export$2e2bcd8739ae039,
    delete: $df29249fe447c065$var$$c0d7177279319035$export$2e2bcd8739ae039,
    forEach: $df29249fe447c065$var$$c0d7177279319035$export$2e2bcd8739ae039
};
const $df29249fe447c065$var$$c11ee12c803bdb6f$export$424149ce245f02b7 = new Set([
    ...$df29249fe447c065$var$$c11ee12c803bdb6f$var$IMMUTABLE_MAP_METHODS,
    ...Object.keys($df29249fe447c065$var$$c11ee12c803bdb6f$export$5e358a2f59cad3d0),
    ...$df29249fe447c065$var$$8172dff6dcfccb32$export$fc33389dd13370bf, 
]);
class $df29249fe447c065$var$$46b2c54d44671067$export$2e2bcd8739ae039 {
    static isHandledMethod(name) {
        return $df29249fe447c065$var$$bbbce5e33f95c7ed$export$87ab45442debb687.has(name);
    }
    _shallowClone(value) {
        let clone = value;
        if ($df29249fe447c065$var$$3340bc64d7ec7cdf$export$2e2bcd8739ae039(value)) clone = {
            ...value
        };
        else if ($df29249fe447c065$var$$7bf8ec2f1e22e106$export$2e2bcd8739ae039(value) || ArrayBuffer.isView(value)) clone = [
            ...value
        ];
        else if (value instanceof Date) clone = new Date(value);
        else if (value instanceof Set) clone = new Set([
            ...value
        ].map((item)=>this._shallowClone(item)
        ));
        else if (value instanceof Map) {
            clone = new Map();
            for (const [key, item] of value.entries())clone.set(key, this._shallowClone(item));
        }
        this._clonedCache.add(clone);
        return clone;
    }
    preferredThisArg(isHandledMethod, name, thisArg, thisProxyTarget) {
        if (isHandledMethod) {
            if ($df29249fe447c065$var$$7bf8ec2f1e22e106$export$2e2bcd8739ae039(thisProxyTarget)) this._onIsChanged = $df29249fe447c065$var$$9b5ee925cf31606b$export$4e33e1ac2be38fa3[name];
            else if (thisProxyTarget instanceof Set) this._onIsChanged = $df29249fe447c065$var$$8172dff6dcfccb32$export$1b750ad9668ebc59[name];
            else if (thisProxyTarget instanceof Map) this._onIsChanged = $df29249fe447c065$var$$c11ee12c803bdb6f$export$5e358a2f59cad3d0[name];
            return thisProxyTarget;
        }
        return thisArg;
    }
    update(fullPath, property, value) {
        const changePath = $df29249fe447c065$var$$f91752e229fd69d9$export$2e2bcd8739ae039.after(fullPath, this._path);
        if (property !== "length") {
            let object = this.clone;
            $df29249fe447c065$var$$f91752e229fd69d9$export$2e2bcd8739ae039.walk(changePath, (key)=>{
                if (object && object[key]) {
                    if (!this._clonedCache.has(object[key])) object[key] = this._shallowClone(object[key]);
                    object = object[key];
                }
            });
            if (this._hasOnValidate) this._changes.push({
                path: changePath,
                property: property,
                previous: value
            });
            if (object && object[property]) object[property] = value;
        }
        this._isChanged = true;
    }
    undo(object) {
        let change;
        for(let index = this._changes.length - 1; index !== -1; index--){
            change = this._changes[index];
            $df29249fe447c065$var$$f91752e229fd69d9$export$2e2bcd8739ae039.get(object, change.path)[change.property] = change.previous;
        }
    }
    isChanged(value) {
        return this._onIsChanged === undefined ? this._isChanged : this._onIsChanged(this.clone, value);
    }
    constructor(value, path1, argumentsList, hasOnValidate){
        this._path = path1;
        this._isChanged = false;
        this._clonedCache = new Set();
        this._hasOnValidate = hasOnValidate;
        this._changes = hasOnValidate ? [] : null;
        this.clone = path1 === undefined ? value : this._shallowClone(value);
    }
}
class $df29249fe447c065$var$$ca4a420d57d9cf09$export$2e2bcd8739ae039 extends $df29249fe447c065$var$$46b2c54d44671067$export$2e2bcd8739ae039 {
    static isHandledMethod(name) {
        return $df29249fe447c065$var$$9b5ee925cf31606b$export$157c4abf6d17869e.has(name);
    }
}
class $df29249fe447c065$var$$f1067eba7503fd66$export$2e2bcd8739ae039 extends $df29249fe447c065$var$$46b2c54d44671067$export$2e2bcd8739ae039 {
    undo(object) {
        object.setTime(this.clone.getTime());
    }
    isChanged(value, equals) {
        return !equals(this.clone.valueOf(), value.valueOf());
    }
}
class $df29249fe447c065$var$$ac20bb1d58a9c336$export$2e2bcd8739ae039 extends $df29249fe447c065$var$$46b2c54d44671067$export$2e2bcd8739ae039 {
    static isHandledMethod(name) {
        return $df29249fe447c065$var$$8172dff6dcfccb32$export$31c36d107390313f.has(name);
    }
    undo(object) {
        for (const value of this.clone)object.add(value);
        for (const value1 of object)if (!this.clone.has(value1)) object.delete(value1);
    }
}
class $df29249fe447c065$var$$7371f98a8d67d7e9$export$2e2bcd8739ae039 extends $df29249fe447c065$var$$46b2c54d44671067$export$2e2bcd8739ae039 {
    static isHandledMethod(name) {
        return $df29249fe447c065$var$$c11ee12c803bdb6f$export$424149ce245f02b7.has(name);
    }
    undo(object) {
        for (const [key, value] of this.clone.entries())object.set(key, value);
        for (const key1 of object.keys())if (!this.clone.has(key1)) object.delete(key1);
    }
}
class $df29249fe447c065$var$$0894d65c1c99473e$export$2e2bcd8739ae039 extends $df29249fe447c065$var$$46b2c54d44671067$export$2e2bcd8739ae039 {
    isChanged(value) {
        return this._weakValue !== value.has(this._arg1);
    }
    undo(object) {
        if (this._weakValue && !object.has(this._arg1)) object.add(this._arg1);
        else object.delete(this._arg1);
    }
    constructor(value, path, argumentsList, hasOnValidate){
        super(undefined, path, argumentsList, hasOnValidate);
        this._arg1 = argumentsList[0];
        this._weakValue = value.has(this._arg1);
    }
}
class $df29249fe447c065$var$$35ef612d96e3f5f5$export$2e2bcd8739ae039 extends $df29249fe447c065$var$$46b2c54d44671067$export$2e2bcd8739ae039 {
    isChanged(value) {
        return this._weakValue !== value.get(this._weakKey);
    }
    undo(object) {
        const weakHas = object.has(this._weakKey);
        if (this._weakHas && !weakHas) object.set(this._weakKey, this._weakValue);
        else if (!this._weakHas && weakHas) object.delete(this._weakKey);
        else if (this._weakValue !== object.get(this._weakKey)) object.set(this._weakKey, this._weakValue);
    }
    constructor(value, path, argumentsList, hasOnValidate){
        super(undefined, path, argumentsList, hasOnValidate);
        this._weakKey = argumentsList[0];
        this._weakHas = value.has(this._weakKey);
        this._weakValue = value.get(this._weakKey);
    }
}
class $df29249fe447c065$var$$3608989449e8a0eb$export$2e2bcd8739ae039 {
    static isHandledType(value) {
        return $df29249fe447c065$var$$3340bc64d7ec7cdf$export$2e2bcd8739ae039(value) || $df29249fe447c065$var$$7bf8ec2f1e22e106$export$2e2bcd8739ae039(value) || $df29249fe447c065$var$$62b9e4e9c78e635e$export$2191e61a810db5fc(value);
    }
    static isHandledMethod(target, name) {
        if ($df29249fe447c065$var$$3340bc64d7ec7cdf$export$2e2bcd8739ae039(target)) return $df29249fe447c065$var$$46b2c54d44671067$export$2e2bcd8739ae039.isHandledMethod(name);
        if ($df29249fe447c065$var$$7bf8ec2f1e22e106$export$2e2bcd8739ae039(target)) return $df29249fe447c065$var$$ca4a420d57d9cf09$export$2e2bcd8739ae039.isHandledMethod(name);
        if (target instanceof Set) return $df29249fe447c065$var$$ac20bb1d58a9c336$export$2e2bcd8739ae039.isHandledMethod(name);
        if (target instanceof Map) return $df29249fe447c065$var$$7371f98a8d67d7e9$export$2e2bcd8739ae039.isHandledMethod(name);
        return $df29249fe447c065$var$$62b9e4e9c78e635e$export$2191e61a810db5fc(target);
    }
    get isCloning() {
        return this._stack.length > 0;
    }
    start(value, path, argumentsList) {
        let CloneClass = $df29249fe447c065$var$$46b2c54d44671067$export$2e2bcd8739ae039;
        if ($df29249fe447c065$var$$7bf8ec2f1e22e106$export$2e2bcd8739ae039(value)) CloneClass = $df29249fe447c065$var$$ca4a420d57d9cf09$export$2e2bcd8739ae039;
        else if (value instanceof Date) CloneClass = $df29249fe447c065$var$$f1067eba7503fd66$export$2e2bcd8739ae039;
        else if (value instanceof Set) CloneClass = $df29249fe447c065$var$$ac20bb1d58a9c336$export$2e2bcd8739ae039;
        else if (value instanceof Map) CloneClass = $df29249fe447c065$var$$7371f98a8d67d7e9$export$2e2bcd8739ae039;
        else if (value instanceof WeakSet) CloneClass = $df29249fe447c065$var$$0894d65c1c99473e$export$2e2bcd8739ae039;
        else if (value instanceof WeakMap) CloneClass = $df29249fe447c065$var$$35ef612d96e3f5f5$export$2e2bcd8739ae039;
        this._stack.push(new CloneClass(value, path, argumentsList, this._hasOnValidate));
    }
    update(fullPath, property, value) {
        this._stack[this._stack.length - 1].update(fullPath, property, value);
    }
    preferredThisArg(target, thisArg, thisProxyTarget) {
        const { name: name  } = target;
        const isHandledMethod = $df29249fe447c065$var$$3608989449e8a0eb$export$2e2bcd8739ae039.isHandledMethod(thisProxyTarget, name);
        return this._stack[this._stack.length - 1].preferredThisArg(isHandledMethod, name, thisArg, thisProxyTarget);
    }
    isChanged(isMutable, value, equals) {
        return this._stack[this._stack.length - 1].isChanged(isMutable, value, equals);
    }
    undo(object) {
        if (this._previousClone !== undefined) this._previousClone.undo(object);
    }
    stop() {
        this._previousClone = this._stack.pop();
        return this._previousClone.clone;
    }
    constructor(hasOnValidate){
        this._stack = [];
        this._hasOnValidate = hasOnValidate;
    }
}
const $df29249fe447c065$var$$69e9f2982bc0ecad$var$defaultOptions = {
    equals: Object.is,
    isShallow: false,
    pathAsArray: false,
    ignoreSymbols: false,
    ignoreUnderscores: false,
    ignoreDetached: false,
    details: false
};
const $df29249fe447c065$var$$69e9f2982bc0ecad$var$onChange = (object, onChange1, options = {
})=>{
    options = {
        ...$df29249fe447c065$var$$69e9f2982bc0ecad$var$defaultOptions,
        ...options
    };
    const proxyTarget = Symbol("ProxyTarget");
    const { equals: equals , isShallow: isShallow , ignoreDetached: ignoreDetached , details: details  } = options;
    const cache = new $df29249fe447c065$var$$fe1fd95010e1effe$export$2e2bcd8739ae039(equals);
    const hasOnValidate = typeof options.onValidate === "function";
    const smartClone = new $df29249fe447c065$var$$3608989449e8a0eb$export$2e2bcd8739ae039(hasOnValidate);
    // eslint-disable-next-line max-params
    const validate = (target, property, value, previous, applyData)=>!hasOnValidate || smartClone.isCloning || options.onValidate($df29249fe447c065$var$$f91752e229fd69d9$export$2e2bcd8739ae039.concat(cache.getPath(target), property), value, previous, applyData) === true
    ;
    const handleChangeOnTarget = (target, property, value, previous)=>{
        if (!$df29249fe447c065$var$$6c9ff15c0535cd26$export$2e2bcd8739ae039(cache, options, property) && !(ignoreDetached && cache.isDetached(target, object))) handleChange(cache.getPath(target), property, value, previous);
    };
    // eslint-disable-next-line max-params
    const handleChange = (changePath, property, value, previous, applyData)=>{
        if (smartClone.isCloning) smartClone.update(changePath, property, previous);
        else onChange1($df29249fe447c065$var$$f91752e229fd69d9$export$2e2bcd8739ae039.concat(changePath, property), value, previous, applyData);
    };
    const getProxyTarget = (value)=>value ? value[proxyTarget] || value : value
    ;
    const prepareValue = (value, target, property, basePath)=>{
        if ($df29249fe447c065$var$$62b9e4e9c78e635e$export$281bb0ec97352a76(value) || property === "constructor" || isShallow && !$df29249fe447c065$var$$3608989449e8a0eb$export$2e2bcd8739ae039.isHandledMethod(target, property) || $df29249fe447c065$var$$6c9ff15c0535cd26$export$2e2bcd8739ae039(cache, options, property) || cache.isGetInvariant(target, property) || ignoreDetached && cache.isDetached(target, object)) return value;
        if (basePath === undefined) basePath = cache.getPath(target);
        return cache.getProxy(value, $df29249fe447c065$var$$f91752e229fd69d9$export$2e2bcd8739ae039.concat(basePath, property), handler, proxyTarget);
    };
    const handler = {
        get (target, property, receiver) {
            if ($df29249fe447c065$var$$668222ccaa68481f$export$2e2bcd8739ae039(property)) {
                if (property === proxyTarget || property === $df29249fe447c065$var$$7e291c172da4527f$export$9cb8e7b38dc3cece) return target;
                if (property === $df29249fe447c065$var$$7e291c172da4527f$export$881b71df7abed909 && !cache.isUnsubscribed && cache.getPath(target).length === 0) {
                    cache.unsubscribe();
                    return target;
                }
            }
            const value = $df29249fe447c065$var$$62b9e4e9c78e635e$export$2191e61a810db5fc(target) ? Reflect.get(target, property) : Reflect.get(target, property, receiver);
            return prepareValue(value, target, property);
        },
        set (target, property, value, receiver) {
            value = getProxyTarget(value);
            const reflectTarget = target[proxyTarget] || target;
            const previous = reflectTarget[property];
            if (equals(previous, value) && property in target) return true;
            const isValid = validate(target, property, value, previous);
            if (isValid && cache.setProperty(reflectTarget, property, value, receiver, previous)) {
                handleChangeOnTarget(target, property, target[property], previous);
                return true;
            }
            return !isValid;
        },
        defineProperty (target, property, descriptor) {
            if (!cache.isSameDescriptor(descriptor, target, property)) {
                const previous = target[property];
                if (validate(target, property, descriptor.value, previous) && cache.defineProperty(target, property, descriptor, previous)) handleChangeOnTarget(target, property, descriptor.value, previous);
            }
            return true;
        },
        deleteProperty (target, property) {
            if (!Reflect.has(target, property)) return true;
            const previous = Reflect.get(target, property);
            const isValid = validate(target, property, undefined, previous);
            if (isValid && cache.deleteProperty(target, property, previous)) {
                handleChangeOnTarget(target, property, undefined, previous);
                return true;
            }
            return !isValid;
        },
        apply (target, thisArg, argumentsList) {
            const thisProxyTarget = thisArg[proxyTarget] || thisArg;
            if (cache.isUnsubscribed) return Reflect.apply(target, thisProxyTarget, argumentsList);
            if ((details === false || details !== true && !details.includes(target.name)) && $df29249fe447c065$var$$3608989449e8a0eb$export$2e2bcd8739ae039.isHandledType(thisProxyTarget)) {
                let applyPath = $df29249fe447c065$var$$f91752e229fd69d9$export$2e2bcd8739ae039.initial(cache.getPath(target));
                const isHandledMethod = $df29249fe447c065$var$$3608989449e8a0eb$export$2e2bcd8739ae039.isHandledMethod(thisProxyTarget, target.name);
                smartClone.start(thisProxyTarget, applyPath, argumentsList);
                let result = Reflect.apply(target, smartClone.preferredThisArg(target, thisArg, thisProxyTarget), isHandledMethod ? argumentsList.map((argument)=>getProxyTarget(argument)
                ) : argumentsList);
                const isChanged = smartClone.isChanged(thisProxyTarget, equals);
                const previous = smartClone.stop();
                if ($df29249fe447c065$var$$3608989449e8a0eb$export$2e2bcd8739ae039.isHandledType(result) && isHandledMethod) {
                    if (thisArg instanceof Map && target.name === "get") applyPath = $df29249fe447c065$var$$f91752e229fd69d9$export$2e2bcd8739ae039.concat(applyPath, argumentsList[0]);
                    result = cache.getProxy(result, applyPath, handler);
                }
                if (isChanged) {
                    const applyData = {
                        name: target.name,
                        args: argumentsList,
                        result: result
                    };
                    const changePath = smartClone.isCloning ? $df29249fe447c065$var$$f91752e229fd69d9$export$2e2bcd8739ae039.initial(applyPath) : applyPath;
                    const property = smartClone.isCloning ? $df29249fe447c065$var$$f91752e229fd69d9$export$2e2bcd8739ae039.last(applyPath) : "";
                    if (validate($df29249fe447c065$var$$f91752e229fd69d9$export$2e2bcd8739ae039.get(object, changePath), property, thisProxyTarget, previous, applyData)) handleChange(changePath, property, thisProxyTarget, previous, applyData);
                    else smartClone.undo(thisProxyTarget);
                }
                if ((thisArg instanceof Map || thisArg instanceof Set) && $df29249fe447c065$var$$ec8fe538e41297a5$export$2e2bcd8739ae039(result)) return $df29249fe447c065$var$$12ea6ec8908c03e4$export$2e2bcd8739ae039(result, target, thisArg, applyPath, prepareValue);
                return result;
            }
            return Reflect.apply(target, thisArg, argumentsList);
        }
    };
    const proxy = cache.getProxy(object, options.pathAsArray ? [] : "", handler);
    onChange1 = onChange1.bind(proxy);
    if (hasOnValidate) options.onValidate = options.onValidate.bind(proxy);
    return proxy;
};
$df29249fe447c065$var$$69e9f2982bc0ecad$var$onChange.target = (proxy)=>proxy && proxy[$df29249fe447c065$var$$7e291c172da4527f$export$9cb8e7b38dc3cece] || proxy
;
$df29249fe447c065$var$$69e9f2982bc0ecad$var$onChange.unsubscribe = (proxy)=>proxy[$df29249fe447c065$var$$7e291c172da4527f$export$881b71df7abed909] || proxy
;
var $df29249fe447c065$var$$69e9f2982bc0ecad$export$2e2bcd8739ae039 = $df29249fe447c065$var$$69e9f2982bc0ecad$var$onChange;
// Set format for results
const $df29249fe447c065$var$$d51973068a97db52$var$setFormatNumber = (dataFormat)=>+Math.round(dataFormat)
;
// PMI rate -- (PMI-Ипотечное страхование)
const $df29249fe447c065$var$$d51973068a97db52$var$getPmiResult = (excludeValue, mortgageAmount, pmiRate)=>{
    if (!excludeValue) {
        const result = mortgageAmount * pmiRate / 12;
        return $df29249fe447c065$var$$d51973068a97db52$var$setFormatNumber(result);
    }
    return 0;
};
// Property tax function
const $df29249fe447c065$var$$d51973068a97db52$var$propertyTaxCalc = (excludeValue, propertyTax)=>{
    if (!excludeValue) {
        const result = propertyTax / 12;
        return $df29249fe447c065$var$$d51973068a97db52$var$setFormatNumber(result);
    }
    return 0;
};
// Home insurance function
const $df29249fe447c065$var$$d51973068a97db52$var$homeInsuranceCalc = (excludeValue, homeInsurance)=>{
    if (!excludeValue) {
        const result = homeInsurance / 12;
        return $df29249fe447c065$var$$d51973068a97db52$var$setFormatNumber(result);
    }
    return 0;
};
// Monthly function
const $df29249fe447c065$var$$d51973068a97db52$var$monthlyPaymentCalc = (mortgageAmount, interestRateResult, paymentsMonths, pmiResult, hoaAmount, propertyTaxResult, homeInsuranceResult)=>{
    if (interestRateResult !== 0) {
        const result = mortgageAmount * interestRateResult * (1 + interestRateResult) ** paymentsMonths / ((1 + interestRateResult) ** paymentsMonths - 1) + pmiResult + hoaAmount + propertyTaxResult + homeInsuranceResult;
        return $df29249fe447c065$var$$d51973068a97db52$var$setFormatNumber(result);
    }
    return 0;
};
// Monthly PI function
const $df29249fe447c065$var$$d51973068a97db52$var$monthlyPICalc = (mortgageAmount, interestRateResult, paymentsMonths)=>{
    const result = mortgageAmount * interestRateResult * (1 + interestRateResult) ** paymentsMonths / ((1 + interestRateResult) ** paymentsMonths - 1);
    return $df29249fe447c065$var$$d51973068a97db52$var$setFormatNumber(result);
};
// Total cost function
const $df29249fe447c065$var$$d51973068a97db52$var$totalCostAmountCalc = (monthlyPaymentResult, paymentsMonths)=>{
    const result = monthlyPaymentResult * paymentsMonths;
    return $df29249fe447c065$var$$d51973068a97db52$var$setFormatNumber(result);
};
const $df29249fe447c065$var$$d51973068a97db52$var$calc = (elements, watchedState)=>{
    const { form: form , result: result , donutData: donutData  } = watchedState;
    const { values: values , exclude: exclude  } = form;
    const homePrice = values["home-price"];
    const downPayment = values["down-payment"];
    const interestRate = values["interest-rate"];
    const homeInsurance = values["home-insurance"];
    const propertyTax = values["property-tax"];
    const pmiRate = values["pmi-rate"];
    const hoaAmount = values["hoa-dues"];
    const { term: term  } = values;
    const monthInYear = 12;
    const percentBase = 100;
    const mortgageAmount = $df29249fe447c065$var$$d51973068a97db52$var$setFormatNumber(homePrice - downPayment); // основной кредит, основная сумма
    const paymentsMonths = term * monthInYear; // количество месяцев
    const interestRateResult = interestRate / percentBase / monthInYear; // процентная ставка по еж.платежу
    const pmiResult = $df29249fe447c065$var$$d51973068a97db52$var$getPmiResult(exclude["pmi-rate"], mortgageAmount, pmiRate);
    const homeInsuranceResult = $df29249fe447c065$var$$d51973068a97db52$var$homeInsuranceCalc(exclude["property-tax"], homeInsurance);
    const propertyTaxResult = $df29249fe447c065$var$$d51973068a97db52$var$propertyTaxCalc(exclude["property-tax"], propertyTax);
    const monthlyPaymentResult = $df29249fe447c065$var$$d51973068a97db52$var$monthlyPaymentCalc(mortgageAmount, interestRateResult, paymentsMonths, pmiResult, hoaAmount, propertyTaxResult, homeInsuranceResult);
    const monthlyPIResult = $df29249fe447c065$var$$d51973068a97db52$var$monthlyPICalc(mortgageAmount, interestRateResult, paymentsMonths);
    const totalCostAmountResult = $df29249fe447c065$var$$d51973068a97db52$var$totalCostAmountCalc(monthlyPaymentResult, paymentsMonths);
    // * RESULTS
    // calcMortgageAmount - сумма ипотеки
    result["mortgage-amount"] = mortgageAmount;
    // calcMonthlyPayment - ежемесячный платеж
    result["monthly-payment"] = monthlyPaymentResult;
    // calcTotalCost - общая сумма выплат
    result["mortgage-insurance"] = pmiResult;
    // Total Cost Of Mortgage
    result["mortgage-total-cost"] = totalCostAmountResult;
    // donut data list
    donutData.forEach(({ key: key  }, index)=>{
        switch(key){
            case "pi":
                donutData[index].data = monthlyPIResult;
                break;
            case "insurance":
                donutData[index].data = homeInsuranceResult;
                break;
            case "taxes":
                donutData[index].data = propertyTaxResult;
                break;
            case "pmi":
                donutData[index].data = pmiResult;
                break;
            case "hoa":
                donutData[index].data = hoaAmount;
                break;
            default:
                break;
        }
    });
};
var $df29249fe447c065$var$$d51973068a97db52$export$2e2bcd8739ae039 = $df29249fe447c065$var$$d51973068a97db52$var$calc;
/*!
 * Chart.js v3.8.0
 * https://www.chartjs.org
 * (c) 2022 Chart.js Contributors
 * Released under the MIT License
 */ function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9d0e2d13d04f7070(pixelSize, fontStyle, fontFamily) {
    return fontStyle + " " + pixelSize + "px " + fontFamily;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$43caf9889c228507 = function() {
    if (typeof window === "undefined") return function(callback1) {
        return callback1();
    };
    return window.requestAnimationFrame;
}();
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$b4171a6734a65d42(fn, thisArg, updateFn) {
    const updateArgs = updateFn || ((args)=>Array.prototype.slice.call(args)
    );
    let ticking = false;
    let args1 = [];
    return function(...rest) {
        args1 = updateArgs(rest);
        if (!ticking) {
            ticking = true;
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$43caf9889c228507.call(window, ()=>{
                ticking = false;
                fn.apply(thisArg, args1);
            });
        }
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2219238a014317b0(fn, delay) {
    let timeout;
    return function(...args) {
        if (delay) {
            clearTimeout(timeout);
            timeout = setTimeout(fn, delay, args);
        } else fn.apply(this, args);
        return delay;
    };
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$34aec0b863436764 = (align)=>align === "start" ? "left" : align === "end" ? "right" : "center"
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea = (align, start, end)=>align === "start" ? start : align === "end" ? end : (start + end) / 2
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$91c6e00c14e7e6fd = (align, left, right, rtl)=>{
    const check = rtl ? "left" : "right";
    return align === check ? right : align === "center" ? (left + right) / 2 : left;
};
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$890c4ad488842ce7() {
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$555508cbc6add439 = function() {
    let id = 0;
    return function() {
        return id++;
    };
}();
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(value) {
    return value === null || typeof value === "undefined";
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(value) {
    if (Array.isArray && Array.isArray(value)) return true;
    const type = Object.prototype.toString.call(value);
    if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") return true;
    return false;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(value) {
    return value !== null && Object.prototype.toString.call(value) === "[object Object]";
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8 = (value)=>(typeof value === "number" || value instanceof Number) && isFinite(+value)
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c4ce752e73470fba(value, defaultValue) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(value) ? value : defaultValue;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(value, defaultValue) {
    return typeof value === "undefined" ? defaultValue : value;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$953cecd6e717a553 = (value, dimension)=>typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 : value / dimension
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7ccc53e8f1e7dfc5 = (value, dimension)=>typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(fn, args, thisArg) {
    if (fn && typeof fn.call === "function") return fn.apply(thisArg, args);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(loopable, fn, thisArg, reverse) {
    let i, len, keys;
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(loopable)) {
        len = loopable.length;
        if (reverse) for(i = len - 1; i >= 0; i--)fn.call(thisArg, loopable[i], i);
        else for(i = 0; i < len; i++)fn.call(thisArg, loopable[i], i);
    } else if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(loopable)) {
        keys = Object.keys(loopable);
        len = keys.length;
        for(i = 0; i < len; i++)fn.call(thisArg, loopable[keys[i]], keys[i]);
    }
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ee7c8ad385a60b7b(a0, a1) {
    let i, ilen, v0, v1;
    if (!a0 || !a1 || a0.length !== a1.length) return false;
    for(i = 0, ilen = a0.length; i < ilen; ++i){
        v0 = a0[i];
        v1 = a1[i];
        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) return false;
    }
    return true;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c03999cb2f36933f(source) {
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(source)) return source.map($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c03999cb2f36933f);
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(source)) {
        const target = Object.create(null);
        const keys = Object.keys(source);
        const klen = keys.length;
        let k = 0;
        for(; k < klen; ++k)target[keys[k]] = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c03999cb2f36933f(source[keys[k]]);
        return target;
    }
    return source;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$isValidKey(key) {
    return [
        "__proto__",
        "prototype",
        "constructor"
    ].indexOf(key) === -1;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2ed0fc6709e59212(key, target, source, options) {
    if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$isValidKey(key)) return;
    const tval = target[key];
    const sval = source[key];
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(tval) && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(sval)) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$6559d589eb85fbb6(tval, sval, options);
    else target[key] = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c03999cb2f36933f(sval);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$6559d589eb85fbb6(target, source, options) {
    const sources = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(source) ? source : [
        source
    ];
    const ilen = sources.length;
    if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(target)) return target;
    options = options || {
    };
    const merger = options.merger || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2ed0fc6709e59212;
    for(let i = 0; i < ilen; ++i){
        source = sources[i];
        if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(source)) continue;
        const keys = Object.keys(source);
        for(let k = 0, klen = keys.length; k < klen; ++k)merger(keys[k], target, source, options);
    }
    return target;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7910e0436ed8d1de(target, source) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$6559d589eb85fbb6(target, source, {
        merger: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f96d196f7728bb5
    });
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f96d196f7728bb5(key, target, source) {
    if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$isValidKey(key)) return;
    const tval = target[key];
    const sval = source[key];
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(tval) && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(sval)) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7910e0436ed8d1de(tval, sval);
    else if (!Object.prototype.hasOwnProperty.call(target, key)) target[key] = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c03999cb2f36933f(sval);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$738ab4df8bf92ae9(scope, value, previous, current) {
    if (value !== undefined) console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$emptyString = "";
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$dot = ".";
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$indexOfDotOrLength(key, start) {
    const idx = key.indexOf($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$dot, start);
    return idx === -1 ? key.length : idx;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2d1720544b23b823(obj, key) {
    if (key === $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$emptyString) return obj;
    let pos = 0;
    let idx = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$indexOfDotOrLength(key, pos);
    while(obj && idx > pos){
        obj = obj[key.slice(pos, idx)];
        pos = idx + 1;
        idx = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$indexOfDotOrLength(key, pos);
    }
    return obj;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efca4cbe5dd06740(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$35e795649ee09318 = (value)=>typeof value !== "undefined"
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2e2af4578d910ddf = (value)=>typeof value === "function"
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c9170ad7d4cd7e57 = (a, b)=>{
    if (a.size !== b.size) return false;
    for (const item of a){
        if (!b.has(item)) return false;
    }
    return true;
};
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$995eb9fca571757(e) {
    return e.type === "mouseup" || e.type === "click" || e.type === "contextmenu";
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d = Math.PI;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7 = 2 * $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$e171bab687b50e0 = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7 + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$527e9aa3390079e9 = Number.POSITIVE_INFINITY;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a17c37559e1db147 = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d / 180;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d / 2;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$fef3dfd9bad05307 = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d / 4;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8c78c7c36408ea29 = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d * 2 / 3;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a1a48c8f6ef640e = Math.log10;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2408f22a0fab9ae5 = Math.sign;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$cf2f7c5792f80b46(range) {
    const roundedRange = Math.round(range);
    range = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a33b77bbdbb8366c(range, roundedRange, range / 1000) ? roundedRange : range;
    const niceRange = Math.pow(10, Math.floor($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a1a48c8f6ef640e(range)));
    const fraction = range / niceRange;
    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
    return niceFraction * niceRange;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a07804094c3ecf2d(value) {
    const result = [];
    const sqrt = Math.sqrt(value);
    let i;
    for(i = 1; i < sqrt; i++)if (value % i === 0) {
        result.push(i);
        result.push(value / i);
    }
    if (sqrt === (sqrt | 0)) result.push(sqrt);
    result.sort((a, b)=>a - b
    ).pop();
    return result;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9e5f44173e64f162(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a33b77bbdbb8366c(x, y, epsilon) {
    return Math.abs(x - y) < epsilon;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$53a70dd1ebbae346(x, epsilon) {
    const rounded = Math.round(x);
    return rounded - epsilon <= x && rounded + epsilon >= x;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$158acd800e1ef08b(array, target, property) {
    let i, ilen, value;
    for(i = 0, ilen = array.length; i < ilen; i++){
        value = array[i][property];
        if (!isNaN(value)) {
            target.min = Math.min(target.min, value);
            target.max = Math.max(target.max, value);
        }
    }
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$625550452a3fa3ec(degrees) {
    return degrees * ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d / 180);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$25ce5a424b770e84(radians) {
    return radians * (180 / $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$b9a6b53f9be3734(x) {
    if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(x)) return;
    let e = 1;
    let p = 0;
    while(Math.round(x * e) / e !== x){
        e *= 10;
        p++;
    }
    return p;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$e7094788287c5e9b(centrePoint, anglePoint) {
    const distanceFromXCenter = anglePoint.x - centrePoint.x;
    const distanceFromYCenter = anglePoint.y - centrePoint.y;
    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
    if (angle < -0.5 * $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d) angle += $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7;
    return {
        angle: angle,
        distance: radialDistanceFromCenter
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$24baa2b76016ce0e(pt1, pt2) {
    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d29e374196577086(a, b) {
    return (a - b + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$e171bab687b50e0) % $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7 - $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce(a) {
    return (a % $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7 + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7) % $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ffb5f4729a158638(angle, start, end, sameAngleIsFullCircle) {
    const a = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce(angle);
    const s = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce(start);
    const e = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce(end);
    const angleToStart = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce(s - a);
    const angleToEnd = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce(e - a);
    const startToAngle = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce(a - s);
    const endToAngle = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce(a - e);
    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$e7c866399fa523f5(value) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(value, -32768, 32767);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f38c853ae54ed474(value, start, end, epsilon = 0.000001) {
    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$atEdge = (t)=>t === 0 || t === 1
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7 / p))
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7 / p) + 1
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f1e1789686576879 = {
    linear: (t)=>t
    ,
    easeInQuad: (t)=>t * t
    ,
    easeOutQuad: (t)=>-t * (t - 2)
    ,
    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1)
    ,
    easeInCubic: (t)=>t * t * t
    ,
    easeOutCubic: (t)=>(t -= 1) * t * t + 1
    ,
    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2)
    ,
    easeInQuart: (t)=>t * t * t * t
    ,
    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1)
    ,
    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2)
    ,
    easeInQuint: (t)=>t * t * t * t * t
    ,
    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1
    ,
    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2)
    ,
    easeInSine: (t)=>-Math.cos(t * $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd) + 1
    ,
    easeOutSine: (t)=>Math.sin(t * $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd)
    ,
    easeInOutSine: (t)=>-0.5 * (Math.cos($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d * t) - 1)
    ,
    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1))
    ,
    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1
    ,
    easeInOutExpo: (t)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2)
    ,
    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1)
    ,
    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t)
    ,
    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1)
    ,
    easeInElastic: (t)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$atEdge(t) ? t : $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$elasticIn(t, 0.075, 0.3)
    ,
    easeOutElastic: (t)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$atEdge(t) ? t : $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$elasticOut(t, 0.075, 0.3)
    ,
    easeInOutElastic (t) {
        const s = 0.1125;
        const p = 0.45;
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$atEdge(t) ? t : t < 0.5 ? 0.5 * $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$elasticIn(t * 2, s, p) : 0.5 + 0.5 * $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$elasticOut(t * 2 - 1, s, p);
    },
    easeInBack (t) {
        const s = 1.70158;
        return t * t * ((s + 1) * t - s);
    },
    easeOutBack (t) {
        const s = 1.70158;
        return (t -= 1) * t * ((s + 1) * t + s) + 1;
    },
    easeInOutBack (t) {
        let s = 1.70158;
        if ((t /= 0.5) < 1) return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
    },
    easeInBounce: (t)=>1 - $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f1e1789686576879.easeOutBounce(1 - t)
    ,
    easeOutBounce (t) {
        const m = 7.5625;
        const d = 2.75;
        if (t < 1 / d) return m * t * t;
        if (t < 2 / d) return m * (t -= 1.5 / d) * t + 0.75;
        if (t < 2.5 / d) return m * (t -= 2.25 / d) * t + 0.9375;
        return m * (t -= 2.625 / d) * t + 0.984375;
    },
    easeInOutBounce: (t)=>t < 0.5 ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f1e1789686576879.easeInBounce(t * 2) * 0.5 : $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f1e1789686576879.easeOutBounce(t * 2 - 1) * 0.5 + 0.5
};
/*!
 * @kurkle/color v0.2.1
 * https://github.com/kurkle/color#readme
 * (c) 2022 Jukka Kurkela
 * Released under the MIT License
 */ function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$round(v) {
    return v + 0.5 | 0;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$lim = (v, l, h)=>Math.max(Math.min(v, h), l)
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$p2b(v) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$lim($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$round(v * 2.55), 0, 255);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$n2b(v) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$lim($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$round(v * 255), 0, 255);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$b2n(v) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$lim($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$round(v / 2.55) / 100, 0, 1);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$n2p(v) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$lim($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$round(v * 100), 0, 100);
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map$1 = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15,
    a: 10,
    b: 11,
    c: 12,
    d: 13,
    e: 14,
    f: 15
};
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hex = [
    ..."0123456789ABCDEF"
];
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$h1 = (b)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hex[b & 15]
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$h2 = (b)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hex[(b & 240) >> 4] + $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hex[b & 15]
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$eq = (b)=>(b & 240) >> 4 === (b & 15)
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$isShort = (v)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$eq(v.r) && $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$eq(v.g) && $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$eq(v.b) && $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$eq(v.a)
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hexParse(str) {
    var len = str.length;
    var ret;
    if (str[0] === "#") {
        if (len === 4 || len === 5) ret = {
            r: 255 & $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map$1[str[1]] * 17,
            g: 255 & $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map$1[str[2]] * 17,
            b: 255 & $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map$1[str[3]] * 17,
            a: len === 5 ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map$1[str[4]] * 17 : 255
        };
        else if (len === 7 || len === 9) ret = {
            r: $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map$1[str[1]] << 4 | $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map$1[str[2]],
            g: $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map$1[str[3]] << 4 | $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map$1[str[4]],
            b: $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map$1[str[5]] << 4 | $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map$1[str[6]],
            a: len === 9 ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map$1[str[7]] << 4 | $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map$1[str[8]] : 255
        };
    }
    return ret;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$alpha = (a, f)=>a < 255 ? f(a) : ""
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hexString(v) {
    var f = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$isShort(v) ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$h1 : $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$h2;
    return v ? "#" + f(v.r) + f(v.g) + f(v.b) + $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$alpha(v.a, f) : undefined;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hsl2rgbn(h, s, l) {
    const a = s * Math.min(l, 1 - l);
    const f = (n, k = (n + h / 30) % 12)=>l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1)
    ;
    return [
        f(0),
        f(8),
        f(4)
    ];
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hsv2rgbn(h, s, v) {
    const f = (n, k = (n + h / 60) % 6)=>v - v * s * Math.max(Math.min(k, 4 - k, 1), 0)
    ;
    return [
        f(5),
        f(3),
        f(1)
    ];
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hwb2rgbn(h, w, b) {
    const rgb = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hsl2rgbn(h, 1, 0.5);
    let i;
    if (w + b > 1) {
        i = 1 / (w + b);
        w *= i;
        b *= i;
    }
    for(i = 0; i < 3; i++){
        rgb[i] *= 1 - w - b;
        rgb[i] += w;
    }
    return rgb;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hueValue(r, g, b, d, max) {
    if (r === max) return (g - b) / d + (g < b ? 6 : 0);
    if (g === max) return (b - r) / d + 2;
    return (r - g) / d + 4;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$rgb2hsl(v) {
    const range = 255;
    const r = v.r / range;
    const g = v.g / range;
    const b = v.b / range;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    const l = (max + min) / 2;
    let h, s, d;
    if (max !== min) {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hueValue(r, g, b, d, max);
        h = h * 60 + 0.5;
    }
    return [
        h | 0,
        s || 0,
        l
    ];
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$calln(f, a, b, c) {
    return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$n2b);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hsl2rgb(h, s, l) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$calln($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hsl2rgbn, h, s, l);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hwb2rgb(h, w, b) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$calln($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hwb2rgbn, h, w, b);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hsv2rgb(h, s, v) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$calln($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hsv2rgbn, h, s, v);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hue(h) {
    return (h % 360 + 360) % 360;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hueParse(str) {
    const m = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$HUE_RE.exec(str);
    let a = 255;
    let v;
    if (!m) return;
    if (m[5] !== v) a = m[6] ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$p2b(+m[5]) : $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$n2b(+m[5]);
    const h = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hue(+m[2]);
    const p1 = +m[3] / 100;
    const p2 = +m[4] / 100;
    if (m[1] === "hwb") v = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hwb2rgb(h, p1, p2);
    else if (m[1] === "hsv") v = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hsv2rgb(h, p1, p2);
    else v = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hsl2rgb(h, p1, p2);
    return {
        r: v[0],
        g: v[1],
        b: v[2],
        a: a
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$rotate(v, deg) {
    var h = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$rgb2hsl(v);
    h[0] = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hue(h[0] + deg);
    h = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hsl2rgb(h);
    v.r = h[0];
    v.g = h[1];
    v.b = h[2];
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hslString(v) {
    if (!v) return;
    const a = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$rgb2hsl(v);
    const h = a[0];
    const s = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$n2p(a[1]);
    const l = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$n2p(a[2]);
    return v.a < 255 ? `hsla(${h}, ${s}%, ${l}%, ${$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$b2n(v.a)})` : `hsl(${h}, ${s}%, ${l}%)`;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map = {
    x: "dark",
    Z: "light",
    Y: "re",
    X: "blu",
    W: "gr",
    V: "medium",
    U: "slate",
    A: "ee",
    T: "ol",
    S: "or",
    B: "ra",
    C: "lateg",
    D: "ights",
    R: "in",
    Q: "turquois",
    E: "hi",
    P: "ro",
    O: "al",
    N: "le",
    M: "de",
    L: "yello",
    F: "en",
    K: "ch",
    G: "arks",
    H: "ea",
    I: "ightg",
    J: "wh"
};
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$names$1 = {
    OiceXe: "f0f8ff",
    antiquewEte: "faebd7",
    aqua: "ffff",
    aquamarRe: "7fffd4",
    azuY: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "0",
    blanKedOmond: "ffebcd",
    Xe: "ff",
    XeviTet: "8a2be2",
    bPwn: "a52a2a",
    burlywood: "deb887",
    caMtXe: "5f9ea0",
    KartYuse: "7fff00",
    KocTate: "d2691e",
    cSO: "ff7f50",
    cSnflowerXe: "6495ed",
    cSnsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "ffff",
    xXe: "8b",
    xcyan: "8b8b",
    xgTMnPd: "b8860b",
    xWay: "a9a9a9",
    xgYF: "6400",
    xgYy: "a9a9a9",
    xkhaki: "bdb76b",
    xmagFta: "8b008b",
    xTivegYF: "556b2f",
    xSange: "ff8c00",
    xScEd: "9932cc",
    xYd: "8b0000",
    xsOmon: "e9967a",
    xsHgYF: "8fbc8f",
    xUXe: "483d8b",
    xUWay: "2f4f4f",
    xUgYy: "2f4f4f",
    xQe: "ced1",
    xviTet: "9400d3",
    dAppRk: "ff1493",
    dApskyXe: "bfff",
    dimWay: "696969",
    dimgYy: "696969",
    dodgerXe: "1e90ff",
    fiYbrick: "b22222",
    flSOwEte: "fffaf0",
    foYstWAn: "228b22",
    fuKsia: "ff00ff",
    gaRsbSo: "dcdcdc",
    ghostwEte: "f8f8ff",
    gTd: "ffd700",
    gTMnPd: "daa520",
    Way: "808080",
    gYF: "8000",
    gYFLw: "adff2f",
    gYy: "808080",
    honeyMw: "f0fff0",
    hotpRk: "ff69b4",
    RdianYd: "cd5c5c",
    Rdigo: "4b0082",
    ivSy: "fffff0",
    khaki: "f0e68c",
    lavFMr: "e6e6fa",
    lavFMrXsh: "fff0f5",
    lawngYF: "7cfc00",
    NmoncEffon: "fffacd",
    ZXe: "add8e6",
    ZcSO: "f08080",
    Zcyan: "e0ffff",
    ZgTMnPdLw: "fafad2",
    ZWay: "d3d3d3",
    ZgYF: "90ee90",
    ZgYy: "d3d3d3",
    ZpRk: "ffb6c1",
    ZsOmon: "ffa07a",
    ZsHgYF: "20b2aa",
    ZskyXe: "87cefa",
    ZUWay: "778899",
    ZUgYy: "778899",
    ZstAlXe: "b0c4de",
    ZLw: "ffffe0",
    lime: "ff00",
    limegYF: "32cd32",
    lRF: "faf0e6",
    magFta: "ff00ff",
    maPon: "800000",
    VaquamarRe: "66cdaa",
    VXe: "cd",
    VScEd: "ba55d3",
    VpurpN: "9370db",
    VsHgYF: "3cb371",
    VUXe: "7b68ee",
    VsprRggYF: "fa9a",
    VQe: "48d1cc",
    VviTetYd: "c71585",
    midnightXe: "191970",
    mRtcYam: "f5fffa",
    mistyPse: "ffe4e1",
    moccasR: "ffe4b5",
    navajowEte: "ffdead",
    navy: "80",
    Tdlace: "fdf5e6",
    Tive: "808000",
    TivedBb: "6b8e23",
    Sange: "ffa500",
    SangeYd: "ff4500",
    ScEd: "da70d6",
    pOegTMnPd: "eee8aa",
    pOegYF: "98fb98",
    pOeQe: "afeeee",
    pOeviTetYd: "db7093",
    papayawEp: "ffefd5",
    pHKpuff: "ffdab9",
    peru: "cd853f",
    pRk: "ffc0cb",
    plum: "dda0dd",
    powMrXe: "b0e0e6",
    purpN: "800080",
    YbeccapurpN: "663399",
    Yd: "ff0000",
    Psybrown: "bc8f8f",
    PyOXe: "4169e1",
    saddNbPwn: "8b4513",
    sOmon: "fa8072",
    sandybPwn: "f4a460",
    sHgYF: "2e8b57",
    sHshell: "fff5ee",
    siFna: "a0522d",
    silver: "c0c0c0",
    skyXe: "87ceeb",
    UXe: "6a5acd",
    UWay: "708090",
    UgYy: "708090",
    snow: "fffafa",
    sprRggYF: "ff7f",
    stAlXe: "4682b4",
    tan: "d2b48c",
    teO: "8080",
    tEstN: "d8bfd8",
    tomato: "ff6347",
    Qe: "40e0d0",
    viTet: "ee82ee",
    JHt: "f5deb3",
    wEte: "ffffff",
    wEtesmoke: "f5f5f5",
    Lw: "ffff00",
    LwgYF: "9acd32"
};
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$unpack() {
    const unpacked = {
    };
    const keys = Object.keys($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$names$1);
    const tkeys = Object.keys($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map);
    let i, j, k, ok, nk;
    for(i = 0; i < keys.length; i++){
        ok = nk = keys[i];
        for(j = 0; j < tkeys.length; j++){
            k = tkeys[j];
            nk = nk.replace(k, $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$map[k]);
        }
        k = parseInt($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$names$1[ok], 16);
        unpacked[nk] = [
            k >> 16 & 255,
            k >> 8 & 255,
            k & 255
        ];
    }
    return unpacked;
}
let $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$names;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$nameParse(str) {
    if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$names) {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$names = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$unpack();
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$names.transparent = [
            0,
            0,
            0,
            0
        ];
    }
    const a = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$names[str.toLowerCase()];
    return a && {
        r: a[0],
        g: a[1],
        b: a[2],
        a: a.length === 4 ? a[3] : 255
    };
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$rgbParse(str) {
    const m = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$RGB_RE.exec(str);
    let a = 255;
    let r, g, b;
    if (!m) return;
    if (m[7] !== r) {
        const v = +m[7];
        a = m[8] ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$p2b(v) : $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$lim(v * 255, 0, 255);
    }
    r = +m[1];
    g = +m[3];
    b = +m[5];
    r = 255 & (m[2] ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$p2b(r) : $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$lim(r, 0, 255));
    g = 255 & (m[4] ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$p2b(g) : $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$lim(g, 0, 255));
    b = 255 & (m[6] ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$p2b(b) : $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$lim(b, 0, 255));
    return {
        r: r,
        g: g,
        b: b,
        a: a
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$rgbString(v) {
    return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$to = (v)=>v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1 / 2.4) * 1.055 - 0.055
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$from = (v)=>v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4)
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$interpolate(rgb1, rgb2, t) {
    const r = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$from($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$b2n(rgb1.r));
    const g = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$from($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$b2n(rgb1.g));
    const b = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$from($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$b2n(rgb1.b));
    return {
        r: $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$n2b($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$to(r + t * ($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$from($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$b2n(rgb2.r)) - r))),
        g: $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$n2b($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$to(g + t * ($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$from($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$b2n(rgb2.g)) - g))),
        b: $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$n2b($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$to(b + t * ($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$from($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$b2n(rgb2.b)) - b))),
        a: rgb1.a + t * (rgb2.a - rgb1.a)
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$modHSL(v, i, ratio) {
    if (v) {
        let tmp = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$rgb2hsl(v);
        tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
        tmp = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hsl2rgb(tmp);
        v.r = tmp[0];
        v.g = tmp[1];
        v.b = tmp[2];
    }
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$clone(v, proto) {
    return v ? Object.assign(proto || {
    }, v) : v;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$fromObject(input) {
    var v = {
        r: 0,
        g: 0,
        b: 0,
        a: 255
    };
    if (Array.isArray(input)) {
        if (input.length >= 3) {
            v = {
                r: input[0],
                g: input[1],
                b: input[2],
                a: 255
            };
            if (input.length > 3) v.a = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$n2b(input[3]);
        }
    } else {
        v = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$clone(input, {
            r: 0,
            g: 0,
            b: 0,
            a: 1
        });
        v.a = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$n2b(v.a);
    }
    return v;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$functionParse(str) {
    if (str.charAt(0) === "r") return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$rgbParse(str);
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hueParse(str);
}
class $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$Color {
    get valid() {
        return this._valid;
    }
    get rgb() {
        var v = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$clone(this._rgb);
        if (v) v.a = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$b2n(v.a);
        return v;
    }
    set rgb(obj) {
        this._rgb = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$fromObject(obj);
    }
    rgbString() {
        return this._valid ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$rgbString(this._rgb) : undefined;
    }
    hexString() {
        return this._valid ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hexString(this._rgb) : undefined;
    }
    hslString() {
        return this._valid ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hslString(this._rgb) : undefined;
    }
    mix(color1, weight) {
        if (color1) {
            const c1 = this.rgb;
            const c2 = color1.rgb;
            let w2;
            const p = weight === w2 ? 0.5 : weight;
            const w = 2 * p - 1;
            const a = c1.a - c2.a;
            const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
            w2 = 1 - w1;
            c1.r = 255 & w1 * c1.r + w2 * c2.r + 0.5;
            c1.g = 255 & w1 * c1.g + w2 * c2.g + 0.5;
            c1.b = 255 & w1 * c1.b + w2 * c2.b + 0.5;
            c1.a = p * c1.a + (1 - p) * c2.a;
            this.rgb = c1;
        }
        return this;
    }
    interpolate(color2, t) {
        if (color2) this._rgb = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$interpolate(this._rgb, color2._rgb, t);
        return this;
    }
    clone() {
        return new $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$Color(this.rgb);
    }
    alpha(a) {
        this._rgb.a = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$n2b(a);
        return this;
    }
    clearer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 - ratio;
        return this;
    }
    greyscale() {
        const rgb = this._rgb;
        const val = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
        rgb.r = rgb.g = rgb.b = val;
        return this;
    }
    opaquer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 + ratio;
        return this;
    }
    negate() {
        const v = this._rgb;
        v.r = 255 - v.r;
        v.g = 255 - v.g;
        v.b = 255 - v.b;
        return this;
    }
    lighten(ratio) {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$modHSL(this._rgb, 2, ratio);
        return this;
    }
    darken(ratio) {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$modHSL(this._rgb, 2, -ratio);
        return this;
    }
    saturate(ratio) {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$modHSL(this._rgb, 1, ratio);
        return this;
    }
    desaturate(ratio) {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$modHSL(this._rgb, 1, -ratio);
        return this;
    }
    rotate(deg) {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$rotate(this._rgb, deg);
        return this;
    }
    constructor(input){
        if (input instanceof $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$Color) return input;
        const type = typeof input;
        let v;
        if (type === "object") v = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$fromObject(input);
        else if (type === "string") v = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$hexParse(input) || $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$nameParse(input) || $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$functionParse(input);
        this._rgb = v;
        this._valid = !!v;
    }
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$index_esm(input) {
    return new $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$Color(input);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9f4f30ee63539e24(value) {
    if (value && typeof value === "object") {
        const type = value.toString();
        return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
    }
    return false;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$db3b6bfb95261072(value) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9f4f30ee63539e24(value) ? value : $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$index_esm(value);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$faec65b429be379(value) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9f4f30ee63539e24(value) ? value : $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$index_esm(value).saturate(0.5).darken(0.1).hexString();
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ce26c07117d59d6a = Object.create(null);
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a8550f7dbe79f93a = Object.create(null);
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getScope$1(node, key) {
    if (!key) return node;
    const keys = key.split(".");
    for(let i = 0, n = keys.length; i < n; ++i){
        const k = keys[i];
        node = node[k] || (node[k] = Object.create(null));
    }
    return node;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$set(root, scope, values) {
    if (typeof scope === "string") return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$6559d589eb85fbb6($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getScope$1(root, scope), values);
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$6559d589eb85fbb6($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getScope$1(root, ""), scope);
}
class $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$Defaults {
    set(scope, values) {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$set(this, scope, values);
    }
    get(scope) {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getScope$1(this, scope);
    }
    describe(scope, values) {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$set($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a8550f7dbe79f93a, scope, values);
    }
    override(scope, values) {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$set($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ce26c07117d59d6a, scope, values);
    }
    route(scope, name, targetScope, targetName) {
        const scopeObject = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getScope$1(this, scope);
        const targetScopeObject = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getScope$1(this, targetScope);
        const privateName = "_" + name;
        Object.defineProperties(scopeObject, {
            [privateName]: {
                value: scopeObject[name],
                writable: true
            },
            [name]: {
                enumerable: true,
                get () {
                    const local = this[privateName];
                    const target = targetScopeObject[targetName];
                    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(local)) return Object.assign({
                    }, target, local);
                    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(local, target);
                },
                set (value) {
                    this[privateName] = value;
                }
            }
        });
    }
    constructor(_descriptors1){
        this.animation = undefined;
        this.backgroundColor = "rgba(0,0,0,0.1)";
        this.borderColor = "rgba(0,0,0,0.1)";
        this.color = "#666";
        this.datasets = {
        };
        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio()
        ;
        this.elements = {
        };
        this.events = [
            "mousemove",
            "mouseout",
            "click",
            "touchstart",
            "touchmove"
        ];
        this.font = {
            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
            size: 12,
            style: "normal",
            lineHeight: 1.2,
            weight: null
        };
        this.hover = {
        };
        this.hoverBackgroundColor = (ctx, options)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$faec65b429be379(options.backgroundColor)
        ;
        this.hoverBorderColor = (ctx, options)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$faec65b429be379(options.borderColor)
        ;
        this.hoverColor = (ctx, options)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$faec65b429be379(options.color)
        ;
        this.indexAxis = "x";
        this.interaction = {
            mode: "nearest",
            intersect: true,
            includeInvisible: false
        };
        this.maintainAspectRatio = true;
        this.onHover = null;
        this.onClick = null;
        this.parsing = true;
        this.plugins = {
        };
        this.responsive = true;
        this.scale = undefined;
        this.scales = {
        };
        this.showLine = true;
        this.drawActiveElementsOnTop = true;
        this.describe(_descriptors1);
    }
}
var $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0 = new $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$Defaults({
    _scriptable: (name)=>!name.startsWith("on")
    ,
    _indexable: (name)=>name !== "events"
    ,
    hover: {
        _fallback: "interaction"
    },
    interaction: {
        _scriptable: false,
        _indexable: false
    }
});
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d377dcb2b61d6c4e(font) {
    if (!font || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(font.size) || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(font.family)) return null;
    return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a6d5c9ae78a2c08(ctx, data, gc, longest, string) {
    let textWidth = data[string];
    if (!textWidth) {
        textWidth = data[string] = ctx.measureText(string).width;
        gc.push(string);
    }
    if (textWidth > longest) longest = textWidth;
    return longest;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a05254e7c3aeba6e(ctx, font, arrayOfThings, cache) {
    cache = cache || {
    };
    let data = cache.data = cache.data || {
    };
    let gc = cache.garbageCollect = cache.garbageCollect || [];
    if (cache.font !== font) {
        data = cache.data = {
        };
        gc = cache.garbageCollect = [];
        cache.font = font;
    }
    ctx.save();
    ctx.font = font;
    let longest = 0;
    const ilen = arrayOfThings.length;
    let i, j, jlen, thing, nestedThing;
    for(i = 0; i < ilen; i++){
        thing = arrayOfThings[i];
        if (thing !== undefined && thing !== null && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(thing) !== true) longest = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a6d5c9ae78a2c08(ctx, data, gc, longest, thing);
        else if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(thing)) for(j = 0, jlen = thing.length; j < jlen; j++){
            nestedThing = thing[j];
            if (nestedThing !== undefined && nestedThing !== null && !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(nestedThing)) longest = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a6d5c9ae78a2c08(ctx, data, gc, longest, nestedThing);
        }
    }
    ctx.restore();
    const gcLen = gc.length / 2;
    if (gcLen > arrayOfThings.length) {
        for(i = 0; i < gcLen; i++)delete data[gc[i]];
        gc.splice(0, gcLen);
    }
    return longest;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$71cec2538cb2c617(chart, pixel, width) {
    const devicePixelRatio = chart.currentDevicePixelRatio;
    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f787f51d84a910ad(canvas, ctx) {
    ctx = ctx || canvas.getContext("2d");
    ctx.save();
    ctx.resetTransform();
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.restore();
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$6554612db691658e(ctx, options, x, y) {
    let type, xOffset, yOffset, size, cornerRadius;
    const style = options.pointStyle;
    const rotation = options.rotation;
    const radius = options.radius;
    let rad = (rotation || 0) * $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a17c37559e1db147;
    if (style && typeof style === "object") {
        type = style.toString();
        if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
            ctx.save();
            ctx.translate(x, y);
            ctx.rotate(rad);
            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
            ctx.restore();
            return;
        }
    }
    if (isNaN(radius) || radius <= 0) return;
    ctx.beginPath();
    switch(style){
        default:
            ctx.arc(x, y, radius, 0, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7);
            ctx.closePath();
            break;
        case "triangle":
            ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
            rad += $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8c78c7c36408ea29;
            ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
            rad += $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8c78c7c36408ea29;
            ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
            ctx.closePath();
            break;
        case "rectRounded":
            cornerRadius = radius * 0.516;
            size = radius - cornerRadius;
            xOffset = Math.cos(rad + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$fef3dfd9bad05307) * size;
            yOffset = Math.sin(rad + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$fef3dfd9bad05307) * size;
            ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d, rad - $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd);
            ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd, rad);
            ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd);
            ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd, rad + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d);
            ctx.closePath();
            break;
        case "rect":
            if (!rotation) {
                size = Math.SQRT1_2 * radius;
                ctx.rect(x - size, y - size, 2 * size, 2 * size);
                break;
            }
            rad += $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$fef3dfd9bad05307;
        case "rectRot":
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + yOffset, y - xOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            ctx.lineTo(x - yOffset, y + xOffset);
            ctx.closePath();
            break;
        case "crossRot":
            rad += $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$fef3dfd9bad05307;
        case "cross":
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            ctx.moveTo(x + yOffset, y - xOffset);
            ctx.lineTo(x - yOffset, y + xOffset);
            break;
        case "star":
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            ctx.moveTo(x + yOffset, y - xOffset);
            ctx.lineTo(x - yOffset, y + xOffset);
            rad += $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$fef3dfd9bad05307;
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            ctx.moveTo(x + yOffset, y - xOffset);
            ctx.lineTo(x - yOffset, y + xOffset);
            break;
        case "line":
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            break;
        case "dash":
            ctx.moveTo(x, y);
            ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
            break;
    }
    ctx.fill();
    if (options.borderWidth > 0) ctx.stroke();
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ef35774e6d314e91(point, area, margin) {
    margin = margin || 0.5;
    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$78acf4525d8a74c4(ctx, area) {
    ctx.save();
    ctx.beginPath();
    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
    ctx.clip();
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dc98b0b04f4c7758(ctx) {
    ctx.restore();
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8a5498727ef6be21(ctx, previous, target, flip, mode) {
    if (!previous) return ctx.lineTo(target.x, target.y);
    if (mode === "middle") {
        const midpoint = (previous.x + target.x) / 2;
        ctx.lineTo(midpoint, previous.y);
        ctx.lineTo(midpoint, target.y);
    } else if (mode === "after" !== !!flip) ctx.lineTo(previous.x, target.y);
    else ctx.lineTo(target.x, previous.y);
    ctx.lineTo(target.x, target.y);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d24c54395ce0c509(ctx, previous, target, flip) {
    if (!previous) return ctx.lineTo(target.x, target.y);
    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8743009a87fcb00f(ctx, text, x, y, font, opts = {
}) {
    const lines = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(text) ? text : [
        text
    ];
    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
    let i, line;
    ctx.save();
    ctx.font = font.string;
    $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$setRenderOpts(ctx, opts);
    for(i = 0; i < lines.length; ++i){
        line = lines[i];
        if (stroke) {
            if (opts.strokeColor) ctx.strokeStyle = opts.strokeColor;
            if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(opts.strokeWidth)) ctx.lineWidth = opts.strokeWidth;
            ctx.strokeText(line, x, y, opts.maxWidth);
        }
        ctx.fillText(line, x, y, opts.maxWidth);
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$decorateText(ctx, x, y, line, opts);
        y += font.lineHeight;
    }
    ctx.restore();
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$setRenderOpts(ctx, opts) {
    if (opts.translation) ctx.translate(opts.translation[0], opts.translation[1]);
    if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(opts.rotation)) ctx.rotate(opts.rotation);
    if (opts.color) ctx.fillStyle = opts.color;
    if (opts.textAlign) ctx.textAlign = opts.textAlign;
    if (opts.textBaseline) ctx.textBaseline = opts.textBaseline;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$decorateText(ctx, x, y, line, opts) {
    if (opts.strikethrough || opts.underline) {
        const metrics = ctx.measureText(line);
        const left = x - metrics.actualBoundingBoxLeft;
        const right = x + metrics.actualBoundingBoxRight;
        const top = y - metrics.actualBoundingBoxAscent;
        const bottom = y + metrics.actualBoundingBoxDescent;
        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
        ctx.strokeStyle = ctx.fillStyle;
        ctx.beginPath();
        ctx.lineWidth = opts.decorationWidth || 2;
        ctx.moveTo(left, yDecoration);
        ctx.lineTo(right, yDecoration);
        ctx.stroke();
    }
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$493d36ec626b6698(ctx, rect) {
    const { x: x , y: y , w: w , h: h , radius: radius  } = rect;
    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d, true);
    ctx.lineTo(x, y + h - radius.bottomLeft);
    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd, true);
    ctx.lineTo(x + w - radius.bottomRight, y + h);
    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd, 0, true);
    ctx.lineTo(x + w, y + radius.topRight);
    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd, true);
    ctx.lineTo(x + radius.topLeft, y);
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$LINE_HEIGHT = new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$1a8f5705751d8277(value, size) {
    const matches = ("" + value).match($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$LINE_HEIGHT);
    if (!matches || matches[1] === "normal") return size * 1.2;
    value = +matches[2];
    switch(matches[3]){
        case "px":
            return value;
        case "%":
            value /= 100;
            break;
    }
    return size * value;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$numberOrZero = (v)=>+v || 0
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3b513254972cfc9c(value, props) {
    const ret = {
    };
    const objProps = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(props);
    const keys = objProps ? Object.keys(props) : props;
    const read = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(value) ? objProps ? (prop)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(value[prop], value[props[prop]])
     : (prop)=>value[prop]
     : ()=>value
    ;
    for (const prop1 of keys)ret[prop1] = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$numberOrZero(read(prop1));
    return ret;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$1fbe638ecf81657e(value) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3b513254972cfc9c(value, {
        top: "y",
        right: "x",
        bottom: "y",
        left: "x"
    });
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d66dc83d8cfc8dd(value) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3b513254972cfc9c(value, [
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight"
    ]);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(value) {
    const obj = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$1fbe638ecf81657e(value);
    obj.width = obj.left + obj.right;
    obj.height = obj.top + obj.bottom;
    return obj;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(options, fallback) {
    options = options || {
    };
    fallback = fallback || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.font;
    let size = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(options.size, fallback.size);
    if (typeof size === "string") size = parseInt(size, 10);
    let style = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(options.style, fallback.style);
    if (style && !("" + style).match($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$FONT_STYLE)) {
        console.warn('Invalid font style specified: "' + style + '"');
        style = "";
    }
    const font = {
        family: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(options.family, fallback.family),
        lineHeight: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$1a8f5705751d8277($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(options.lineHeight, fallback.lineHeight), size),
        size: size,
        style: style,
        weight: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(options.weight, fallback.weight),
        string: ""
    };
    font.string = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d377dcb2b61d6c4e(font);
    return font;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$407448d2b89b1813(inputs, context, index, info) {
    let cacheable = true;
    let i, ilen, value;
    for(i = 0, ilen = inputs.length; i < ilen; ++i){
        value = inputs[i];
        if (value === undefined) continue;
        if (context !== undefined && typeof value === "function") {
            value = value(context);
            cacheable = false;
        }
        if (index !== undefined && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(value)) {
            value = value[index % value.length];
            cacheable = false;
        }
        if (value !== undefined) {
            if (info && !cacheable) info.cacheable = false;
            return value;
        }
    }
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$db202ddc8be9136(minmax, grace, beginAtZero) {
    const { min: min , max: max  } = minmax;
    const change = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7ccc53e8f1e7dfc5(grace, (max - min) / 2);
    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add
    ;
    return {
        min: keepZero(min, -Math.abs(change)),
        max: keepZero(max, change)
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dda1d9f60106f0e9(parentContext, context) {
    return Object.assign(Object.create(parentContext), context);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$91477dc880baac21(table, value, cmp) {
    cmp = cmp || ((index)=>table[index] < value
    );
    let hi = table.length - 1;
    let lo = 0;
    let mid;
    while(hi - lo > 1){
        mid = lo + hi >> 1;
        if (cmp(mid)) lo = mid;
        else hi = mid;
    }
    return {
        lo: lo,
        hi: hi
    };
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d141bba7fdc215a3 = (table, key, value)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$91477dc880baac21(table, value, (index)=>table[index][key] < value
    )
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ebd11618f299a286 = (table, key, value)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$91477dc880baac21(table, value, (index)=>table[index][key] >= value
    )
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23ebac1979863676(values, min, max) {
    let start = 0;
    let end = values.length;
    while(start < end && values[start] < min)start++;
    while(end > start && values[end - 1] > max)end--;
    return start > 0 || end < values.length ? values.slice(start, end) : values;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$arrayEvents = [
    "push",
    "pop",
    "shift",
    "splice",
    "unshift"
];
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$882b5998b3b9117c(array, listener) {
    if (array._chartjs) {
        array._chartjs.listeners.push(listener);
        return;
    }
    Object.defineProperty(array, "_chartjs", {
        configurable: true,
        enumerable: false,
        value: {
            listeners: [
                listener
            ]
        }
    });
    $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$arrayEvents.forEach((key)=>{
        const method = "_onData" + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efca4cbe5dd06740(key);
        const base = array[key];
        Object.defineProperty(array, key, {
            configurable: true,
            enumerable: false,
            value (...args) {
                const res = base.apply(this, args);
                array._chartjs.listeners.forEach((object)=>{
                    if (typeof object[method] === "function") object[method](...args);
                });
                return res;
            }
        });
    });
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3b14a55fb2447963(array, listener) {
    const stub = array._chartjs;
    if (!stub) return;
    const listeners = stub.listeners;
    const index = listeners.indexOf(listener);
    if (index !== -1) listeners.splice(index, 1);
    if (listeners.length > 0) return;
    $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$arrayEvents.forEach((key)=>{
        delete array[key];
    });
    delete array._chartjs;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$71511d61b312f219(items) {
    const set1 = new Set();
    let i, ilen;
    for(i = 0, ilen = items.length; i < ilen; ++i)set1.add(items[i]);
    if (set1.size === ilen) return items;
    return Array.from(set1);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c3950d9923825c02(scopes, prefixes = [
    ""
], rootScopes = scopes, fallback, getTarget = ()=>scopes[0]
) {
    if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$35e795649ee09318(fallback)) fallback = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_resolve("_fallback", scopes);
    const cache = {
        [Symbol.toStringTag]: "Object",
        _cacheable: true,
        _scopes: scopes,
        _rootScopes: rootScopes,
        _fallback: fallback,
        _getTarget: getTarget,
        override: (scope)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c3950d9923825c02([
                scope,
                ...scopes
            ], prefixes, rootScopes, fallback)
    };
    return new Proxy(cache, {
        deleteProperty (target, prop) {
            delete target[prop];
            delete target._keys;
            delete scopes[0][prop];
            return true;
        },
        get (target, prop) {
            return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_cached(target, prop, ()=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_resolveWithPrefixes(prop, prefixes, scopes, target)
            );
        },
        getOwnPropertyDescriptor (target, prop) {
            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
        },
        getPrototypeOf () {
            return Reflect.getPrototypeOf(scopes[0]);
        },
        has (target, prop) {
            return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getKeysFromAllScopes(target).includes(prop);
        },
        ownKeys (target) {
            return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getKeysFromAllScopes(target);
        },
        set (target, prop, value) {
            const storage = target._storage || (target._storage = getTarget());
            target[prop] = storage[prop] = value;
            delete target._keys;
            return true;
        }
    });
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a93c5207d687da10(proxy, context, subProxy, descriptorDefaults) {
    const cache = {
        _cacheable: false,
        _proxy: proxy,
        _context: context,
        _subProxy: subProxy,
        _stack: new Set(),
        _descriptors: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c996f45e5784d0(proxy, descriptorDefaults),
        setContext: (ctx)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a93c5207d687da10(proxy, ctx, subProxy, descriptorDefaults)
        ,
        override: (scope)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a93c5207d687da10(proxy.override(scope), context, subProxy, descriptorDefaults)
    };
    return new Proxy(cache, {
        deleteProperty (target, prop) {
            delete target[prop];
            delete proxy[prop];
            return true;
        },
        get (target, prop, receiver) {
            return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_cached(target, prop, ()=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_resolveWithContext(target, prop, receiver)
            );
        },
        getOwnPropertyDescriptor (target, prop) {
            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
                enumerable: true,
                configurable: true
            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);
        },
        getPrototypeOf () {
            return Reflect.getPrototypeOf(proxy);
        },
        has (target, prop) {
            return Reflect.has(proxy, prop);
        },
        ownKeys () {
            return Reflect.ownKeys(proxy);
        },
        set (target, prop, value) {
            proxy[prop] = value;
            delete target[prop];
            return true;
        }
    });
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c996f45e5784d0(proxy, defaults1 = {
    scriptable: true,
    indexable: true
}) {
    const { _scriptable: _scriptable = defaults1.scriptable , _indexable: _indexable = defaults1.indexable , _allKeys: _allKeys = defaults1.allKeys  } = proxy;
    return {
        allKeys: _allKeys,
        scriptable: _scriptable,
        indexable: _indexable,
        isScriptable: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2e2af4578d910ddf(_scriptable) ? _scriptable : ()=>_scriptable
        ,
        isIndexable: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2e2af4578d910ddf(_indexable) ? _indexable : ()=>_indexable
    };
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$readKey = (prefix, name)=>prefix ? prefix + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efca4cbe5dd06740(name) : name
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$needsSubResolver = (prop, value)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object)
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_cached(target, prop, resolve1) {
    if (Object.prototype.hasOwnProperty.call(target, prop)) return target[prop];
    const value = resolve1();
    target[prop] = value;
    return value;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_resolveWithContext(target, prop, receiver) {
    const { _proxy: _proxy , _context: _context , _subProxy: _subProxy , _descriptors: descriptors1  } = target;
    let value = _proxy[prop];
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2e2af4578d910ddf(value) && descriptors1.isScriptable(prop)) value = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_resolveScriptable(prop, value, target, receiver);
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(value) && value.length) value = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_resolveArray(prop, value, target, descriptors1.isIndexable);
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$needsSubResolver(prop, value)) value = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a93c5207d687da10(value, _context, _subProxy && _subProxy[prop], descriptors1);
    return value;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_resolveScriptable(prop, value, target, receiver) {
    const { _proxy: _proxy , _context: _context , _subProxy: _subProxy , _stack: _stack  } = target;
    if (_stack.has(prop)) throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
    _stack.add(prop);
    value = value(_context, _subProxy || receiver);
    _stack.delete(prop);
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$needsSubResolver(prop, value)) value = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$createSubResolver(_proxy._scopes, _proxy, prop, value);
    return value;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_resolveArray(prop, value, target, isIndexable) {
    const { _proxy: _proxy , _context: _context , _subProxy: _subProxy , _descriptors: descriptors2  } = target;
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$35e795649ee09318(_context.index) && isIndexable(prop)) value = value[_context.index % value.length];
    else if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(value[0])) {
        const arr = value;
        const scopes = _proxy._scopes.filter((s)=>s !== arr
        );
        value = [];
        for (const item of arr){
            const resolver = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$createSubResolver(scopes, _proxy, prop, item);
            value.push($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a93c5207d687da10(resolver, _context, _subProxy && _subProxy[prop], descriptors2));
        }
    }
    return value;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$resolveFallback(fallback, prop, value) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2e2af4578d910ddf(fallback) ? fallback(prop, value) : fallback;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getScope = (key, parent)=>key === true ? parent : typeof key === "string" ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2d1720544b23b823(parent, key) : undefined
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$addScopes(set2, parentScopes, key, parentFallback, value) {
    for (const parent of parentScopes){
        const scope = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getScope(key, parent);
        if (scope) {
            set2.add(scope);
            const fallback = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$resolveFallback(scope._fallback, key, value);
            if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$35e795649ee09318(fallback) && fallback !== key && fallback !== parentFallback) return fallback;
        } else if (scope === false && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$35e795649ee09318(parentFallback) && key !== parentFallback) return null;
    }
    return false;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$createSubResolver(parentScopes, resolver, prop, value) {
    const rootScopes = resolver._rootScopes;
    const fallback = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$resolveFallback(resolver._fallback, prop, value);
    const allScopes = [
        ...parentScopes,
        ...rootScopes
    ];
    const set3 = new Set();
    set3.add(value);
    let key = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$addScopesFromKey(set3, allScopes, prop, fallback || prop, value);
    if (key === null) return false;
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$35e795649ee09318(fallback) && fallback !== prop) {
        key = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$addScopesFromKey(set3, allScopes, fallback, key, value);
        if (key === null) return false;
    }
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c3950d9923825c02(Array.from(set3), [
        ""
    ], rootScopes, fallback, ()=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$var$subGetTarget(resolver, prop, value)
    );
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$addScopesFromKey(set4, allScopes, key, fallback, item) {
    while(key)key = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$addScopes(set4, allScopes, key, fallback, item);
    return key;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$subGetTarget(resolver, prop, value) {
    const parent = resolver._getTarget();
    if (!(prop in parent)) parent[prop] = {
    };
    const target = parent[prop];
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(target) && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(value)) return value;
    return target;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_resolveWithPrefixes(prop, prefixes, scopes, proxy) {
    let value;
    for (const prefix of prefixes){
        value = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_resolve($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$readKey(prefix, prop), scopes);
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$35e795649ee09318(value)) return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$needsSubResolver(prop, value) ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$createSubResolver(scopes, proxy, prop, value) : value;
    }
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$_resolve(key, scopes) {
    for (const scope of scopes){
        if (!scope) continue;
        const value = scope[key];
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$35e795649ee09318(value)) return value;
    }
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getKeysFromAllScopes(target) {
    let keys = target._keys;
    if (!keys) keys = target._keys = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$resolveKeysFromAllScopes(target._scopes);
    return keys;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$resolveKeysFromAllScopes(scopes) {
    const set5 = new Set();
    for (const scope of scopes)for (const key of Object.keys(scope).filter((k)=>!k.startsWith("_")
    ))set5.add(key);
    return Array.from(set5);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4a5767248b18ef41(meta, data, start, count) {
    const { iScale: iScale  } = meta;
    const { key: key = "r"  } = this._parsing;
    const parsed = new Array(count);
    let i, ilen, index, item;
    for(i = 0, ilen = count; i < ilen; ++i){
        index = i + start;
        item = data[index];
        parsed[i] = {
            r: iScale.parse($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2d1720544b23b823(item, key), index)
        };
    }
    return parsed;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$EPSILON = Number.EPSILON || 0.00000000000001;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPoint = (points, i)=>i < points.length && !points[i].skip && points[i]
;
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getValueAxis = (indexAxis)=>indexAxis === "x" ? "y" : "x"
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$667d3bf0c5f83305(firstPoint, middlePoint, afterPoint, t) {
    const previous = firstPoint.skip ? middlePoint : firstPoint;
    const current = middlePoint;
    const next = afterPoint.skip ? middlePoint : afterPoint;
    const d01 = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$24baa2b76016ce0e(current, previous);
    const d12 = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$24baa2b76016ce0e(next, current);
    let s01 = d01 / (d01 + d12);
    let s12 = d12 / (d01 + d12);
    s01 = isNaN(s01) ? 0 : s01;
    s12 = isNaN(s12) ? 0 : s12;
    const fa = t * s01;
    const fb = t * s12;
    return {
        previous: {
            x: current.x - fa * (next.x - previous.x),
            y: current.y - fa * (next.y - previous.y)
        },
        next: {
            x: current.x + fb * (next.x - previous.x),
            y: current.y + fb * (next.y - previous.y)
        }
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$monotoneAdjust(points, deltaK, mK) {
    const pointsLen = points.length;
    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
    let pointAfter = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPoint(points, 0);
    for(let i = 0; i < pointsLen - 1; ++i){
        pointCurrent = pointAfter;
        pointAfter = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPoint(points, i + 1);
        if (!pointCurrent || !pointAfter) continue;
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a33b77bbdbb8366c(deltaK[i], 0, $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$EPSILON)) {
            mK[i] = mK[i + 1] = 0;
            continue;
        }
        alphaK = mK[i] / deltaK[i];
        betaK = mK[i + 1] / deltaK[i];
        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
        if (squaredMagnitude <= 9) continue;
        tauK = 3 / Math.sqrt(squaredMagnitude);
        mK[i] = alphaK * tauK * deltaK[i];
        mK[i + 1] = betaK * tauK * deltaK[i];
    }
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$monotoneCompute(points, mK, indexAxis = "x") {
    const valueAxis = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getValueAxis(indexAxis);
    const pointsLen = points.length;
    let delta, pointBefore, pointCurrent;
    let pointAfter = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPoint(points, 0);
    for(let i = 0; i < pointsLen; ++i){
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPoint(points, i + 1);
        if (!pointCurrent) continue;
        const iPixel = pointCurrent[indexAxis];
        const vPixel = pointCurrent[valueAxis];
        if (pointBefore) {
            delta = (iPixel - pointBefore[indexAxis]) / 3;
            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
        }
        if (pointAfter) {
            delta = (pointAfter[indexAxis] - iPixel) / 3;
            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
        }
    }
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$317a3d46287192d8(points, indexAxis = "x") {
    const valueAxis = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getValueAxis(indexAxis);
    const pointsLen = points.length;
    const deltaK = Array(pointsLen).fill(0);
    const mK = Array(pointsLen);
    let i, pointBefore, pointCurrent;
    let pointAfter = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPoint(points, 0);
    for(i = 0; i < pointsLen; ++i){
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPoint(points, i + 1);
        if (!pointCurrent) continue;
        if (pointAfter) {
            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
        }
        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2408f22a0fab9ae5(deltaK[i - 1]) !== $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2408f22a0fab9ae5(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
    }
    $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$monotoneAdjust(points, deltaK, mK);
    $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$monotoneCompute(points, mK, indexAxis);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$capControlPoint(pt, min, max) {
    return Math.max(Math.min(pt, max), min);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$capBezierPoints(points, area) {
    let i, ilen, point, inArea, inAreaPrev;
    let inAreaNext = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ef35774e6d314e91(points[0], area);
    for(i = 0, ilen = points.length; i < ilen; ++i){
        inAreaPrev = inArea;
        inArea = inAreaNext;
        inAreaNext = i < ilen - 1 && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ef35774e6d314e91(points[i + 1], area);
        if (!inArea) continue;
        point = points[i];
        if (inAreaPrev) {
            point.cp1x = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$capControlPoint(point.cp1x, area.left, area.right);
            point.cp1y = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$capControlPoint(point.cp1y, area.top, area.bottom);
        }
        if (inAreaNext) {
            point.cp2x = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$capControlPoint(point.cp2x, area.left, area.right);
            point.cp2y = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$capControlPoint(point.cp2y, area.top, area.bottom);
        }
    }
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$21579262ef46735b(points, options, area, loop, indexAxis) {
    let i, ilen, point, controlPoints;
    if (options.spanGaps) points = points.filter((pt)=>!pt.skip
    );
    if (options.cubicInterpolationMode === "monotone") $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$317a3d46287192d8(points, indexAxis);
    else {
        let prev = loop ? points[points.length - 1] : points[0];
        for(i = 0, ilen = points.length; i < ilen; ++i){
            point = points[i];
            controlPoints = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$667d3bf0c5f83305(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
            point.cp1x = controlPoints.previous.x;
            point.cp1y = controlPoints.previous.y;
            point.cp2x = controlPoints.next.x;
            point.cp2y = controlPoints.next.y;
            prev = point;
        }
    }
    if (options.capBezierPoints) $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$capBezierPoints(points, area);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$61196ced6d74a310() {
    return typeof window !== "undefined" && typeof document !== "undefined";
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2329c99376c9d0a4(domNode) {
    let parent = domNode.parentNode;
    if (parent && parent.toString() === "[object ShadowRoot]") parent = parent.host;
    return parent;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$parseMaxStyle(styleValue, node, parentProperty) {
    let valueInPixels;
    if (typeof styleValue === "string") {
        valueInPixels = parseInt(styleValue, 10);
        if (styleValue.indexOf("%") !== -1) valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    } else valueInPixels = styleValue;
    return valueInPixels;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getComputedStyle = (element)=>window.getComputedStyle(element, null)
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$1ee57be6f6687d2c(el, property) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getComputedStyle(el).getPropertyValue(property);
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$positions = [
    "top",
    "right",
    "bottom",
    "left"
];
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPositionedStyle(styles, style, suffix) {
    const result = {
    };
    suffix = suffix ? "-" + suffix : "";
    for(let i = 0; i < 4; i++){
        const pos = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$positions[i];
        result[pos] = parseFloat(styles[style + "-" + pos + suffix]) || 0;
    }
    result.width = result.left + result.right;
    result.height = result.top + result.bottom;
    return result;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot)
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getCanvasPosition(e, canvas) {
    const touches = e.touches;
    const source = touches && touches.length ? touches[0] : e;
    const { offsetX: offsetX , offsetY: offsetY  } = source;
    let box = false;
    let x, y;
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$useOffsetPos(offsetX, offsetY, e.target)) {
        x = offsetX;
        y = offsetY;
    } else {
        const rect = canvas.getBoundingClientRect();
        x = source.clientX - rect.left;
        y = source.clientY - rect.top;
        box = true;
    }
    return {
        x: x,
        y: y,
        box: box
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$df995fae86a55f06(evt, chart) {
    if ("native" in evt) return evt;
    const { canvas: canvas , currentDevicePixelRatio: currentDevicePixelRatio  } = chart;
    const style = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getComputedStyle(canvas);
    const borderBox = style.boxSizing === "border-box";
    const paddings = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPositionedStyle(style, "padding");
    const borders = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPositionedStyle(style, "border", "width");
    const { x: x , y: y , box: box  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getCanvasPosition(evt, canvas);
    const xOffset = paddings.left + (box && borders.left);
    const yOffset = paddings.top + (box && borders.top);
    let { width: width , height: height  } = chart;
    if (borderBox) {
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
    }
    return {
        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getContainerSize(canvas, width, height) {
    let maxWidth, maxHeight;
    if (width === undefined || height === undefined) {
        const container = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2329c99376c9d0a4(canvas);
        if (!container) {
            width = canvas.clientWidth;
            height = canvas.clientHeight;
        } else {
            const rect = container.getBoundingClientRect();
            const containerStyle = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getComputedStyle(container);
            const containerBorder = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPositionedStyle(containerStyle, "border", "width");
            const containerPadding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPositionedStyle(containerStyle, "padding");
            width = rect.width - containerPadding.width - containerBorder.width;
            height = rect.height - containerPadding.height - containerBorder.height;
            maxWidth = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$parseMaxStyle(containerStyle.maxWidth, container, "clientWidth");
            maxHeight = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$parseMaxStyle(containerStyle.maxHeight, container, "clientHeight");
        }
    }
    return {
        width: width,
        height: height,
        maxWidth: maxWidth || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$527e9aa3390079e9,
        maxHeight: maxHeight || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$527e9aa3390079e9
    };
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$round1 = (v)=>Math.round(v * 10) / 10
;
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d66501df72047452(canvas, bbWidth, bbHeight, aspectRatio) {
    const style = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getComputedStyle(canvas);
    const margins = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPositionedStyle(style, "margin");
    const maxWidth = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$parseMaxStyle(style.maxWidth, canvas, "clientWidth") || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$527e9aa3390079e9;
    const maxHeight = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$parseMaxStyle(style.maxHeight, canvas, "clientHeight") || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$527e9aa3390079e9;
    const containerSize = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getContainerSize(canvas, bbWidth, bbHeight);
    let { width: width , height: height  } = containerSize;
    if (style.boxSizing === "content-box") {
        const borders = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPositionedStyle(style, "border", "width");
        const paddings = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getPositionedStyle(style, "padding");
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
    }
    width = Math.max(0, width - margins.width);
    height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);
    width = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$round1(Math.min(width, maxWidth, containerSize.maxWidth));
    height = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$round1(Math.min(height, maxHeight, containerSize.maxHeight));
    if (width && !height) height = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$round1(width / 2);
    return {
        width: width,
        height: height
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4c3d22f3d993c33f(chart, forceRatio, forceStyle) {
    const pixelRatio = forceRatio || 1;
    const deviceHeight = Math.floor(chart.height * pixelRatio);
    const deviceWidth = Math.floor(chart.width * pixelRatio);
    chart.height = deviceHeight / pixelRatio;
    chart.width = deviceWidth / pixelRatio;
    const canvas = chart.canvas;
    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
        canvas.style.height = `${chart.height}px`;
        canvas.style.width = `${chart.width}px`;
    }
    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
        chart.currentDevicePixelRatio = pixelRatio;
        canvas.height = deviceHeight;
        canvas.width = deviceWidth;
        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
        return true;
    }
    return false;
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3466f893ebf79586 = function() {
    let passiveSupported = false;
    try {
        const options = {
            get passive () {
                passiveSupported = true;
                return false;
            }
        };
        window.addEventListener("test", null, options);
        window.removeEventListener("test", null, options);
    } catch (e) {
    }
    return passiveSupported;
}();
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9bb611d729802a56(element, property) {
    const value = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$1ee57be6f6687d2c(element, property);
    const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
    return matches ? +matches[1] : undefined;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2f6ca3d3b1f80bf5(p1, p2, t, mode) {
    return {
        x: p1.x + t * (p2.x - p1.x),
        y: p1.y + t * (p2.y - p1.y)
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$306ddfe3a8403e2(p1, p2, t, mode) {
    return {
        x: p1.x + t * (p2.x - p1.x),
        y: mode === "middle" ? t < 0.5 ? p1.y : p2.y : mode === "after" ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7a38258bbe170828(p1, p2, t, mode) {
    const cp1 = {
        x: p1.cp2x,
        y: p1.cp2y
    };
    const cp2 = {
        x: p2.cp1x,
        y: p2.cp1y
    };
    const a = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2f6ca3d3b1f80bf5(p1, cp1, t);
    const b = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2f6ca3d3b1f80bf5(cp1, cp2, t);
    const c = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2f6ca3d3b1f80bf5(cp2, p2, t);
    const d = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2f6ca3d3b1f80bf5(a, b, t);
    const e = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2f6ca3d3b1f80bf5(b, c, t);
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2f6ca3d3b1f80bf5(d, e, t);
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$intlCache = new Map();
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getNumberFormat(locale, options) {
    options = options || {
    };
    const cacheKey = locale + JSON.stringify(options);
    let formatter = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$intlCache.get(cacheKey);
    if (!formatter) {
        formatter = new Intl.NumberFormat(locale, options);
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$intlCache.set(cacheKey, formatter);
    }
    return formatter;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ae1af26003f05816(num, locale, options) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getNumberFormat(locale, options).format(num);
}
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getRightToLeftAdapter = function(rectX, width) {
    return {
        x (x) {
            return rectX + rectX + width - x;
        },
        setWidth (w) {
            width = w;
        },
        textAlign (align) {
            if (align === "center") return align;
            return align === "right" ? "left" : "right";
        },
        xPlus (x, value) {
            return x - value;
        },
        leftForLtr (x, itemWidth) {
            return x - itemWidth;
        }
    };
};
const $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getLeftToRightAdapter = function() {
    return {
        x (x) {
            return x;
        },
        setWidth (w) {
        },
        textAlign (align) {
            return align;
        },
        xPlus (x, value) {
            return x + value;
        },
        leftForLtr (x, _itemWidth) {
            return x;
        }
    };
};
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$28f7fcd39efa255(rtl, rectX, width) {
    return rtl ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getRightToLeftAdapter(rectX, width) : $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getLeftToRightAdapter();
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d12bd131bb975d1(ctx, direction) {
    let style, original;
    if (direction === "ltr" || direction === "rtl") {
        style = ctx.canvas.style;
        original = [
            style.getPropertyValue("direction"),
            style.getPropertyPriority("direction"), 
        ];
        style.setProperty("direction", direction, "important");
        ctx.prevTextDirection = original;
    }
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9d398bebfec1c039(ctx, original) {
    if (original !== undefined) {
        delete ctx.prevTextDirection;
        ctx.canvas.style.setProperty("direction", original[0], original[1]);
    }
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$propertyFn(property) {
    if (property === "angle") return {
        between: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ffb5f4729a158638,
        compare: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d29e374196577086,
        normalize: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce
    };
    return {
        between: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f38c853ae54ed474,
        compare: (a, b)=>a - b
        ,
        normalize: (x)=>x
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$normalizeSegment({ start: start , end: end , count: count , loop: loop , style: style  }) {
    return {
        start: start % count,
        end: end % count,
        loop: loop && (end - start + 1) % count === 0,
        style: style
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getSegment(segment, points, bounds) {
    const { property: property , start: startBound , end: endBound  } = bounds;
    const { between: between , normalize: normalize  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$propertyFn(property);
    const count = points.length;
    let { start: start , end: end , loop: loop  } = segment;
    let i, ilen;
    if (loop) {
        start += count;
        end += count;
        for(i = 0, ilen = count; i < ilen; ++i){
            if (!between(normalize(points[start % count][property]), startBound, endBound)) break;
            start--;
            end--;
        }
        start %= count;
        end %= count;
    }
    if (end < start) end += count;
    return {
        start: start,
        end: end,
        loop: loop,
        style: segment.style
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$92108d983e8ee699(segment, points, bounds) {
    if (!bounds) return [
        segment
    ];
    const { property: property , start: startBound , end: endBound  } = bounds;
    const count = points.length;
    const { compare: compare , between: between , normalize: normalize  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$propertyFn(property);
    const { start: start , end: end , loop: loop , style: style  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$getSegment(segment, points, bounds);
    const result = [];
    let inside = false;
    let subStart = null;
    let value, point, prevValue;
    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0
    ;
    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value)
    ;
    const shouldStart = ()=>inside || startIsBefore()
    ;
    const shouldStop = ()=>!inside || endIsBefore()
    ;
    for(let i = start, prev = start; i <= end; ++i){
        point = points[i % count];
        if (point.skip) continue;
        value = normalize(point[property]);
        if (value === prevValue) continue;
        inside = between(value, startBound, endBound);
        if (subStart === null && shouldStart()) subStart = compare(value, startBound) === 0 ? i : prev;
        if (subStart !== null && shouldStop()) {
            result.push($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$normalizeSegment({
                start: subStart,
                end: i,
                loop: loop,
                count: count,
                style: style
            }));
            subStart = null;
        }
        prev = i;
        prevValue = value;
    }
    if (subStart !== null) result.push($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$normalizeSegment({
        start: subStart,
        end: end,
        loop: loop,
        count: count,
        style: style
    }));
    return result;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$1a82df3d29112e01(line, bounds) {
    const result = [];
    const segments = line.segments;
    for(let i = 0; i < segments.length; i++){
        const sub = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$92108d983e8ee699(segments[i], line.points, bounds);
        if (sub.length) result.push(...sub);
    }
    return result;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$findStartAndEnd(points, count, loop, spanGaps) {
    let start = 0;
    let end = count - 1;
    if (loop && !spanGaps) while(start < count && !points[start].skip)start++;
    while(start < count && points[start].skip)start++;
    start %= count;
    if (loop) end += start;
    while(end > start && points[end % count].skip)end--;
    end %= count;
    return {
        start: start,
        end: end
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$solidSegments(points, start, max, loop) {
    const count = points.length;
    const result = [];
    let last = start;
    let prev = points[start];
    let end;
    for(end = start + 1; end <= max; ++end){
        const cur = points[end % count];
        if (cur.skip || cur.stop) {
            if (!prev.skip) {
                loop = false;
                result.push({
                    start: start % count,
                    end: (end - 1) % count,
                    loop: loop
                });
                start = last = cur.stop ? end : null;
            }
        } else {
            last = end;
            if (prev.skip) start = end;
        }
        prev = cur;
    }
    if (last !== null) result.push({
        start: start % count,
        end: last % count,
        loop: loop
    });
    return result;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ab83b03e4111b1d0(line, segmentOptions) {
    const points = line.points;
    const spanGaps = line.options.spanGaps;
    const count = points.length;
    if (!count) return [];
    const loop = !!line._loop;
    const { start: start , end: end  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$findStartAndEnd(points, count, loop, spanGaps);
    if (spanGaps === true) return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$splitByStyles(line, [
        {
            start: start,
            end: end,
            loop: loop
        }
    ], points, segmentOptions);
    const max = end < start ? end + count : end;
    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$splitByStyles(line, $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$solidSegments(points, start, max, completeLoop), points, segmentOptions);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$splitByStyles(line, segments, points, segmentOptions) {
    if (!segmentOptions || !segmentOptions.setContext || !points) return segments;
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$doSplitByStyles(line, segments, points, segmentOptions);
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$doSplitByStyles(line, segments, points, segmentOptions) {
    const chartContext = line._chart.getContext();
    const baseStyle = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$readStyle(line.options);
    const { _datasetIndex: datasetIndex , options: { spanGaps: spanGaps  }  } = line;
    const count = points.length;
    const result = [];
    let prevStyle = baseStyle;
    let start = segments[0].start;
    let i = start;
    function addStyle(s, e, l, st) {
        const dir = spanGaps ? -1 : 1;
        if (s === e) return;
        s += count;
        while(points[s % count].skip)s -= dir;
        while(points[e % count].skip)e += dir;
        if (s % count !== e % count) {
            result.push({
                start: s % count,
                end: e % count,
                loop: l,
                style: st
            });
            prevStyle = st;
            start = e % count;
        }
    }
    for (const segment of segments){
        start = spanGaps ? start : segment.start;
        let prev = points[start % count];
        let style;
        for(i = start + 1; i <= segment.end; i++){
            const pt = points[i % count];
            style = $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$readStyle(segmentOptions.setContext($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dda1d9f60106f0e9(chartContext, {
                type: "segment",
                p0: prev,
                p1: pt,
                p0DataIndex: (i - 1) % count,
                p1DataIndex: i % count,
                datasetIndex: datasetIndex
            })));
            if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$var$styleChanged(style, prevStyle)) addStyle(start, i - 1, segment.loop, prevStyle);
            prev = pt;
            prevStyle = style;
        }
        if (start < i - 1) addStyle(start, i - 1, segment.loop, prevStyle);
    }
    return result;
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$readStyle(options) {
    return {
        backgroundColor: options.backgroundColor,
        borderCapStyle: options.borderCapStyle,
        borderDash: options.borderDash,
        borderDashOffset: options.borderDashOffset,
        borderJoinStyle: options.borderJoinStyle,
        borderWidth: options.borderWidth,
        borderColor: options.borderColor
    };
}
function $df29249fe447c065$var$$f0bf98aa79b5dc9b$var$styleChanged(style, prevStyle) {
    return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$var$Animator {
    _notify(chart, anims, date, type) {
        const callbacks = anims.listeners[type];
        const numSteps = anims.duration;
        callbacks.forEach((fn)=>fn({
                chart: chart,
                initial: anims.initial,
                numSteps: numSteps,
                currentStep: Math.min(date - anims.start, numSteps)
            })
        );
    }
    _refresh() {
        if (this._request) return;
        this._running = true;
        this._request = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$43caf9889c228507.call(window, ()=>{
            this._update();
            this._request = null;
            if (this._running) this._refresh();
        });
    }
    _update(date = Date.now()) {
        let remaining = 0;
        this._charts.forEach((anims, chart)=>{
            if (!anims.running || !anims.items.length) return;
            const items = anims.items;
            let i = items.length - 1;
            let draw1 = false;
            let item;
            for(; i >= 0; --i){
                item = items[i];
                if (item._active) {
                    if (item._total > anims.duration) anims.duration = item._total;
                    item.tick(date);
                    draw1 = true;
                } else {
                    items[i] = items[items.length - 1];
                    items.pop();
                }
            }
            if (draw1) {
                chart.draw();
                this._notify(chart, anims, date, "progress");
            }
            if (!items.length) {
                anims.running = false;
                this._notify(chart, anims, date, "complete");
                anims.initial = false;
            }
            remaining += items.length;
        });
        this._lastDate = date;
        if (remaining === 0) this._running = false;
    }
    _getAnims(chart) {
        const charts = this._charts;
        let anims = charts.get(chart);
        if (!anims) {
            anims = {
                running: false,
                initial: true,
                items: [],
                listeners: {
                    complete: [],
                    progress: []
                }
            };
            charts.set(chart, anims);
        }
        return anims;
    }
    listen(chart, event, cb) {
        this._getAnims(chart).listeners[event].push(cb);
    }
    add(chart, items) {
        if (!items || !items.length) return;
        this._getAnims(chart).items.push(...items);
    }
    has(chart) {
        return this._getAnims(chart).items.length > 0;
    }
    start(chart) {
        const anims = this._charts.get(chart);
        if (!anims) return;
        anims.running = true;
        anims.start = Date.now();
        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration)
        , 0);
        this._refresh();
    }
    running(chart) {
        if (!this._running) return false;
        const anims = this._charts.get(chart);
        if (!anims || !anims.running || !anims.items.length) return false;
        return true;
    }
    stop(chart) {
        const anims = this._charts.get(chart);
        if (!anims || !anims.items.length) return;
        const items = anims.items;
        let i = items.length - 1;
        for(; i >= 0; --i)items[i].cancel();
        anims.items = [];
        this._notify(chart, anims, Date.now(), "complete");
    }
    remove(chart) {
        return this._charts.delete(chart);
    }
    constructor(){
        this._request = null;
        this._charts = new Map();
        this._running = false;
        this._lastDate = undefined;
    }
}
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$a424a0aa8f687495 = new $df29249fe447c065$var$$a43aa20d3eb44e80$var$Animator();
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$transparent = "transparent";
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$interpolators = {
    boolean (from, to, factor) {
        return factor > 0.5 ? to : from;
    },
    color (from, to, factor) {
        const c0 = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$db3b6bfb95261072(from || $df29249fe447c065$var$$a43aa20d3eb44e80$var$transparent);
        const c1 = c0.valid && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$db3b6bfb95261072(to || $df29249fe447c065$var$$a43aa20d3eb44e80$var$transparent);
        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;
    },
    number (from, to, factor) {
        return from + (to - from) * factor;
    }
};
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$c35d437ae5945fcd {
    active() {
        return this._active;
    }
    update(cfg, to, date) {
        if (this._active) {
            this._notify(false);
            const currentValue = this._target[this._prop];
            const elapsed = date - this._start;
            const remain = this._duration - elapsed;
            this._start = date;
            this._duration = Math.floor(Math.max(remain, cfg.duration));
            this._total += elapsed;
            this._loop = !!cfg.loop;
            this._to = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$407448d2b89b1813([
                cfg.to,
                to,
                currentValue,
                cfg.from
            ]);
            this._from = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$407448d2b89b1813([
                cfg.from,
                currentValue,
                to
            ]);
        }
    }
    cancel() {
        if (this._active) {
            this.tick(Date.now());
            this._active = false;
            this._notify(false);
        }
    }
    tick(date) {
        const elapsed = date - this._start;
        const duration = this._duration;
        const prop = this._prop;
        const from = this._from;
        const loop = this._loop;
        const to = this._to;
        let factor;
        this._active = from !== to && (loop || elapsed < duration);
        if (!this._active) {
            this._target[prop] = to;
            this._notify(true);
            return;
        }
        if (elapsed < 0) {
            this._target[prop] = from;
            return;
        }
        factor = elapsed / duration % 2;
        factor = loop && factor > 1 ? 2 - factor : factor;
        factor = this._easing(Math.min(1, Math.max(0, factor)));
        this._target[prop] = this._fn(from, to, factor);
    }
    wait() {
        const promises = this._promises || (this._promises = []);
        return new Promise((res, rej)=>{
            promises.push({
                res: res,
                rej: rej
            });
        });
    }
    _notify(resolved) {
        const method = resolved ? "res" : "rej";
        const promises = this._promises || [];
        for(let i = 0; i < promises.length; i++)promises[i][method]();
    }
    constructor(cfg, target, prop, to){
        const currentValue = target[prop];
        to = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$407448d2b89b1813([
            cfg.to,
            to,
            currentValue,
            cfg.from
        ]);
        const from = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$407448d2b89b1813([
            cfg.from,
            currentValue,
            to
        ]);
        this._active = true;
        this._fn = cfg.fn || $df29249fe447c065$var$$a43aa20d3eb44e80$var$interpolators[cfg.type || typeof from];
        this._easing = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f1e1789686576879[cfg.easing] || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f1e1789686576879.linear;
        this._start = Math.floor(Date.now() + (cfg.delay || 0));
        this._duration = this._total = Math.floor(cfg.duration);
        this._loop = !!cfg.loop;
        this._target = target;
        this._prop = prop;
        this._from = from;
        this._to = to;
        this._promises = undefined;
    }
}
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$numbers = [
    "x",
    "y",
    "borderWidth",
    "radius",
    "tension"
];
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$colors = [
    "color",
    "borderColor",
    "backgroundColor"
];
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.set("animation", {
    delay: undefined,
    duration: 1000,
    easing: "easeOutQuart",
    fn: undefined,
    from: undefined,
    loop: undefined,
    to: undefined,
    type: undefined
});
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$animationOptions = Object.keys($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.animation);
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.describe("animation", {
    _fallback: false,
    _indexable: false,
    _scriptable: (name)=>name !== "onProgress" && name !== "onComplete" && name !== "fn"
});
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.set("animations", {
    colors: {
        type: "color",
        properties: $df29249fe447c065$var$$a43aa20d3eb44e80$var$colors
    },
    numbers: {
        type: "number",
        properties: $df29249fe447c065$var$$a43aa20d3eb44e80$var$numbers
    }
});
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.describe("animations", {
    _fallback: "animation"
});
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.set("transitions", {
    active: {
        animation: {
            duration: 400
        }
    },
    resize: {
        animation: {
            duration: 0
        }
    },
    show: {
        animations: {
            colors: {
                from: "transparent"
            },
            visible: {
                type: "boolean",
                duration: 0
            }
        }
    },
    hide: {
        animations: {
            colors: {
                to: "transparent"
            },
            visible: {
                type: "boolean",
                easing: "linear",
                fn: (v)=>v | 0
            }
        }
    }
});
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$8ab227dac26677d {
    configure(config) {
        if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(config)) return;
        const animatedProps = this._properties;
        Object.getOwnPropertyNames(config).forEach((key)=>{
            const cfg = config[key];
            if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(cfg)) return;
            const resolved = {
            };
            for (const option of $df29249fe447c065$var$$a43aa20d3eb44e80$var$animationOptions)resolved[option] = cfg[option];
            ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(cfg.properties) && cfg.properties || [
                key
            ]).forEach((prop)=>{
                if (prop === key || !animatedProps.has(prop)) animatedProps.set(prop, resolved);
            });
        });
    }
    _animateOptions(target, values) {
        const newOptions = values.options;
        const options = $df29249fe447c065$var$$a43aa20d3eb44e80$var$resolveTargetOptions(target, newOptions);
        if (!options) return [];
        const animations = this._createAnimations(options, newOptions);
        if (newOptions.$shared) $df29249fe447c065$var$$a43aa20d3eb44e80$var$awaitAll(target.options.$animations, newOptions).then(()=>{
            target.options = newOptions;
        }, ()=>{
        });
        return animations;
    }
    _createAnimations(target, values) {
        const animatedProps = this._properties;
        const animations = [];
        const running = target.$animations || (target.$animations = {
        });
        const props = Object.keys(values);
        const date = Date.now();
        let i;
        for(i = props.length - 1; i >= 0; --i){
            const prop = props[i];
            if (prop.charAt(0) === "$") continue;
            if (prop === "options") {
                animations.push(...this._animateOptions(target, values));
                continue;
            }
            const value = values[prop];
            let animation = running[prop];
            const cfg = animatedProps.get(prop);
            if (animation) {
                if (cfg && animation.active()) {
                    animation.update(cfg, value, date);
                    continue;
                } else animation.cancel();
            }
            if (!cfg || !cfg.duration) {
                target[prop] = value;
                continue;
            }
            running[prop] = animation = new $df29249fe447c065$var$$a43aa20d3eb44e80$export$c35d437ae5945fcd(cfg, target, prop, value);
            animations.push(animation);
        }
        return animations;
    }
    update(target, values) {
        if (this._properties.size === 0) {
            Object.assign(target, values);
            return;
        }
        const animations = this._createAnimations(target, values);
        if (animations.length) {
            $df29249fe447c065$var$$a43aa20d3eb44e80$export$a424a0aa8f687495.add(this._chart, animations);
            return true;
        }
    }
    constructor(chart, config){
        this._chart = chart;
        this._properties = new Map();
        this.configure(config);
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$awaitAll(animations, properties) {
    const running = [];
    const keys = Object.keys(properties);
    for(let i = 0; i < keys.length; i++){
        const anim = animations[keys[i]];
        if (anim && anim.active()) running.push(anim.wait());
    }
    return Promise.all(running);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$resolveTargetOptions(target, newOptions) {
    if (!newOptions) return;
    let options = target.options;
    if (!options) {
        target.options = newOptions;
        return;
    }
    if (options.$shared) target.options = options = Object.assign({
    }, options, {
        $shared: false,
        $animations: {
        }
    });
    return options;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$scaleClip(scale, allowedOverflow) {
    const opts = scale && scale.options || {
    };
    const reverse = opts.reverse;
    const min = opts.min === undefined ? allowedOverflow : 0;
    const max = opts.max === undefined ? allowedOverflow : 0;
    return {
        start: reverse ? max : min,
        end: reverse ? min : max
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$defaultClip(xScale, yScale, allowedOverflow) {
    if (allowedOverflow === false) return false;
    const x = $df29249fe447c065$var$$a43aa20d3eb44e80$var$scaleClip(xScale, allowedOverflow);
    const y = $df29249fe447c065$var$$a43aa20d3eb44e80$var$scaleClip(yScale, allowedOverflow);
    return {
        top: y.end,
        right: x.end,
        bottom: y.start,
        left: x.start
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$toClip(value) {
    let t, r, b, l;
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(value)) {
        t = value.top;
        r = value.right;
        b = value.bottom;
        l = value.left;
    } else t = r = b = l = value;
    return {
        top: t,
        right: r,
        bottom: b,
        left: l,
        disabled: value === false
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getSortedDatasetIndices(chart, filterVisible) {
    const keys = [];
    const metasets = chart._getSortedDatasetMetas(filterVisible);
    let i, ilen;
    for(i = 0, ilen = metasets.length; i < ilen; ++i)keys.push(metasets[i].index);
    return keys;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$applyStack(stack, value, dsIndex, options = {
}) {
    const keys = stack.keys;
    const singleMode = options.mode === "single";
    let i, ilen, datasetIndex, otherValue;
    if (value === null) return;
    for(i = 0, ilen = keys.length; i < ilen; ++i){
        datasetIndex = +keys[i];
        if (datasetIndex === dsIndex) {
            if (options.all) continue;
            break;
        }
        otherValue = stack.values[datasetIndex];
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(otherValue) && (singleMode || value === 0 || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2408f22a0fab9ae5(value) === $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2408f22a0fab9ae5(otherValue))) value += otherValue;
    }
    return value;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$convertObjectDataToArray(data) {
    const keys = Object.keys(data);
    const adata = new Array(keys.length);
    let i, ilen, key;
    for(i = 0, ilen = keys.length; i < ilen; ++i){
        key = keys[i];
        adata[i] = {
            x: key,
            y: data[key]
        };
    }
    return adata;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$isStacked(scale, meta) {
    const stacked = scale && scale.options.stacked;
    return stacked || stacked === undefined && meta.stack !== undefined;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getStackKey(indexScale, valueScale, meta) {
    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getUserBounds(scale) {
    const { min: min , max: max , minDefined: minDefined , maxDefined: maxDefined  } = scale.getUserBounds();
    return {
        min: minDefined ? min : Number.NEGATIVE_INFINITY,
        max: maxDefined ? max : Number.POSITIVE_INFINITY
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getOrCreateStack(stacks, stackKey, indexValue) {
    const subStack = stacks[stackKey] || (stacks[stackKey] = {
    });
    return subStack[indexValue] || (subStack[indexValue] = {
    });
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getLastIndexInStack(stack, vScale, positive, type) {
    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){
        const value = stack[meta.index];
        if (positive && value > 0 || !positive && value < 0) return meta.index;
    }
    return null;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$updateStacks(controller, parsed) {
    const { chart: chart , _cachedMeta: meta  } = controller;
    const stacks = chart._stacks || (chart._stacks = {
    });
    const { iScale: iScale , vScale: vScale , index: datasetIndex  } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const key = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getStackKey(iScale, vScale, meta);
    const ilen = parsed.length;
    let stack;
    for(let i = 0; i < ilen; ++i){
        const item = parsed[i];
        const { [iAxis]: index1 , [vAxis]: value  } = item;
        const itemStacks = item._stacks || (item._stacks = {
        });
        stack = itemStacks[vAxis] = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getOrCreateStack(stacks, key, index1);
        stack[datasetIndex] = value;
        stack._top = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getLastIndexInStack(stack, vScale, true, meta.type);
        stack._bottom = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getLastIndexInStack(stack, vScale, false, meta.type);
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getFirstScaleId(chart, axis) {
    const scales1 = chart.scales;
    return Object.keys(scales1).filter((key)=>scales1[key].axis === axis
    ).shift();
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$createDatasetContext(parent, index2) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dda1d9f60106f0e9(parent, {
        active: false,
        dataset: undefined,
        datasetIndex: index2,
        index: index2,
        mode: "default",
        type: "dataset"
    });
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$createDataContext(parent, index3, element) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dda1d9f60106f0e9(parent, {
        active: false,
        dataIndex: index3,
        parsed: undefined,
        raw: undefined,
        element: element,
        index: index3,
        mode: "default",
        type: "data"
    });
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$clearStacks(meta, items) {
    const datasetIndex = meta.controller.index;
    const axis = meta.vScale && meta.vScale.axis;
    if (!axis) return;
    items = items || meta._parsed;
    for (const parsed of items){
        const stacks = parsed._stacks;
        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) return;
        delete stacks[axis][datasetIndex];
    }
}
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$isDirectUpdateMode = (mode)=>mode === "reset" || mode === "none"
;
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({
    }, cached)
;
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {
        keys: $df29249fe447c065$var$$a43aa20d3eb44e80$var$getSortedDatasetIndices(chart, true),
        values: null
    }
;
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$75572ec5c55b4048 {
    initialize() {
        const meta = this._cachedMeta;
        this.configure();
        this.linkScales();
        meta._stacked = $df29249fe447c065$var$$a43aa20d3eb44e80$var$isStacked(meta.vScale, meta);
        this.addElements();
    }
    updateIndex(datasetIndex) {
        if (this.index !== datasetIndex) $df29249fe447c065$var$$a43aa20d3eb44e80$var$clearStacks(this._cachedMeta);
        this.index = datasetIndex;
    }
    linkScales() {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        const chooseId = (axis, x, y, r)=>axis === "x" ? x : axis === "r" ? r : y
        ;
        const xid = meta.xAxisID = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(dataset.xAxisID, $df29249fe447c065$var$$a43aa20d3eb44e80$var$getFirstScaleId(chart, "x"));
        const yid = meta.yAxisID = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(dataset.yAxisID, $df29249fe447c065$var$$a43aa20d3eb44e80$var$getFirstScaleId(chart, "y"));
        const rid = meta.rAxisID = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(dataset.rAxisID, $df29249fe447c065$var$$a43aa20d3eb44e80$var$getFirstScaleId(chart, "r"));
        const indexAxis = meta.indexAxis;
        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
        meta.xScale = this.getScaleForId(xid);
        meta.yScale = this.getScaleForId(yid);
        meta.rScale = this.getScaleForId(rid);
        meta.iScale = this.getScaleForId(iid);
        meta.vScale = this.getScaleForId(vid);
    }
    getDataset() {
        return this.chart.data.datasets[this.index];
    }
    getMeta() {
        return this.chart.getDatasetMeta(this.index);
    }
    getScaleForId(scaleID) {
        return this.chart.scales[scaleID];
    }
    _getOtherScale(scale) {
        const meta = this._cachedMeta;
        return scale === meta.iScale ? meta.vScale : meta.iScale;
    }
    reset() {
        this._update("reset");
    }
    _destroy() {
        const meta = this._cachedMeta;
        if (this._data) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3b14a55fb2447963(this._data, this);
        if (meta._stacked) $df29249fe447c065$var$$a43aa20d3eb44e80$var$clearStacks(meta);
    }
    _dataCheck() {
        const dataset = this.getDataset();
        const data = dataset.data || (dataset.data = []);
        const _data = this._data;
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(data)) this._data = $df29249fe447c065$var$$a43aa20d3eb44e80$var$convertObjectDataToArray(data);
        else if (_data !== data) {
            if (_data) {
                $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3b14a55fb2447963(_data, this);
                const meta = this._cachedMeta;
                $df29249fe447c065$var$$a43aa20d3eb44e80$var$clearStacks(meta);
                meta._parsed = [];
            }
            if (data && Object.isExtensible(data)) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$882b5998b3b9117c(data, this);
            this._syncList = [];
            this._data = data;
        }
    }
    addElements() {
        const meta = this._cachedMeta;
        this._dataCheck();
        if (this.datasetElementType) meta.dataset = new this.datasetElementType();
    }
    buildOrUpdateElements(resetNewElements) {
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        let stackChanged = false;
        this._dataCheck();
        const oldStacked = meta._stacked;
        meta._stacked = $df29249fe447c065$var$$a43aa20d3eb44e80$var$isStacked(meta.vScale, meta);
        if (meta.stack !== dataset.stack) {
            stackChanged = true;
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$clearStacks(meta);
            meta.stack = dataset.stack;
        }
        this._resyncElements(resetNewElements);
        if (stackChanged || oldStacked !== meta._stacked) $df29249fe447c065$var$$a43aa20d3eb44e80$var$updateStacks(this, meta._parsed);
    }
    configure() {
        const config = this.chart.config;
        const scopeKeys = config.datasetScopeKeys(this._type);
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
        this.options = config.createResolver(scopes, this.getContext());
        this._parsing = this.options.parsing;
        this._cachedDataOpts = {
        };
    }
    parse(start, count) {
        const { _cachedMeta: meta , _data: data  } = this;
        const { iScale: iScale , _stacked: _stacked  } = meta;
        const iAxis = iScale.axis;
        let sorted = start === 0 && count === data.length ? true : meta._sorted;
        let prev = start > 0 && meta._parsed[start - 1];
        let i, cur, parsed;
        if (this._parsing === false) {
            meta._parsed = data;
            meta._sorted = true;
            parsed = data;
        } else {
            if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(data[start])) parsed = this.parseArrayData(meta, data, start, count);
            else if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(data[start])) parsed = this.parseObjectData(meta, data, start, count);
            else parsed = this.parsePrimitiveData(meta, data, start, count);
            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis]
            ;
            for(i = 0; i < count; ++i){
                meta._parsed[i + start] = cur = parsed[i];
                if (sorted) {
                    if (isNotInOrderComparedToPrev()) sorted = false;
                    prev = cur;
                }
            }
            meta._sorted = sorted;
        }
        if (_stacked) $df29249fe447c065$var$$a43aa20d3eb44e80$var$updateStacks(this, parsed);
    }
    parsePrimitiveData(meta, data, start, count) {
        const { iScale: iScale , vScale: vScale  } = meta;
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const labels = iScale.getLabels();
        const singleScale = iScale === vScale;
        const parsed = new Array(count);
        let i, ilen, index4;
        for(i = 0, ilen = count; i < ilen; ++i){
            index4 = i + start;
            parsed[i] = {
                [iAxis]: singleScale || iScale.parse(labels[index4], index4),
                [vAxis]: vScale.parse(data[index4], index4)
            };
        }
        return parsed;
    }
    parseArrayData(meta, data, start, count) {
        const { xScale: xScale , yScale: yScale  } = meta;
        const parsed = new Array(count);
        let i, ilen, index5, item;
        for(i = 0, ilen = count; i < ilen; ++i){
            index5 = i + start;
            item = data[index5];
            parsed[i] = {
                x: xScale.parse(item[0], index5),
                y: yScale.parse(item[1], index5)
            };
        }
        return parsed;
    }
    parseObjectData(meta, data, start, count) {
        const { xScale: xScale , yScale: yScale  } = meta;
        const { xAxisKey: xAxisKey = "x" , yAxisKey: yAxisKey = "y"  } = this._parsing;
        const parsed = new Array(count);
        let i, ilen, index6, item;
        for(i = 0, ilen = count; i < ilen; ++i){
            index6 = i + start;
            item = data[index6];
            parsed[i] = {
                x: xScale.parse($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2d1720544b23b823(item, xAxisKey), index6),
                y: yScale.parse($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2d1720544b23b823(item, yAxisKey), index6)
            };
        }
        return parsed;
    }
    getParsed(index7) {
        return this._cachedMeta._parsed[index7];
    }
    getDataElement(index8) {
        return this._cachedMeta.data[index8];
    }
    applyStack(scale, parsed, mode) {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const value = parsed[scale.axis];
        const stack = {
            keys: $df29249fe447c065$var$$a43aa20d3eb44e80$var$getSortedDatasetIndices(chart, true),
            values: parsed._stacks[scale.axis]
        };
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$applyStack(stack, value, meta.index, {
            mode: mode
        });
    }
    updateRangeFromParsed(range, scale, parsed, stack) {
        const parsedValue = parsed[scale.axis];
        let value = parsedValue === null ? NaN : parsedValue;
        const values = stack && parsed._stacks[scale.axis];
        if (stack && values) {
            stack.values = values;
            value = $df29249fe447c065$var$$a43aa20d3eb44e80$var$applyStack(stack, parsedValue, this._cachedMeta.index);
        }
        range.min = Math.min(range.min, value);
        range.max = Math.max(range.max, value);
    }
    getMinMax(scale, canStack) {
        const meta = this._cachedMeta;
        const _parsed = meta._parsed;
        const sorted = meta._sorted && scale === meta.iScale;
        const ilen = _parsed.length;
        const otherScale = this._getOtherScale(scale);
        const stack = $df29249fe447c065$var$$a43aa20d3eb44e80$var$createStack(canStack, meta, this.chart);
        const range = {
            min: Number.POSITIVE_INFINITY,
            max: Number.NEGATIVE_INFINITY
        };
        const { min: otherMin , max: otherMax  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getUserBounds(otherScale);
        let i, parsed;
        function _skip() {
            parsed = _parsed[i];
            const otherValue = parsed[otherScale.axis];
            return !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
        }
        for(i = 0; i < ilen; ++i){
            if (_skip()) continue;
            this.updateRangeFromParsed(range, scale, parsed, stack);
            if (sorted) break;
        }
        if (sorted) for(i = ilen - 1; i >= 0; --i){
            if (_skip()) continue;
            this.updateRangeFromParsed(range, scale, parsed, stack);
            break;
        }
        return range;
    }
    getAllParsedValues(scale) {
        const parsed = this._cachedMeta._parsed;
        const values = [];
        let i, ilen, value;
        for(i = 0, ilen = parsed.length; i < ilen; ++i){
            value = parsed[i][scale.axis];
            if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(value)) values.push(value);
        }
        return values;
    }
    getMaxOverflow() {
        return false;
    }
    getLabelAndValue(index9) {
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const vScale = meta.vScale;
        const parsed = this.getParsed(index9);
        return {
            label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
            value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
        };
    }
    _update(mode) {
        const meta = this._cachedMeta;
        this.update(mode || "default");
        meta._clip = $df29249fe447c065$var$$a43aa20d3eb44e80$var$toClip($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(this.options.clip, $df29249fe447c065$var$$a43aa20d3eb44e80$var$defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
    }
    update(mode) {
    }
    draw() {
        const ctx = this._ctx;
        const chart = this.chart;
        const meta = this._cachedMeta;
        const elements1 = meta.data || [];
        const area = chart.chartArea;
        const active = [];
        const start = this._drawStart || 0;
        const count = this._drawCount || elements1.length - start;
        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
        let i;
        if (meta.dataset) meta.dataset.draw(ctx, area, start, count);
        for(i = start; i < start + count; ++i){
            const element = elements1[i];
            if (element.hidden) continue;
            if (element.active && drawActiveElementsOnTop) active.push(element);
            else element.draw(ctx, area);
        }
        for(i = 0; i < active.length; ++i)active[i].draw(ctx, area);
    }
    getStyle(index10, active) {
        const mode = active ? "active" : "default";
        return index10 === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index10 || 0, mode);
    }
    getContext(index11, active, mode) {
        const dataset = this.getDataset();
        let context;
        if (index11 >= 0 && index11 < this._cachedMeta.data.length) {
            const element = this._cachedMeta.data[index11];
            context = element.$context || (element.$context = $df29249fe447c065$var$$a43aa20d3eb44e80$var$createDataContext(this.getContext(), index11, element));
            context.parsed = this.getParsed(index11);
            context.raw = dataset.data[index11];
            context.index = context.dataIndex = index11;
        } else {
            context = this.$context || (this.$context = $df29249fe447c065$var$$a43aa20d3eb44e80$var$createDatasetContext(this.chart.getContext(), this.index));
            context.dataset = dataset;
            context.index = context.datasetIndex = this.index;
        }
        context.active = !!active;
        context.mode = mode;
        return context;
    }
    resolveDatasetElementOptions(mode) {
        return this._resolveElementOptions(this.datasetElementType.id, mode);
    }
    resolveDataElementOptions(index12, mode) {
        return this._resolveElementOptions(this.dataElementType.id, mode, index12);
    }
    _resolveElementOptions(elementType, mode = "default", index13) {
        const active = mode === "active";
        const cache = this._cachedDataOpts;
        const cacheKey = elementType + "-" + mode;
        const cached = cache[cacheKey];
        const sharing = this.enableOptionSharing && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$35e795649ee09318(index13);
        if (cached) return $df29249fe447c065$var$$a43aa20d3eb44e80$var$cloneIfNotShared(cached, sharing);
        const config = this.chart.config;
        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
        const prefixes = active ? [
            `${elementType}Hover`,
            "hover",
            elementType,
            ""
        ] : [
            elementType,
            ""
        ];
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
        const names = Object.keys($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.elements[elementType]);
        const context = ()=>this.getContext(index13, active)
        ;
        const values = config.resolveNamedOptions(scopes, names, context, prefixes);
        if (values.$shared) {
            values.$shared = sharing;
            cache[cacheKey] = Object.freeze($df29249fe447c065$var$$a43aa20d3eb44e80$var$cloneIfNotShared(values, sharing));
        }
        return values;
    }
    _resolveAnimations(index14, transition, active) {
        const chart = this.chart;
        const cache = this._cachedDataOpts;
        const cacheKey = `animation-${transition}`;
        const cached = cache[cacheKey];
        if (cached) return cached;
        let options;
        if (chart.options.animation !== false) {
            const config = this.chart.config;
            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
            options = config.createResolver(scopes, this.getContext(index14, active, transition));
        }
        const animations = new $df29249fe447c065$var$$a43aa20d3eb44e80$export$8ab227dac26677d(chart, options && options.animations);
        if (options && options._cacheable) cache[cacheKey] = Object.freeze(animations);
        return animations;
    }
    getSharedOptions(options) {
        if (!options.$shared) return;
        return this._sharedOptions || (this._sharedOptions = Object.assign({
        }, options));
    }
    includeOptions(mode, sharedOptions) {
        return !sharedOptions || $df29249fe447c065$var$$a43aa20d3eb44e80$var$isDirectUpdateMode(mode) || this.chart._animationsDisabled;
    }
    updateElement(element, index15, properties, mode) {
        if ($df29249fe447c065$var$$a43aa20d3eb44e80$var$isDirectUpdateMode(mode)) Object.assign(element, properties);
        else this._resolveAnimations(index15, mode).update(element, properties);
    }
    updateSharedOptions(sharedOptions, mode, newOptions) {
        if (sharedOptions && !$df29249fe447c065$var$$a43aa20d3eb44e80$var$isDirectUpdateMode(mode)) this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
    }
    _setStyle(element, index16, mode, active) {
        element.active = active;
        const options = this.getStyle(index16, active);
        this._resolveAnimations(index16, mode, active).update(element, {
            options: !active && this.getSharedOptions(options) || options
        });
    }
    removeHoverStyle(element, datasetIndex, index17) {
        this._setStyle(element, index17, "active", false);
    }
    setHoverStyle(element, datasetIndex, index18) {
        this._setStyle(element, index18, "active", true);
    }
    _removeDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) this._setStyle(element, undefined, "active", false);
    }
    _setDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) this._setStyle(element, undefined, "active", true);
    }
    _resyncElements(resetNewElements) {
        const data = this._data;
        const elements2 = this._cachedMeta.data;
        for (const [method, arg1, arg2] of this._syncList)this[method](arg1, arg2);
        this._syncList = [];
        const numMeta = elements2.length;
        const numData = data.length;
        const count = Math.min(numData, numMeta);
        if (count) this.parse(0, count);
        if (numData > numMeta) this._insertElements(numMeta, numData - numMeta, resetNewElements);
        else if (numData < numMeta) this._removeElements(numData, numMeta - numData);
    }
    _insertElements(start, count, resetNewElements = true) {
        const meta = this._cachedMeta;
        const data = meta.data;
        const end = start + count;
        let i;
        const move = (arr)=>{
            arr.length += count;
            for(i = arr.length - 1; i >= end; i--)arr[i] = arr[i - count];
        };
        move(data);
        for(i = start; i < end; ++i)data[i] = new this.dataElementType();
        if (this._parsing) move(meta._parsed);
        this.parse(start, count);
        if (resetNewElements) this.updateElements(data, start, count, "reset");
    }
    updateElements(element, start, count, mode) {
    }
    _removeElements(start, count) {
        const meta = this._cachedMeta;
        if (this._parsing) {
            const removed = meta._parsed.splice(start, count);
            if (meta._stacked) $df29249fe447c065$var$$a43aa20d3eb44e80$var$clearStacks(meta, removed);
        }
        meta.data.splice(start, count);
    }
    _sync(args) {
        if (this._parsing) this._syncList.push(args);
        else {
            const [method, arg1, arg2] = args;
            this[method](arg1, arg2);
        }
        this.chart._dataChanges.push([
            this.index,
            ...args
        ]);
    }
    _onDataPush() {
        const count = arguments.length;
        this._sync([
            "_insertElements",
            this.getDataset().data.length - count,
            count
        ]);
    }
    _onDataPop() {
        this._sync([
            "_removeElements",
            this._cachedMeta.data.length - 1,
            1
        ]);
    }
    _onDataShift() {
        this._sync([
            "_removeElements",
            0,
            1
        ]);
    }
    _onDataSplice(start, count) {
        if (count) this._sync([
            "_removeElements",
            start,
            count
        ]);
        const newCount = arguments.length - 2;
        if (newCount) this._sync([
            "_insertElements",
            start,
            newCount
        ]);
    }
    _onDataUnshift() {
        this._sync([
            "_insertElements",
            0,
            arguments.length
        ]);
    }
    constructor(chart, datasetIndex){
        this.chart = chart;
        this._ctx = chart.ctx;
        this.index = datasetIndex;
        this._cachedDataOpts = {
        };
        this._cachedMeta = this.getMeta();
        this._type = this._cachedMeta.type;
        this.options = undefined;
        this._parsing = false;
        this._data = undefined;
        this._objectData = undefined;
        this._sharedOptions = undefined;
        this._drawStart = undefined;
        this._drawCount = undefined;
        this.enableOptionSharing = false;
        this.supportsDecimation = false;
        this.$context = undefined;
        this._syncList = [];
        this.initialize();
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$75572ec5c55b4048.defaults = {
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$75572ec5c55b4048.prototype.datasetElementType = null;
$df29249fe447c065$var$$a43aa20d3eb44e80$export$75572ec5c55b4048.prototype.dataElementType = null;
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getAllScaleValues(scale, type) {
    if (!scale._cache.$bar) {
        const visibleMetas = scale.getMatchingVisibleMetas(type);
        let values = [];
        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++)values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));
        scale._cache.$bar = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$71511d61b312f219(values.sort((a, b)=>a - b
        ));
    }
    return scale._cache.$bar;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$computeMinSampleSize(meta) {
    const scale = meta.iScale;
    const values = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getAllScaleValues(scale, meta.type);
    let min = scale._length;
    let i, ilen, curr, prev;
    const updateMinAndPrev = ()=>{
        if (curr === 32767 || curr === -32768) return;
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$35e795649ee09318(prev)) min = Math.min(min, Math.abs(curr - prev) || min);
        prev = curr;
    };
    for(i = 0, ilen = values.length; i < ilen; ++i){
        curr = scale.getPixelForValue(values[i]);
        updateMinAndPrev();
    }
    prev = undefined;
    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){
        curr = scale.getPixelForTick(i);
        updateMinAndPrev();
    }
    return min;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$computeFitCategoryTraits(index19, ruler, options, stackCount) {
    const thickness = options.barThickness;
    let size, ratio;
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(thickness)) {
        size = ruler.min * options.categoryPercentage;
        ratio = options.barPercentage;
    } else {
        size = thickness * stackCount;
        ratio = 1;
    }
    return {
        chunk: size / stackCount,
        ratio: ratio,
        start: ruler.pixels[index19] - size / 2
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$computeFlexCategoryTraits(index20, ruler, options, stackCount) {
    const pixels = ruler.pixels;
    const curr = pixels[index20];
    let prev = index20 > 0 ? pixels[index20 - 1] : null;
    let next = index20 < pixels.length - 1 ? pixels[index20 + 1] : null;
    const percent = options.categoryPercentage;
    if (prev === null) prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
    if (next === null) next = curr + curr - prev;
    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
    const size = Math.abs(next - prev) / 2 * percent;
    return {
        chunk: size / stackCount,
        ratio: options.barPercentage,
        start: start
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseFloatBar(entry, item, vScale, i) {
    const startValue = vScale.parse(entry[0], i);
    const endValue = vScale.parse(entry[1], i);
    const min = Math.min(startValue, endValue);
    const max = Math.max(startValue, endValue);
    let barStart = min;
    let barEnd = max;
    if (Math.abs(min) > Math.abs(max)) {
        barStart = max;
        barEnd = min;
    }
    item[vScale.axis] = barEnd;
    item._custom = {
        barStart: barStart,
        barEnd: barEnd,
        start: startValue,
        end: endValue,
        min: min,
        max: max
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseValue(entry, item, vScale, i) {
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(entry)) $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseFloatBar(entry, item, vScale, i);
    else item[vScale.axis] = vScale.parse(entry, i);
    return item;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseArrayOrPrimitive(meta, data, start, count) {
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = [];
    let i, ilen, item, entry;
    for(i = start, ilen = start + count; i < ilen; ++i){
        entry = data[i];
        item = {
        };
        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
        parsed.push($df29249fe447c065$var$$a43aa20d3eb44e80$var$parseValue(entry, item, vScale, i));
    }
    return parsed;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$isFloatBar(custom) {
    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$barSign(size, vScale, actualBase) {
    if (size !== 0) return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2408f22a0fab9ae5(size);
    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$borderProps(properties) {
    let reverse, start, end, top, bottom;
    if (properties.horizontal) {
        reverse = properties.base > properties.x;
        start = "left";
        end = "right";
    } else {
        reverse = properties.base < properties.y;
        start = "bottom";
        end = "top";
    }
    if (reverse) {
        top = "end";
        bottom = "start";
    } else {
        top = "start";
        bottom = "end";
    }
    return {
        start: start,
        end: end,
        reverse: reverse,
        top: top,
        bottom: bottom
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$setBorderSkipped(properties, options, stack, index21) {
    let edge = options.borderSkipped;
    const res = {
    };
    if (!edge) {
        properties.borderSkipped = res;
        return;
    }
    const { start: start , end: end , reverse: reverse , top: top , bottom: bottom  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$borderProps(properties);
    if (edge === "middle" && stack) {
        properties.enableBorderRadius = true;
        if ((stack._top || 0) === index21) edge = top;
        else if ((stack._bottom || 0) === index21) edge = bottom;
        else {
            res[$df29249fe447c065$var$$a43aa20d3eb44e80$var$parseEdge(bottom, start, end, reverse)] = true;
            edge = top;
        }
    }
    res[$df29249fe447c065$var$$a43aa20d3eb44e80$var$parseEdge(edge, start, end, reverse)] = true;
    properties.borderSkipped = res;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseEdge(edge, a, b, reverse) {
    if (reverse) {
        edge = $df29249fe447c065$var$$a43aa20d3eb44e80$var$swap(edge, a, b);
        edge = $df29249fe447c065$var$$a43aa20d3eb44e80$var$startEnd(edge, b, a);
    } else edge = $df29249fe447c065$var$$a43aa20d3eb44e80$var$startEnd(edge, a, b);
    return edge;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$swap(orig, v1, v2) {
    return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$startEnd(v, start, end) {
    return v === "start" ? start : v === "end" ? end : v;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$setInflateAmount(properties, { inflateAmount: inflateAmount  }, ratio) {
    properties.inflateAmount = inflateAmount === "auto" ? ratio === 1 ? 0.33 : 0 : inflateAmount;
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$e97d5dc64e999004 extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$75572ec5c55b4048 {
    parsePrimitiveData(meta, data, start, count) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseArrayOrPrimitive(meta, data, start, count);
    }
    parseArrayData(meta, data, start, count) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseArrayOrPrimitive(meta, data, start, count);
    }
    parseObjectData(meta, data, start, count) {
        const { iScale: iScale , vScale: vScale  } = meta;
        const { xAxisKey: xAxisKey = "x" , yAxisKey: yAxisKey = "y"  } = this._parsing;
        const iAxisKey = iScale.axis === "x" ? xAxisKey : yAxisKey;
        const vAxisKey = vScale.axis === "x" ? xAxisKey : yAxisKey;
        const parsed = [];
        let i, ilen, item, obj;
        for(i = start, ilen = start + count; i < ilen; ++i){
            obj = data[i];
            item = {
            };
            item[iScale.axis] = iScale.parse($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2d1720544b23b823(obj, iAxisKey), i);
            parsed.push($df29249fe447c065$var$$a43aa20d3eb44e80$var$parseValue($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2d1720544b23b823(obj, vAxisKey), item, vScale, i));
        }
        return parsed;
    }
    updateRangeFromParsed(range, scale, parsed, stack) {
        super.updateRangeFromParsed(range, scale, parsed, stack);
        const custom = parsed._custom;
        if (custom && scale === this._cachedMeta.vScale) {
            range.min = Math.min(range.min, custom.min);
            range.max = Math.max(range.max, custom.max);
        }
    }
    getMaxOverflow() {
        return 0;
    }
    getLabelAndValue(index22) {
        const meta = this._cachedMeta;
        const { iScale: iScale , vScale: vScale  } = meta;
        const parsed = this.getParsed(index22);
        const custom = parsed._custom;
        const value = $df29249fe447c065$var$$a43aa20d3eb44e80$var$isFloatBar(custom) ? "[" + custom.start + ", " + custom.end + "]" : "" + vScale.getLabelForValue(parsed[vScale.axis]);
        return {
            label: "" + iScale.getLabelForValue(parsed[iScale.axis]),
            value: value
        };
    }
    initialize() {
        this.enableOptionSharing = true;
        super.initialize();
        const meta = this._cachedMeta;
        meta.stack = this.getDataset().stack;
    }
    update(mode) {
        const meta = this._cachedMeta;
        this.updateElements(meta.data, 0, meta.data.length, mode);
    }
    updateElements(bars, start, count, mode) {
        const reset = mode === "reset";
        const { index: index23 , _cachedMeta: { vScale: vScale  }  } = this;
        const base = vScale.getBasePixel();
        const horizontal = vScale.isHorizontal();
        const ruler = this._getRuler();
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
        for(let i = start; i < start + count; i++){
            const parsed = this.getParsed(i);
            const vpixels = reset || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(parsed[vScale.axis]) ? {
                base: base,
                head: base
            } : this._calculateBarValuePixels(i);
            const ipixels = this._calculateBarIndexPixels(i, ruler);
            const stack = (parsed._stacks || {
            })[vScale.axis];
            const properties = {
                horizontal: horizontal,
                base: vpixels.base,
                enableBorderRadius: !stack || $df29249fe447c065$var$$a43aa20d3eb44e80$var$isFloatBar(parsed._custom) || index23 === stack._top || index23 === stack._bottom,
                x: horizontal ? vpixels.head : ipixels.center,
                y: horizontal ? ipixels.center : vpixels.head,
                height: horizontal ? ipixels.size : Math.abs(vpixels.size),
                width: horizontal ? Math.abs(vpixels.size) : ipixels.size
            };
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? "active" : mode);
            const options = properties.options || bars[i].options;
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$setBorderSkipped(properties, options, stack, index23);
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$setInflateAmount(properties, options, ruler.ratio);
            this.updateElement(bars[i], i, properties, mode);
        }
    }
    _getStacks(last, dataIndex) {
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const metasets = iScale.getMatchingVisibleMetas(this._type);
        const stacked = iScale.options.stacked;
        const ilen = metasets.length;
        const stacks = [];
        let i, item;
        for(i = 0; i < ilen; ++i){
            item = metasets[i];
            if (!item.controller.options.grouped) continue;
            if (typeof dataIndex !== "undefined") {
                const val = item.controller.getParsed(dataIndex)[item.controller._cachedMeta.vScale.axis];
                if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(val) || isNaN(val)) continue;
            }
            if (stacked === false || stacks.indexOf(item.stack) === -1 || stacked === undefined && item.stack === undefined) stacks.push(item.stack);
            if (item.index === last) break;
        }
        if (!stacks.length) stacks.push(undefined);
        return stacks;
    }
    _getStackCount(index24) {
        return this._getStacks(undefined, index24).length;
    }
    _getStackIndex(datasetIndex, name, dataIndex) {
        const stacks = this._getStacks(datasetIndex, dataIndex);
        const index25 = name !== undefined ? stacks.indexOf(name) : -1;
        return index25 === -1 ? stacks.length - 1 : index25;
    }
    _getRuler() {
        const opts = this.options;
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const pixels = [];
        let i, ilen;
        for(i = 0, ilen = meta.data.length; i < ilen; ++i)pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
        const barThickness = opts.barThickness;
        const min = barThickness || $df29249fe447c065$var$$a43aa20d3eb44e80$var$computeMinSampleSize(meta);
        return {
            min: min,
            pixels: pixels,
            start: iScale._startPixel,
            end: iScale._endPixel,
            stackCount: this._getStackCount(),
            scale: iScale,
            grouped: opts.grouped,
            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
        };
    }
    _calculateBarValuePixels(index26) {
        const { _cachedMeta: { vScale: vScale , _stacked: _stacked  } , options: { base: baseValue , minBarLength: minBarLength  }  } = this;
        const actualBase = baseValue || 0;
        const parsed = this.getParsed(index26);
        const custom = parsed._custom;
        const floating = $df29249fe447c065$var$$a43aa20d3eb44e80$var$isFloatBar(custom);
        let value = parsed[vScale.axis];
        let start = 0;
        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
        let head, size;
        if (length !== value) {
            start = length - value;
            length = value;
        }
        if (floating) {
            value = custom.barStart;
            length = custom.barEnd - custom.barStart;
            if (value !== 0 && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2408f22a0fab9ae5(value) !== $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2408f22a0fab9ae5(custom.barEnd)) start = 0;
            start += value;
        }
        const startValue = !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(baseValue) && !floating ? baseValue : start;
        let base = vScale.getPixelForValue(startValue);
        if (this.chart.getDataVisibility(index26)) head = vScale.getPixelForValue(start + length);
        else head = base;
        size = head - base;
        if (Math.abs(size) < minBarLength) {
            size = $df29249fe447c065$var$$a43aa20d3eb44e80$var$barSign(size, vScale, actualBase) * minBarLength;
            if (value === actualBase) base -= size / 2;
            const startPixel = vScale.getPixelForDecimal(0);
            const endPixel = vScale.getPixelForDecimal(1);
            const min = Math.min(startPixel, endPixel);
            const max = Math.max(startPixel, endPixel);
            base = Math.max(Math.min(base, max), min);
            head = base + size;
        }
        if (base === vScale.getPixelForValue(actualBase)) {
            const halfGrid = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2408f22a0fab9ae5(size) * vScale.getLineWidthForValue(actualBase) / 2;
            base += halfGrid;
            size -= halfGrid;
        }
        return {
            size: size,
            base: base,
            head: head,
            center: head + size / 2
        };
    }
    _calculateBarIndexPixels(index27, ruler) {
        const scale = ruler.scale;
        const options = this.options;
        const skipNull = options.skipNull;
        const maxBarThickness = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(options.maxBarThickness, Infinity);
        let center, size;
        if (ruler.grouped) {
            const stackCount = skipNull ? this._getStackCount(index27) : ruler.stackCount;
            const range = options.barThickness === "flex" ? $df29249fe447c065$var$$a43aa20d3eb44e80$var$computeFlexCategoryTraits(index27, ruler, options, stackCount) : $df29249fe447c065$var$$a43aa20d3eb44e80$var$computeFitCategoryTraits(index27, ruler, options, stackCount);
            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index27 : undefined);
            center = range.start + range.chunk * stackIndex + range.chunk / 2;
            size = Math.min(maxBarThickness, range.chunk * range.ratio);
        } else {
            center = scale.getPixelForValue(this.getParsed(index27)[scale.axis], index27);
            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
        }
        return {
            base: center - size / 2,
            head: center + size / 2,
            center: center,
            size: size
        };
    }
    draw() {
        const meta = this._cachedMeta;
        const vScale = meta.vScale;
        const rects = meta.data;
        const ilen = rects.length;
        let i = 0;
        for(; i < ilen; ++i)if (this.getParsed(i)[vScale.axis] !== null) rects[i].draw(this._ctx);
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$e97d5dc64e999004.id = "bar";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$e97d5dc64e999004.defaults = {
    datasetElementType: false,
    dataElementType: "bar",
    categoryPercentage: 0.8,
    barPercentage: 0.9,
    grouped: true,
    animations: {
        numbers: {
            type: "number",
            properties: [
                "x",
                "y",
                "base",
                "width",
                "height"
            ]
        }
    }
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$e97d5dc64e999004.overrides = {
    scales: {
        _index_: {
            type: "category",
            offset: true,
            grid: {
                offset: true
            }
        },
        _value_: {
            type: "linear",
            beginAtZero: true
        }
    }
};
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$19b5c4773f17abe extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$75572ec5c55b4048 {
    initialize() {
        this.enableOptionSharing = true;
        super.initialize();
    }
    parsePrimitiveData(meta, data, start, count) {
        const parsed = super.parsePrimitiveData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++)parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;
        return parsed;
    }
    parseArrayData(meta, data, start, count) {
        const parsed = super.parseArrayData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++){
            const item = data[start + i];
            parsed[i]._custom = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(item[2], this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
    }
    parseObjectData(meta, data, start, count) {
        const parsed = super.parseObjectData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++){
            const item = data[start + i];
            parsed[i]._custom = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
    }
    getMaxOverflow() {
        const data = this._cachedMeta.data;
        let max = 0;
        for(let i = data.length - 1; i >= 0; --i)max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
        return max > 0 && max;
    }
    getLabelAndValue(index28) {
        const meta = this._cachedMeta;
        const { xScale: xScale , yScale: yScale  } = meta;
        const parsed = this.getParsed(index28);
        const x = xScale.getLabelForValue(parsed.x);
        const y = yScale.getLabelForValue(parsed.y);
        const r = parsed._custom;
        return {
            label: meta.label,
            value: "(" + x + ", " + y + (r ? ", " + r : "") + ")"
        };
    }
    update(mode) {
        const points = this._cachedMeta.data;
        this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start, count, mode) {
        const reset = mode === "reset";
        const { iScale: iScale , vScale: vScale  } = this._cachedMeta;
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        for(let i = start; i < start + count; i++){
            const point = points[i];
            const parsed = !reset && this.getParsed(i);
            const properties = {
            };
            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
            properties.skip = isNaN(iPixel) || isNaN(vPixel);
            if (includeOptions) {
                properties.options = this.resolveDataElementOptions(i, point.active ? "active" : mode);
                if (reset) properties.options.radius = 0;
            }
            this.updateElement(point, i, properties, mode);
        }
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
    }
    resolveDataElementOptions(index29, mode) {
        const parsed = this.getParsed(index29);
        let values = super.resolveDataElementOptions(index29, mode);
        if (values.$shared) values = Object.assign({
        }, values, {
            $shared: false
        });
        const radius = values.radius;
        if (mode !== "active") values.radius = 0;
        values.radius += $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(parsed && parsed._custom, radius);
        return values;
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$19b5c4773f17abe.id = "bubble";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$19b5c4773f17abe.defaults = {
    datasetElementType: false,
    dataElementType: "point",
    animations: {
        numbers: {
            type: "number",
            properties: [
                "x",
                "y",
                "borderWidth",
                "radius"
            ]
        }
    }
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$19b5c4773f17abe.overrides = {
    scales: {
        x: {
            type: "linear"
        },
        y: {
            type: "linear"
        }
    },
    plugins: {
        tooltip: {
            callbacks: {
                title () {
                    return "";
                }
            }
        }
    }
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getRatioAndOffset(rotation, circumference, cutout) {
    let ratioX = 1;
    let ratioY = 1;
    let offsetX = 0;
    let offsetY = 0;
    if (circumference < $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7) {
        const startAngle = rotation;
        const endAngle = startAngle + circumference;
        const startX = Math.cos(startAngle);
        const startY = Math.sin(startAngle);
        const endX = Math.cos(endAngle);
        const endY = Math.sin(endAngle);
        const calcMax = (angle, a, b)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ffb5f4729a158638(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout)
        ;
        const calcMin = (angle, a, b)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ffb5f4729a158638(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout)
        ;
        const maxX = calcMax(0, startX, endX);
        const maxY = calcMax($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd, startY, endY);
        const minX = calcMin($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d, startX, endX);
        const minY = calcMin($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd, startY, endY);
        ratioX = (maxX - minX) / 2;
        ratioY = (maxY - minY) / 2;
        offsetX = -(maxX + minX) / 2;
        offsetY = -(maxY + minY) / 2;
    }
    return {
        ratioX: ratioX,
        ratioY: ratioY,
        offsetX: offsetX,
        offsetY: offsetY
    };
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$e04603e7d8b77172 extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$75572ec5c55b4048 {
    linkScales() {
    }
    parse(start, count) {
        const data = this.getDataset().data;
        const meta = this._cachedMeta;
        if (this._parsing === false) meta._parsed = data;
        else {
            let getter = (i)=>+data[i]
            ;
            if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(data[start])) {
                const { key: key = "value"  } = this._parsing;
                getter = (i)=>+$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2d1720544b23b823(data[i], key)
                ;
            }
            let i1, ilen;
            for(i1 = start, ilen = start + count; i1 < ilen; ++i1)meta._parsed[i1] = getter(i1);
        }
    }
    _getRotation() {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$625550452a3fa3ec(this.options.rotation - 90);
    }
    _getCircumference() {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$625550452a3fa3ec(this.options.circumference);
    }
    _getRotationExtents() {
        let min = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7;
        let max = -$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7;
        for(let i = 0; i < this.chart.data.datasets.length; ++i)if (this.chart.isDatasetVisible(i)) {
            const controller = this.chart.getDatasetMeta(i).controller;
            const rotation = controller._getRotation();
            const circumference = controller._getCircumference();
            min = Math.min(min, rotation);
            max = Math.max(max, rotation + circumference);
        }
        return {
            rotation: min,
            circumference: max - min
        };
    }
    update(mode) {
        const chart = this.chart;
        const { chartArea: chartArea  } = chart;
        const meta = this._cachedMeta;
        const arcs = meta.data;
        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
        const cutout = Math.min($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$953cecd6e717a553(this.options.cutout, maxSize), 1);
        const chartWeight = this._getRingWeight(this.index);
        const { circumference: circumference , rotation: rotation  } = this._getRotationExtents();
        const { ratioX: ratioX , ratioY: ratioY , offsetX: offsetX , offsetY: offsetY  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getRatioAndOffset(rotation, circumference, cutout);
        const maxWidth = (chartArea.width - spacing) / ratioX;
        const maxHeight = (chartArea.height - spacing) / ratioY;
        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
        const outerRadius = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7ccc53e8f1e7dfc5(this.options.radius, maxRadius);
        const innerRadius = Math.max(outerRadius * cutout, 0);
        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
        this.offsetX = offsetX * outerRadius;
        this.offsetY = offsetY * outerRadius;
        meta.total = this.calculateTotal();
        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
        this.updateElements(arcs, 0, arcs.length, mode);
    }
    _circumference(i, reset) {
        const opts = this.options;
        const meta = this._cachedMeta;
        const circumference = this._getCircumference();
        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) return 0;
        return this.calculateCircumference(meta._parsed[i] * circumference / $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7);
    }
    updateElements(arcs, start, count, mode) {
        const reset = mode === "reset";
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const centerX = (chartArea.left + chartArea.right) / 2;
        const centerY = (chartArea.top + chartArea.bottom) / 2;
        const animateScale = reset && animationOpts.animateScale;
        const innerRadius = animateScale ? 0 : this.innerRadius;
        const outerRadius = animateScale ? 0 : this.outerRadius;
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        let startAngle = this._getRotation();
        let i;
        for(i = 0; i < start; ++i)startAngle += this._circumference(i, reset);
        for(i = start; i < start + count; ++i){
            const circumference = this._circumference(i, reset);
            const arc = arcs[i];
            const properties = {
                x: centerX + this.offsetX,
                y: centerY + this.offsetY,
                startAngle: startAngle,
                endAngle: startAngle + circumference,
                circumference: circumference,
                outerRadius: outerRadius,
                innerRadius: innerRadius
            };
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? "active" : mode);
            startAngle += circumference;
            this.updateElement(arc, i, properties, mode);
        }
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
    }
    calculateTotal() {
        const meta = this._cachedMeta;
        const metaData = meta.data;
        let total = 0;
        let i;
        for(i = 0; i < metaData.length; i++){
            const value = meta._parsed[i];
            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) total += Math.abs(value);
        }
        return total;
    }
    calculateCircumference(value) {
        const total = this._cachedMeta.total;
        if (total > 0 && !isNaN(value)) return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7 * (Math.abs(value) / total);
        return 0;
    }
    getLabelAndValue(index30) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ae1af26003f05816(meta._parsed[index30], chart.options.locale);
        return {
            label: labels[index30] || "",
            value: value
        };
    }
    getMaxBorderWidth(arcs) {
        let max = 0;
        const chart = this.chart;
        let i, ilen, meta, controller, options;
        if (!arcs) {
            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i)if (chart.isDatasetVisible(i)) {
                meta = chart.getDatasetMeta(i);
                arcs = meta.data;
                controller = meta.controller;
                break;
            }
        }
        if (!arcs) return 0;
        for(i = 0, ilen = arcs.length; i < ilen; ++i){
            options = controller.resolveDataElementOptions(i);
            if (options.borderAlign !== "inner") max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
        }
        return max;
    }
    getMaxOffset(arcs) {
        let max = 0;
        for(let i = 0, ilen = arcs.length; i < ilen; ++i){
            const options = this.resolveDataElementOptions(i);
            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
        }
        return max;
    }
    _getRingWeightOffset(datasetIndex) {
        let ringWeightOffset = 0;
        for(let i = 0; i < datasetIndex; ++i)if (this.chart.isDatasetVisible(i)) ringWeightOffset += this._getRingWeight(i);
        return ringWeightOffset;
    }
    _getRingWeight(datasetIndex) {
        return Math.max($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(this.chart.data.datasets[datasetIndex].weight, 1), 0);
    }
    _getVisibleDatasetWeightTotal() {
        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
    }
    constructor(chart, datasetIndex){
        super(chart, datasetIndex);
        this.enableOptionSharing = true;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.offsetX = undefined;
        this.offsetY = undefined;
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$e04603e7d8b77172.id = "doughnut";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$e04603e7d8b77172.defaults = {
    datasetElementType: false,
    dataElementType: "arc",
    animation: {
        animateRotate: true,
        animateScale: false
    },
    animations: {
        numbers: {
            type: "number",
            properties: [
                "circumference",
                "endAngle",
                "innerRadius",
                "outerRadius",
                "startAngle",
                "x",
                "y",
                "offset",
                "borderWidth",
                "spacing"
            ]
        }
    },
    cutout: "50%",
    rotation: 0,
    circumference: 360,
    radius: "100%",
    spacing: 0,
    indexAxis: "r"
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$e04603e7d8b77172.descriptors = {
    _scriptable: (name)=>name !== "spacing"
    ,
    _indexable: (name)=>name !== "spacing"
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$e04603e7d8b77172.overrides = {
    aspectRatio: 1,
    plugins: {
        legend: {
            labels: {
                generateLabels (chart) {
                    const data = chart.data;
                    if (data.labels.length && data.datasets.length) {
                        const { labels: { pointStyle: pointStyle  }  } = chart.legend.options;
                        return data.labels.map((label, i)=>{
                            const meta = chart.getDatasetMeta(0);
                            const style = meta.controller.getStyle(i);
                            return {
                                text: label,
                                fillStyle: style.backgroundColor,
                                strokeStyle: style.borderColor,
                                lineWidth: style.borderWidth,
                                pointStyle: pointStyle,
                                hidden: !chart.getDataVisibility(i),
                                index: i
                            };
                        });
                    }
                    return [];
                }
            },
            onClick (e, legendItem, legend) {
                legend.chart.toggleDataVisibility(legendItem.index);
                legend.chart.update();
            }
        },
        tooltip: {
            callbacks: {
                title () {
                    return "";
                },
                label (tooltipItem) {
                    let dataLabel = tooltipItem.label;
                    const value = ": " + tooltipItem.formattedValue;
                    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(dataLabel)) {
                        dataLabel = dataLabel.slice();
                        dataLabel[0] += value;
                    } else dataLabel += value;
                    return dataLabel;
                }
            }
        }
    }
};
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$3c9b5d28c11cbfd0 extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$75572ec5c55b4048 {
    initialize() {
        this.enableOptionSharing = true;
        this.supportsDecimation = true;
        super.initialize();
    }
    update(mode) {
        const meta = this._cachedMeta;
        const { dataset: line , data: points = [] , _dataset: _dataset  } = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let { start: start , count: count  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if ($df29249fe447c065$var$$a43aa20d3eb44e80$var$scaleRangesChanged(meta)) {
            start = 0;
            count = points.length;
        }
        line._chart = this.chart;
        line._datasetIndex = this.index;
        line._decimated = !!_dataset._decimated;
        line.points = points;
        const options = this.resolveDatasetElementOptions(mode);
        if (!this.options.showLine) options.borderWidth = 0;
        options.segment = this.options.segment;
        this.updateElement(line, undefined, {
            animated: !animationsDisabled,
            options: options
        }, mode);
        this.updateElements(points, start, count, mode);
    }
    updateElements(points, start, count, mode) {
        const reset = mode === "reset";
        const { iScale: iScale , vScale: vScale , _stacked: _stacked , _dataset: _dataset  } = this._cachedMeta;
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const { spanGaps: spanGaps , segment: segment  } = this.options;
        const maxGapLength = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9e5f44173e64f162(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for(let i = start; i < start + count; ++i){
            const point = points[i];
            const parsed = this.getParsed(i);
            const properties = directUpdate ? point : {
            };
            const nullData = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(parsed[vAxis]);
            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
            if (segment) {
                properties.parsed = parsed;
                properties.raw = _dataset.data[i];
            }
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode);
            if (!directUpdate) this.updateElement(point, i, properties, mode);
            prevParsed = parsed;
        }
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
    }
    getMaxOverflow() {
        const meta = this._cachedMeta;
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        const data = meta.data || [];
        if (!data.length) return border;
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
    }
    draw() {
        const meta = this._cachedMeta;
        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
        super.draw();
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$3c9b5d28c11cbfd0.id = "line";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$3c9b5d28c11cbfd0.defaults = {
    datasetElementType: "line",
    dataElementType: "point",
    showLine: true,
    spanGaps: false
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$3c9b5d28c11cbfd0.overrides = {
    scales: {
        _index_: {
            type: "category"
        },
        _value_: {
            type: "linear"
        }
    }
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
    const pointCount = points.length;
    let start = 0;
    let count = pointCount;
    if (meta._sorted) {
        const { iScale: iScale , _parsed: _parsed  } = meta;
        const axis = iScale.axis;
        const { min: min , max: max , minDefined: minDefined , maxDefined: maxDefined  } = iScale.getUserBounds();
        if (minDefined) start = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(Math.min($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d141bba7fdc215a3(_parsed, iScale.axis, min).lo, animationsDisabled ? pointCount : $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d141bba7fdc215a3(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);
        if (maxDefined) count = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(Math.max($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d141bba7fdc215a3(_parsed, iScale.axis, max).hi + 1, animationsDisabled ? 0 : $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d141bba7fdc215a3(points, axis, iScale.getPixelForValue(max)).hi + 1), start, pointCount) - start;
        else count = pointCount - start;
    }
    return {
        start: start,
        count: count
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$scaleRangesChanged(meta) {
    const { xScale: xScale , yScale: yScale , _scaleRanges: _scaleRanges  } = meta;
    const newRanges = {
        xmin: xScale.min,
        xmax: xScale.max,
        ymin: yScale.min,
        ymax: yScale.max
    };
    if (!_scaleRanges) {
        meta._scaleRanges = newRanges;
        return true;
    }
    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
    Object.assign(_scaleRanges, newRanges);
    return changed;
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$2a270b3a0d973c85 extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$75572ec5c55b4048 {
    getLabelAndValue(index31) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ae1af26003f05816(meta._parsed[index31].r, chart.options.locale);
        return {
            label: labels[index31] || "",
            value: value
        };
    }
    parseObjectData(meta, data, start, count) {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4a5767248b18ef41.bind(this)(meta, data, start, count);
    }
    update(mode) {
        const arcs = this._cachedMeta.data;
        this._updateRadius();
        this.updateElements(arcs, 0, arcs.length, mode);
    }
    getMinMax() {
        const meta = this._cachedMeta;
        const range = {
            min: Number.POSITIVE_INFINITY,
            max: Number.NEGATIVE_INFINITY
        };
        meta.data.forEach((element, index32)=>{
            const parsed = this.getParsed(index32).r;
            if (!isNaN(parsed) && this.chart.getDataVisibility(index32)) {
                if (parsed < range.min) range.min = parsed;
                if (parsed > range.max) range.max = parsed;
            }
        });
        return range;
    }
    _updateRadius() {
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
        const outerRadius = Math.max(minSize / 2, 0);
        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
        this.outerRadius = outerRadius - radiusLength * this.index;
        this.innerRadius = this.outerRadius - radiusLength;
    }
    updateElements(arcs, start, count, mode) {
        const reset = mode === "reset";
        const chart = this.chart;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const scale = this._cachedMeta.rScale;
        const centerX = scale.xCenter;
        const centerY = scale.yCenter;
        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d;
        let angle = datasetStartAngle;
        let i;
        const defaultAngle = 360 / this.countVisibleElements();
        for(i = 0; i < start; ++i)angle += this._computeAngle(i, mode, defaultAngle);
        for(i = start; i < start + count; i++){
            const arc = arcs[i];
            let startAngle = angle;
            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);
            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;
            angle = endAngle;
            if (reset) {
                if (animationOpts.animateScale) outerRadius = 0;
                if (animationOpts.animateRotate) startAngle = endAngle = datasetStartAngle;
            }
            const properties = {
                x: centerX,
                y: centerY,
                innerRadius: 0,
                outerRadius: outerRadius,
                startAngle: startAngle,
                endAngle: endAngle,
                options: this.resolveDataElementOptions(i, arc.active ? "active" : mode)
            };
            this.updateElement(arc, i, properties, mode);
        }
    }
    countVisibleElements() {
        const meta = this._cachedMeta;
        let count = 0;
        meta.data.forEach((element, index33)=>{
            if (!isNaN(this.getParsed(index33).r) && this.chart.getDataVisibility(index33)) count++;
        });
        return count;
    }
    _computeAngle(index34, mode, defaultAngle) {
        return this.chart.getDataVisibility(index34) ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$625550452a3fa3ec(this.resolveDataElementOptions(index34, mode).angle || defaultAngle) : 0;
    }
    constructor(chart, datasetIndex){
        super(chart, datasetIndex);
        this.innerRadius = undefined;
        this.outerRadius = undefined;
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$2a270b3a0d973c85.id = "polarArea";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$2a270b3a0d973c85.defaults = {
    dataElementType: "arc",
    animation: {
        animateRotate: true,
        animateScale: true
    },
    animations: {
        numbers: {
            type: "number",
            properties: [
                "x",
                "y",
                "startAngle",
                "endAngle",
                "innerRadius",
                "outerRadius"
            ]
        }
    },
    indexAxis: "r",
    startAngle: 0
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$2a270b3a0d973c85.overrides = {
    aspectRatio: 1,
    plugins: {
        legend: {
            labels: {
                generateLabels (chart) {
                    const data = chart.data;
                    if (data.labels.length && data.datasets.length) {
                        const { labels: { pointStyle: pointStyle  }  } = chart.legend.options;
                        return data.labels.map((label, i)=>{
                            const meta = chart.getDatasetMeta(0);
                            const style = meta.controller.getStyle(i);
                            return {
                                text: label,
                                fillStyle: style.backgroundColor,
                                strokeStyle: style.borderColor,
                                lineWidth: style.borderWidth,
                                pointStyle: pointStyle,
                                hidden: !chart.getDataVisibility(i),
                                index: i
                            };
                        });
                    }
                    return [];
                }
            },
            onClick (e, legendItem, legend) {
                legend.chart.toggleDataVisibility(legendItem.index);
                legend.chart.update();
            }
        },
        tooltip: {
            callbacks: {
                title () {
                    return "";
                },
                label (context) {
                    return context.chart.data.labels[context.dataIndex] + ": " + context.formattedValue;
                }
            }
        }
    },
    scales: {
        r: {
            type: "radialLinear",
            angleLines: {
                display: false
            },
            beginAtZero: true,
            grid: {
                circular: true
            },
            pointLabels: {
                display: false
            },
            startAngle: 0
        }
    }
};
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$b21a3f1286706191 extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$e04603e7d8b77172 {
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$b21a3f1286706191.id = "pie";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$b21a3f1286706191.defaults = {
    cutout: 0,
    rotation: 0,
    circumference: 360,
    radius: "100%"
};
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$48dbc6ac651bf8be extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$75572ec5c55b4048 {
    getLabelAndValue(index35) {
        const vScale = this._cachedMeta.vScale;
        const parsed = this.getParsed(index35);
        return {
            label: vScale.getLabels()[index35],
            value: "" + vScale.getLabelForValue(parsed[vScale.axis])
        };
    }
    parseObjectData(meta, data, start, count) {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4a5767248b18ef41.bind(this)(meta, data, start, count);
    }
    update(mode) {
        const meta = this._cachedMeta;
        const line = meta.dataset;
        const points = meta.data || [];
        const labels = meta.iScale.getLabels();
        line.points = points;
        if (mode !== "resize") {
            const options = this.resolveDatasetElementOptions(mode);
            if (!this.options.showLine) options.borderWidth = 0;
            const properties = {
                _loop: true,
                _fullLoop: labels.length === points.length,
                options: options
            };
            this.updateElement(line, undefined, properties, mode);
        }
        this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start, count, mode) {
        const scale = this._cachedMeta.rScale;
        const reset = mode === "reset";
        for(let i = start; i < start + count; i++){
            const point = points[i];
            const options = this.resolveDataElementOptions(i, point.active ? "active" : mode);
            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);
            const x = reset ? scale.xCenter : pointPosition.x;
            const y = reset ? scale.yCenter : pointPosition.y;
            const properties = {
                x: x,
                y: y,
                angle: pointPosition.angle,
                skip: isNaN(x) || isNaN(y),
                options: options
            };
            this.updateElement(point, i, properties, mode);
        }
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$48dbc6ac651bf8be.id = "radar";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$48dbc6ac651bf8be.defaults = {
    datasetElementType: "line",
    dataElementType: "point",
    indexAxis: "r",
    showLine: true,
    elements: {
        line: {
            fill: "start"
        }
    }
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$48dbc6ac651bf8be.overrides = {
    aspectRatio: 1,
    scales: {
        r: {
            type: "radialLinear"
        }
    }
};
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$b2f2bae6713db87 extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$3c9b5d28c11cbfd0 {
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$b2f2bae6713db87.id = "scatter";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$b2f2bae6713db87.defaults = {
    showLine: false,
    fill: false
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$b2f2bae6713db87.overrides = {
    interaction: {
        mode: "point"
    },
    plugins: {
        tooltip: {
            callbacks: {
                title () {
                    return "";
                },
                label (item) {
                    return "(" + item.label + ", " + item.formattedValue + ")";
                }
            }
        }
    },
    scales: {
        x: {
            type: "linear"
        },
        y: {
            type: "linear"
        }
    }
};
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$a6506504f799c5d5 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    BarController: $df29249fe447c065$var$$a43aa20d3eb44e80$export$e97d5dc64e999004,
    BubbleController: $df29249fe447c065$var$$a43aa20d3eb44e80$export$19b5c4773f17abe,
    DoughnutController: $df29249fe447c065$var$$a43aa20d3eb44e80$export$e04603e7d8b77172,
    LineController: $df29249fe447c065$var$$a43aa20d3eb44e80$export$3c9b5d28c11cbfd0,
    PolarAreaController: $df29249fe447c065$var$$a43aa20d3eb44e80$export$2a270b3a0d973c85,
    PieController: $df29249fe447c065$var$$a43aa20d3eb44e80$export$b21a3f1286706191,
    RadarController: $df29249fe447c065$var$$a43aa20d3eb44e80$export$48dbc6ac651bf8be,
    ScatterController: $df29249fe447c065$var$$a43aa20d3eb44e80$export$b2f2bae6713db87
});
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$abstract() {
    throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$var$DateAdapter {
    formats() {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$abstract();
    }
    parse(value, format) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$abstract();
    }
    format(timestamp, format) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$abstract();
    }
    add(timestamp, amount, unit) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$abstract();
    }
    diff(a, b, unit) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$abstract();
    }
    startOf(timestamp, unit, weekday) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$abstract();
    }
    endOf(timestamp, unit) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$abstract();
    }
    constructor(options){
        this.options = options || {
        };
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$var$DateAdapter.override = function(members) {
    Object.assign($df29249fe447c065$var$$a43aa20d3eb44e80$var$DateAdapter.prototype, members);
};
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$f32766ea09ec8bc4 = {
    _date: $df29249fe447c065$var$$a43aa20d3eb44e80$var$DateAdapter
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$binarySearch(metaset, axis, value, intersect) {
    const { controller: controller , data: data , _sorted: _sorted  } = metaset;
    const iScale = controller._cachedMeta.iScale;
    if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
        const lookupMethod = iScale._reversePixels ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ebd11618f299a286 : $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d141bba7fdc215a3;
        if (!intersect) return lookupMethod(data, axis, value);
        else if (controller._sharedOptions) {
            const el = data[0];
            const range = typeof el.getRange === "function" && el.getRange(axis);
            if (range) {
                const start = lookupMethod(data, axis, value - range);
                const end = lookupMethod(data, axis, value + range);
                return {
                    lo: start.lo,
                    hi: end.hi
                };
            }
        }
    }
    return {
        lo: 0,
        hi: data.length - 1
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$evaluateInteractionItems(chart, axis, position, handler, intersect) {
    const metasets = chart.getSortedVisibleDatasetMetas();
    const value = position[axis];
    for(let i = 0, ilen = metasets.length; i < ilen; ++i){
        const { index: index36 , data: data  } = metasets[i];
        const { lo: lo , hi: hi  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$binarySearch(metasets[i], axis, value, intersect);
        for(let j = lo; j <= hi; ++j){
            const element = data[j];
            if (!element.skip) handler(element, index36, j);
        }
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getDistanceMetricForAxis(axis) {
    const useX = axis.indexOf("x") !== -1;
    const useY = axis.indexOf("y") !== -1;
    return function(pt1, pt2) {
        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
    const items = [];
    if (!includeInvisible && !chart.isPointInArea(position)) return items;
    const evaluationFunc = function(element, datasetIndex, index37) {
        if (!includeInvisible && !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ef35774e6d314e91(element, chart.chartArea, 0)) return;
        if (element.inRange(position.x, position.y, useFinalPosition)) items.push({
            element: element,
            datasetIndex: datasetIndex,
            index: index37
        });
    };
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
    return items;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getNearestRadialItems(chart, position, axis, useFinalPosition) {
    let items = [];
    function evaluationFunc(element, datasetIndex, index38) {
        const { startAngle: startAngle , endAngle: endAngle  } = element.getProps([
            "startAngle",
            "endAngle"
        ], useFinalPosition);
        const { angle: angle  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$e7094788287c5e9b(element, {
            x: position.x,
            y: position.y
        });
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ffb5f4729a158638(angle, startAngle, endAngle)) items.push({
            element: element,
            datasetIndex: datasetIndex,
            index: index38
        });
    }
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    let items = [];
    const distanceMetric = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getDistanceMetricForAxis(axis);
    let minDistance = Number.POSITIVE_INFINITY;
    function evaluationFunc(element, datasetIndex, index39) {
        const inRange1 = element.inRange(position.x, position.y, useFinalPosition);
        if (intersect && !inRange1) return;
        const center = element.getCenterPoint(useFinalPosition);
        const pointInArea = !!includeInvisible || chart.isPointInArea(center);
        if (!pointInArea && !inRange1) return;
        const distance = distanceMetric(position, center);
        if (distance < minDistance) {
            items = [
                {
                    element: element,
                    datasetIndex: datasetIndex,
                    index: index39
                }
            ];
            minDistance = distance;
        } else if (distance === minDistance) items.push({
            element: element,
            datasetIndex: datasetIndex,
            index: index39
        });
    }
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    if (!includeInvisible && !chart.isPointInArea(position)) return [];
    return axis === "r" && !intersect ? $df29249fe447c065$var$$a43aa20d3eb44e80$var$getNearestRadialItems(chart, position, axis, useFinalPosition) : $df29249fe447c065$var$$a43aa20d3eb44e80$var$getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getAxisItems(chart, position, axis, intersect, useFinalPosition) {
    const items = [];
    const rangeMethod = axis === "x" ? "inXRange" : "inYRange";
    let intersectsItem = false;
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index40)=>{
        if (element[rangeMethod](position[axis], useFinalPosition)) {
            items.push({
                element: element,
                datasetIndex: datasetIndex,
                index: index40
            });
            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
        }
    });
    if (intersect && !intersectsItem) return [];
    return items;
}
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$a13296960cae0384 = {
    evaluateInteractionItems: $df29249fe447c065$var$$a43aa20d3eb44e80$var$evaluateInteractionItems,
    modes: {
        index (chart, e, options, useFinalPosition) {
            const position = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$df995fae86a55f06(e, chart);
            const axis = options.axis || "x";
            const includeInvisible = options.includeInvisible || false;
            const items = options.intersect ? $df29249fe447c065$var$$a43aa20d3eb44e80$var$getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : $df29249fe447c065$var$$a43aa20d3eb44e80$var$getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
            const elements3 = [];
            if (!items.length) return [];
            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{
                const index41 = items[0].index;
                const element = meta.data[index41];
                if (element && !element.skip) elements3.push({
                    element: element,
                    datasetIndex: meta.index,
                    index: index41
                });
            });
            return elements3;
        },
        dataset (chart, e, options, useFinalPosition) {
            const position = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$df995fae86a55f06(e, chart);
            const axis = options.axis || "xy";
            const includeInvisible = options.includeInvisible || false;
            let items = options.intersect ? $df29249fe447c065$var$$a43aa20d3eb44e80$var$getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : $df29249fe447c065$var$$a43aa20d3eb44e80$var$getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
            if (items.length > 0) {
                const datasetIndex = items[0].datasetIndex;
                const data = chart.getDatasetMeta(datasetIndex).data;
                items = [];
                for(let i = 0; i < data.length; ++i)items.push({
                    element: data[i],
                    datasetIndex: datasetIndex,
                    index: i
                });
            }
            return items;
        },
        point (chart, e, options, useFinalPosition) {
            const position = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$df995fae86a55f06(e, chart);
            const axis = options.axis || "xy";
            const includeInvisible = options.includeInvisible || false;
            return $df29249fe447c065$var$$a43aa20d3eb44e80$var$getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
        },
        nearest (chart, e, options, useFinalPosition) {
            const position = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$df995fae86a55f06(e, chart);
            const axis = options.axis || "xy";
            const includeInvisible = options.includeInvisible || false;
            return $df29249fe447c065$var$$a43aa20d3eb44e80$var$getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
        },
        x (chart, e, options, useFinalPosition) {
            const position = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$df995fae86a55f06(e, chart);
            return $df29249fe447c065$var$$a43aa20d3eb44e80$var$getAxisItems(chart, position, "x", options.intersect, useFinalPosition);
        },
        y (chart, e, options, useFinalPosition) {
            const position = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$df995fae86a55f06(e, chart);
            return $df29249fe447c065$var$$a43aa20d3eb44e80$var$getAxisItems(chart, position, "y", options.intersect, useFinalPosition);
        }
    }
};
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$STATIC_POSITIONS = [
    "left",
    "top",
    "right",
    "bottom"
];
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$filterByPosition(array, position) {
    return array.filter((v)=>v.pos === position
    );
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$filterDynamicPositionByAxis(array, axis) {
    return array.filter((v)=>$df29249fe447c065$var$$a43aa20d3eb44e80$var$STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis
    );
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$sortByWeight(array, reverse) {
    return array.sort((a, b)=>{
        const v0 = reverse ? b : a;
        const v1 = reverse ? a : b;
        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
    });
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$wrapBoxes(boxes) {
    const layoutBoxes = [];
    let i, ilen, box, pos, stack, stackWeight;
    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){
        box = boxes[i];
        ({ position: pos , options: { stack: stack , stackWeight: stackWeight = 1  }  } = box);
        layoutBoxes.push({
            index: i,
            box: box,
            pos: pos,
            horizontal: box.isHorizontal(),
            weight: box.weight,
            stack: stack && pos + stack,
            stackWeight: stackWeight
        });
    }
    return layoutBoxes;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$buildStacks(layouts1) {
    const stacks = {
    };
    for (const wrap of layouts1){
        const { stack: stack , pos: pos , stackWeight: stackWeight  } = wrap;
        if (!stack || !$df29249fe447c065$var$$a43aa20d3eb44e80$var$STATIC_POSITIONS.includes(pos)) continue;
        const _stack = stacks[stack] || (stacks[stack] = {
            count: 0,
            placed: 0,
            weight: 0,
            size: 0
        });
        _stack.count++;
        _stack.weight += stackWeight;
    }
    return stacks;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$setLayoutDims(layouts2, params) {
    const stacks = $df29249fe447c065$var$$a43aa20d3eb44e80$var$buildStacks(layouts2);
    const { vBoxMaxWidth: vBoxMaxWidth , hBoxMaxHeight: hBoxMaxHeight  } = params;
    let i, ilen, layout;
    for(i = 0, ilen = layouts2.length; i < ilen; ++i){
        layout = layouts2[i];
        const { fullSize: fullSize  } = layout.box;
        const stack = stacks[layout.stack];
        const factor = stack && layout.stackWeight / stack.weight;
        if (layout.horizontal) {
            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
            layout.height = hBoxMaxHeight;
        } else {
            layout.width = vBoxMaxWidth;
            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
        }
    }
    return stacks;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$buildLayoutBoxes(boxes) {
    const layoutBoxes = $df29249fe447c065$var$$a43aa20d3eb44e80$var$wrapBoxes(boxes);
    const fullSize = $df29249fe447c065$var$$a43aa20d3eb44e80$var$sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize
    ), true);
    const left = $df29249fe447c065$var$$a43aa20d3eb44e80$var$sortByWeight($df29249fe447c065$var$$a43aa20d3eb44e80$var$filterByPosition(layoutBoxes, "left"), true);
    const right = $df29249fe447c065$var$$a43aa20d3eb44e80$var$sortByWeight($df29249fe447c065$var$$a43aa20d3eb44e80$var$filterByPosition(layoutBoxes, "right"));
    const top = $df29249fe447c065$var$$a43aa20d3eb44e80$var$sortByWeight($df29249fe447c065$var$$a43aa20d3eb44e80$var$filterByPosition(layoutBoxes, "top"), true);
    const bottom = $df29249fe447c065$var$$a43aa20d3eb44e80$var$sortByWeight($df29249fe447c065$var$$a43aa20d3eb44e80$var$filterByPosition(layoutBoxes, "bottom"));
    const centerHorizontal = $df29249fe447c065$var$$a43aa20d3eb44e80$var$filterDynamicPositionByAxis(layoutBoxes, "x");
    const centerVertical = $df29249fe447c065$var$$a43aa20d3eb44e80$var$filterDynamicPositionByAxis(layoutBoxes, "y");
    return {
        fullSize: fullSize,
        leftAndTop: left.concat(top),
        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
        chartArea: $df29249fe447c065$var$$a43aa20d3eb44e80$var$filterByPosition(layoutBoxes, "chartArea"),
        vertical: left.concat(right).concat(centerVertical),
        horizontal: top.concat(bottom).concat(centerHorizontal)
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getCombinedMax(maxPadding, chartArea, a, b) {
    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$updateMaxPadding(maxPadding, boxPadding) {
    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$updateDims(chartArea, params, layout, stacks) {
    const { pos: pos , box: box  } = layout;
    const maxPadding = chartArea.maxPadding;
    if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(pos)) {
        if (layout.size) chartArea[pos] -= layout.size;
        const stack = stacks[layout.stack] || {
            size: 0,
            count: 1
        };
        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
        layout.size = stack.size / stack.count;
        chartArea[pos] += layout.size;
    }
    if (box.getPadding) $df29249fe447c065$var$$a43aa20d3eb44e80$var$updateMaxPadding(maxPadding, box.getPadding());
    const newWidth = Math.max(0, params.outerWidth - $df29249fe447c065$var$$a43aa20d3eb44e80$var$getCombinedMax(maxPadding, chartArea, "left", "right"));
    const newHeight = Math.max(0, params.outerHeight - $df29249fe447c065$var$$a43aa20d3eb44e80$var$getCombinedMax(maxPadding, chartArea, "top", "bottom"));
    const widthChanged = newWidth !== chartArea.w;
    const heightChanged = newHeight !== chartArea.h;
    chartArea.w = newWidth;
    chartArea.h = newHeight;
    return layout.horizontal ? {
        same: widthChanged,
        other: heightChanged
    } : {
        same: heightChanged,
        other: widthChanged
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$handleMaxPadding(chartArea) {
    const maxPadding = chartArea.maxPadding;
    function updatePos(pos) {
        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
        chartArea[pos] += change;
        return change;
    }
    chartArea.y += updatePos("top");
    chartArea.x += updatePos("left");
    updatePos("right");
    updatePos("bottom");
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getMargins(horizontal, chartArea) {
    const maxPadding = chartArea.maxPadding;
    function marginForPositions(positions) {
        const margin = {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
        };
        positions.forEach((pos)=>{
            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
        });
        return margin;
    }
    return horizontal ? marginForPositions([
        "left",
        "right"
    ]) : marginForPositions([
        "top",
        "bottom"
    ]);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$fitBoxes(boxes, chartArea, params, stacks) {
    const refitBoxes = [];
    let i, ilen, layout, box, refit, changed;
    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){
        layout = boxes[i];
        box = layout.box;
        box.update(layout.width || chartArea.w, layout.height || chartArea.h, $df29249fe447c065$var$$a43aa20d3eb44e80$var$getMargins(layout.horizontal, chartArea));
        const { same: same , other: other  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$updateDims(chartArea, params, layout, stacks);
        refit |= same && refitBoxes.length;
        changed = changed || other;
        if (!box.fullSize) refitBoxes.push(layout);
    }
    return refit && $df29249fe447c065$var$$a43aa20d3eb44e80$var$fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$setBoxDims(box, left, top, width, height) {
    box.top = top;
    box.left = left;
    box.right = left + width;
    box.bottom = top + height;
    box.width = width;
    box.height = height;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$placeBoxes(boxes, chartArea, params, stacks) {
    const userPadding = params.padding;
    let { x: x , y: y  } = chartArea;
    for (const layout of boxes){
        const box = layout.box;
        const stack = stacks[layout.stack] || {
            count: 1,
            placed: 0,
            weight: 1
        };
        const weight = layout.stackWeight / stack.weight || 1;
        if (layout.horizontal) {
            const width = chartArea.w * weight;
            const height = stack.size || box.height;
            if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$35e795649ee09318(stack.start)) y = stack.start;
            if (box.fullSize) $df29249fe447c065$var$$a43aa20d3eb44e80$var$setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
            else $df29249fe447c065$var$$a43aa20d3eb44e80$var$setBoxDims(box, chartArea.left + stack.placed, y, width, height);
            stack.start = y;
            stack.placed += width;
            y = box.bottom;
        } else {
            const height = chartArea.h * weight;
            const width = stack.size || box.width;
            if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$35e795649ee09318(stack.start)) x = stack.start;
            if (box.fullSize) $df29249fe447c065$var$$a43aa20d3eb44e80$var$setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
            else $df29249fe447c065$var$$a43aa20d3eb44e80$var$setBoxDims(box, x, chartArea.top + stack.placed, width, height);
            stack.start = x;
            stack.placed += height;
            x = box.right;
        }
    }
    chartArea.x = x;
    chartArea.y = y;
}
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.set("layout", {
    autoPadding: true,
    padding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    }
});
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2 = {
    addBox (chart, item) {
        if (!chart.boxes) chart.boxes = [];
        item.fullSize = item.fullSize || false;
        item.position = item.position || "top";
        item.weight = item.weight || 0;
        item._layers = item._layers || function() {
            return [
                {
                    z: 0,
                    draw (chartArea) {
                        item.draw(chartArea);
                    }
                }
            ];
        };
        chart.boxes.push(item);
    },
    removeBox (chart, layoutItem) {
        const index42 = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
        if (index42 !== -1) chart.boxes.splice(index42, 1);
    },
    configure (chart, item, options) {
        item.fullSize = options.fullSize;
        item.position = options.position;
        item.weight = options.weight;
    },
    update (chart, width, height, minPadding) {
        if (!chart) return;
        const padding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(chart.options.layout.padding);
        const availableWidth = Math.max(width - padding.width, 0);
        const availableHeight = Math.max(height - padding.height, 0);
        const boxes = $df29249fe447c065$var$$a43aa20d3eb44e80$var$buildLayoutBoxes(chart.boxes);
        const verticalBoxes = boxes.vertical;
        const horizontalBoxes = boxes.horizontal;
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(chart.boxes, (box)=>{
            if (typeof box.beforeLayout === "function") box.beforeLayout();
        });
        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1
        , 0) || 1;
        const params = Object.freeze({
            outerWidth: width,
            outerHeight: height,
            padding: padding,
            availableWidth: availableWidth,
            availableHeight: availableHeight,
            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
            hBoxMaxHeight: availableHeight / 2
        });
        const maxPadding = Object.assign({
        }, padding);
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$updateMaxPadding(maxPadding, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(minPadding));
        const chartArea = Object.assign({
            maxPadding: maxPadding,
            w: availableWidth,
            h: availableHeight,
            x: padding.left,
            y: padding.top
        }, padding);
        const stacks = $df29249fe447c065$var$$a43aa20d3eb44e80$var$setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$fitBoxes(boxes.fullSize, chartArea, params, stacks);
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$fitBoxes(verticalBoxes, chartArea, params, stacks);
        if ($df29249fe447c065$var$$a43aa20d3eb44e80$var$fitBoxes(horizontalBoxes, chartArea, params, stacks)) $df29249fe447c065$var$$a43aa20d3eb44e80$var$fitBoxes(verticalBoxes, chartArea, params, stacks);
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$handleMaxPadding(chartArea);
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
        chartArea.x += chartArea.w;
        chartArea.y += chartArea.h;
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
        chart.chartArea = {
            left: chartArea.left,
            top: chartArea.top,
            right: chartArea.left + chartArea.w,
            bottom: chartArea.top + chartArea.h,
            height: chartArea.h,
            width: chartArea.w
        };
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(boxes.chartArea, (layout)=>{
            const box = layout.box;
            Object.assign(box, chart.chartArea);
            box.update(chartArea.w, chartArea.h, {
                left: 0,
                top: 0,
                right: 0,
                bottom: 0
            });
        });
    }
};
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$7b1aeb87f31f7da8 {
    acquireContext(canvas, aspectRatio) {
    }
    releaseContext(context) {
        return false;
    }
    addEventListener(chart, type, listener) {
    }
    removeEventListener(chart, type, listener) {
    }
    getDevicePixelRatio() {
        return 1;
    }
    getMaximumSize(element, width, height, aspectRatio) {
        width = Math.max(0, width || element.width);
        height = height || element.height;
        return {
            width: width,
            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
        };
    }
    isAttached(canvas) {
        return true;
    }
    updateConfig(config) {
    }
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$a40a96b24b46cf35 extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$7b1aeb87f31f7da8 {
    acquireContext(item) {
        return item && item.getContext && item.getContext("2d") || null;
    }
    updateConfig(config) {
        config.options.animation = false;
    }
}
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$EXPANDO_KEY = "$chartjs";
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$EVENT_TYPES = {
    touchstart: "mousedown",
    touchmove: "mousemove",
    touchend: "mouseup",
    pointerenter: "mouseenter",
    pointerdown: "mousedown",
    pointermove: "mousemove",
    pointerup: "mouseup",
    pointerleave: "mouseout",
    pointerout: "mouseout"
};
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$isNullOrEmpty = (value)=>value === null || value === ""
;
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$initCanvas(canvas, aspectRatio) {
    const style = canvas.style;
    const renderHeight = canvas.getAttribute("height");
    const renderWidth = canvas.getAttribute("width");
    canvas[$df29249fe447c065$var$$a43aa20d3eb44e80$var$EXPANDO_KEY] = {
        initial: {
            height: renderHeight,
            width: renderWidth,
            style: {
                display: style.display,
                height: style.height,
                width: style.width
            }
        }
    };
    style.display = style.display || "block";
    style.boxSizing = style.boxSizing || "border-box";
    if ($df29249fe447c065$var$$a43aa20d3eb44e80$var$isNullOrEmpty(renderWidth)) {
        const displayWidth = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9bb611d729802a56(canvas, "width");
        if (displayWidth !== undefined) canvas.width = displayWidth;
    }
    if ($df29249fe447c065$var$$a43aa20d3eb44e80$var$isNullOrEmpty(renderHeight)) {
        if (canvas.style.height === "") canvas.height = canvas.width / (aspectRatio || 2);
        else {
            const displayHeight = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9bb611d729802a56(canvas, "height");
            if (displayHeight !== undefined) canvas.height = displayHeight;
        }
    }
    return canvas;
}
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$eventListenerOptions = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3466f893ebf79586 ? {
    passive: true
} : false;
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$addListener(node, type, listener) {
    node.addEventListener(type, listener, $df29249fe447c065$var$$a43aa20d3eb44e80$var$eventListenerOptions);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$removeListener(chart, type, listener) {
    chart.canvas.removeEventListener(type, listener, $df29249fe447c065$var$$a43aa20d3eb44e80$var$eventListenerOptions);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$fromNativeEvent(event, chart) {
    const type = $df29249fe447c065$var$$a43aa20d3eb44e80$var$EVENT_TYPES[event.type] || event.type;
    const { x: x , y: y  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$df995fae86a55f06(event, chart);
    return {
        type: type,
        chart: chart,
        native: event,
        x: x !== undefined ? x : null,
        y: y !== undefined ? y : null
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$nodeListContains(nodeList, canvas) {
    for (const node of nodeList){
        if (node === canvas || node.contains(canvas)) return true;
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$createAttachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries)=>{
        let trigger = false;
        for (const entry of entries){
            trigger = trigger || $df29249fe447c065$var$$a43aa20d3eb44e80$var$nodeListContains(entry.addedNodes, canvas);
            trigger = trigger && !$df29249fe447c065$var$$a43aa20d3eb44e80$var$nodeListContains(entry.removedNodes, canvas);
        }
        if (trigger) listener();
    });
    observer.observe(document, {
        childList: true,
        subtree: true
    });
    return observer;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$createDetachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries)=>{
        let trigger = false;
        for (const entry of entries){
            trigger = trigger || $df29249fe447c065$var$$a43aa20d3eb44e80$var$nodeListContains(entry.removedNodes, canvas);
            trigger = trigger && !$df29249fe447c065$var$$a43aa20d3eb44e80$var$nodeListContains(entry.addedNodes, canvas);
        }
        if (trigger) listener();
    });
    observer.observe(document, {
        childList: true,
        subtree: true
    });
    return observer;
}
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$drpListeningCharts = new Map();
let $df29249fe447c065$var$$a43aa20d3eb44e80$var$oldDevicePixelRatio = 0;
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$onWindowResize() {
    const dpr = window.devicePixelRatio;
    if (dpr === $df29249fe447c065$var$$a43aa20d3eb44e80$var$oldDevicePixelRatio) return;
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$oldDevicePixelRatio = dpr;
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$drpListeningCharts.forEach((resize, chart)=>{
        if (chart.currentDevicePixelRatio !== dpr) resize();
    });
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$listenDevicePixelRatioChanges(chart, resize) {
    if (!$df29249fe447c065$var$$a43aa20d3eb44e80$var$drpListeningCharts.size) window.addEventListener("resize", $df29249fe447c065$var$$a43aa20d3eb44e80$var$onWindowResize);
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$drpListeningCharts.set(chart, resize);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$unlistenDevicePixelRatioChanges(chart) {
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$drpListeningCharts.delete(chart);
    if (!$df29249fe447c065$var$$a43aa20d3eb44e80$var$drpListeningCharts.size) window.removeEventListener("resize", $df29249fe447c065$var$$a43aa20d3eb44e80$var$onWindowResize);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$createResizeObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const container = canvas && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2329c99376c9d0a4(canvas);
    if (!container) return;
    const resize = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$b4171a6734a65d42((width, height)=>{
        const w = container.clientWidth;
        listener(width, height);
        if (w < container.clientWidth) listener();
    }, window);
    const observer = new ResizeObserver((entries)=>{
        const entry = entries[0];
        const width = entry.contentRect.width;
        const height = entry.contentRect.height;
        if (width === 0 && height === 0) return;
        resize(width, height);
    });
    observer.observe(container);
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$listenDevicePixelRatioChanges(chart, resize);
    return observer;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$releaseObserver(chart, type, observer) {
    if (observer) observer.disconnect();
    if (type === "resize") $df29249fe447c065$var$$a43aa20d3eb44e80$var$unlistenDevicePixelRatioChanges(chart);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$createProxyAndListen(chart, type, listener) {
    const canvas = chart.canvas;
    const proxy = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$b4171a6734a65d42((event)=>{
        if (chart.ctx !== null) listener($df29249fe447c065$var$$a43aa20d3eb44e80$var$fromNativeEvent(event, chart));
    }, chart, (args)=>{
        const event = args[0];
        return [
            event,
            event.offsetX,
            event.offsetY
        ];
    });
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$addListener(canvas, type, proxy);
    return proxy;
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$f02da7f882cf6b2e extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$7b1aeb87f31f7da8 {
    acquireContext(canvas, aspectRatio) {
        const context = canvas && canvas.getContext && canvas.getContext("2d");
        if (context && context.canvas === canvas) {
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$initCanvas(canvas, aspectRatio);
            return context;
        }
        return null;
    }
    releaseContext(context) {
        const canvas = context.canvas;
        if (!canvas[$df29249fe447c065$var$$a43aa20d3eb44e80$var$EXPANDO_KEY]) return false;
        const initial = canvas[$df29249fe447c065$var$$a43aa20d3eb44e80$var$EXPANDO_KEY].initial;
        [
            "height",
            "width"
        ].forEach((prop)=>{
            const value = initial[prop];
            if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(value)) canvas.removeAttribute(prop);
            else canvas.setAttribute(prop, value);
        });
        const style = initial.style || {
        };
        Object.keys(style).forEach((key)=>{
            canvas.style[key] = style[key];
        });
        canvas.width = canvas.width;
        delete canvas[$df29249fe447c065$var$$a43aa20d3eb44e80$var$EXPANDO_KEY];
        return true;
    }
    addEventListener(chart, type, listener) {
        this.removeEventListener(chart, type);
        const proxies = chart.$proxies || (chart.$proxies = {
        });
        const handlers = {
            attach: $df29249fe447c065$var$$a43aa20d3eb44e80$var$createAttachObserver,
            detach: $df29249fe447c065$var$$a43aa20d3eb44e80$var$createDetachObserver,
            resize: $df29249fe447c065$var$$a43aa20d3eb44e80$var$createResizeObserver
        };
        const handler = handlers[type] || $df29249fe447c065$var$$a43aa20d3eb44e80$var$createProxyAndListen;
        proxies[type] = handler(chart, type, listener);
    }
    removeEventListener(chart, type) {
        const proxies = chart.$proxies || (chart.$proxies = {
        });
        const proxy = proxies[type];
        if (!proxy) return;
        const handlers = {
            attach: $df29249fe447c065$var$$a43aa20d3eb44e80$var$releaseObserver,
            detach: $df29249fe447c065$var$$a43aa20d3eb44e80$var$releaseObserver,
            resize: $df29249fe447c065$var$$a43aa20d3eb44e80$var$releaseObserver
        };
        const handler = handlers[type] || $df29249fe447c065$var$$a43aa20d3eb44e80$var$removeListener;
        handler(chart, type, proxy);
        proxies[type] = undefined;
    }
    getDevicePixelRatio() {
        return window.devicePixelRatio;
    }
    getMaximumSize(canvas, width, height, aspectRatio) {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d66501df72047452(canvas, width, height, aspectRatio);
    }
    isAttached(canvas) {
        const container = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2329c99376c9d0a4(canvas);
        return !!(container && container.isConnected);
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$export$72cd9e67b1b784f9(canvas) {
    if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$61196ced6d74a310() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) return $df29249fe447c065$var$$a43aa20d3eb44e80$export$a40a96b24b46cf35;
    return $df29249fe447c065$var$$a43aa20d3eb44e80$export$f02da7f882cf6b2e;
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$db77ccec0bb4ccac {
    tooltipPosition(useFinalPosition) {
        const { x: x , y: y  } = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        return {
            x: x,
            y: y
        };
    }
    hasValue() {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9e5f44173e64f162(this.x) && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9e5f44173e64f162(this.y);
    }
    getProps(props, final) {
        const anims = this.$animations;
        if (!final || !anims) return this;
        const ret = {
        };
        props.forEach((prop)=>{
            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
        });
        return ret;
    }
    constructor(){
        this.x = undefined;
        this.y = undefined;
        this.active = false;
        this.options = undefined;
        this.$animations = undefined;
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$db77ccec0bb4ccac.defaults = {
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$db77ccec0bb4ccac.defaultRoutes = undefined;
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$formatters = {
    values (value) {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(value) ? value : "" + value;
    },
    numeric (tickValue, index, ticks) {
        if (tickValue === 0) return "0";
        const locale = this.chart.options.locale;
        let notation;
        let delta = tickValue;
        if (ticks.length > 1) {
            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
            if (maxTick < 0.0001 || maxTick > 1000000000000000) notation = "scientific";
            delta = $df29249fe447c065$var$$a43aa20d3eb44e80$var$calculateDelta(tickValue, ticks);
        }
        const logDelta = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a1a48c8f6ef640e(Math.abs(delta));
        const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
        const options = {
            notation: notation,
            minimumFractionDigits: numDecimal,
            maximumFractionDigits: numDecimal
        };
        Object.assign(options, this.options.ticks.format);
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ae1af26003f05816(tickValue, locale, options);
    },
    logarithmic (tickValue, index43, ticks) {
        if (tickValue === 0) return "0";
        const remain = tickValue / Math.pow(10, Math.floor($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a1a48c8f6ef640e(tickValue)));
        if (remain === 1 || remain === 2 || remain === 5) return $df29249fe447c065$var$$a43aa20d3eb44e80$var$formatters.numeric.call(this, tickValue, index43, ticks);
        return "";
    }
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$calculateDelta(tickValue, ticks) {
    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) delta = tickValue - Math.floor(tickValue);
    return delta;
}
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$27c7467594ef87bd = {
    formatters: $df29249fe447c065$var$$a43aa20d3eb44e80$var$formatters
};
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.set("scale", {
    display: true,
    offset: false,
    reverse: false,
    beginAtZero: false,
    bounds: "ticks",
    grace: 0,
    grid: {
        display: true,
        lineWidth: 1,
        drawBorder: true,
        drawOnChartArea: true,
        drawTicks: true,
        tickLength: 8,
        tickWidth: (_ctx, options)=>options.lineWidth
        ,
        tickColor: (_ctx, options)=>options.color
        ,
        offset: false,
        borderDash: [],
        borderDashOffset: 0,
        borderWidth: 1
    },
    title: {
        display: false,
        text: "",
        padding: {
            top: 4,
            bottom: 4
        }
    },
    ticks: {
        minRotation: 0,
        maxRotation: 50,
        mirror: false,
        textStrokeWidth: 0,
        textStrokeColor: "",
        padding: 3,
        display: true,
        autoSkip: true,
        autoSkipPadding: 3,
        labelOffset: 0,
        callback: $df29249fe447c065$var$$a43aa20d3eb44e80$export$27c7467594ef87bd.formatters.values,
        minor: {
        },
        major: {
        },
        align: "center",
        crossAlign: "near",
        showLabelBackdrop: false,
        backdropColor: "rgba(255, 255, 255, 0.75)",
        backdropPadding: 2
    }
});
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.route("scale.ticks", "color", "", "color");
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.route("scale.grid", "color", "", "borderColor");
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.route("scale.grid", "borderColor", "", "borderColor");
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.route("scale.title", "color", "", "color");
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.describe("scale", {
    _fallback: false,
    _scriptable: (name)=>!name.startsWith("before") && !name.startsWith("after") && name !== "callback" && name !== "parser"
    ,
    _indexable: (name)=>name !== "borderDash" && name !== "tickBorderDash"
});
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.describe("scales", {
    _fallback: "scale"
});
$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.describe("scale.ticks", {
    _scriptable: (name)=>name !== "backdropPadding" && name !== "callback"
    ,
    _indexable: (name)=>name !== "backdropPadding"
});
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$autoSkip(scale, ticks) {
    const tickOpts = scale.options.ticks;
    const ticksLimit = tickOpts.maxTicksLimit || $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineMaxTicks(scale);
    const majorIndices = tickOpts.major.enabled ? $df29249fe447c065$var$$a43aa20d3eb44e80$var$getMajorIndices(ticks) : [];
    const numMajorIndices = majorIndices.length;
    const first = majorIndices[0];
    const last = majorIndices[numMajorIndices - 1];
    const newTicks = [];
    if (numMajorIndices > ticksLimit) {
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
        return newTicks;
    }
    const spacing = $df29249fe447c065$var$$a43aa20d3eb44e80$var$calculateSpacing(majorIndices, ticks, ticksLimit);
    if (numMajorIndices > 0) {
        let i, ilen;
        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$skip(ticks, newTicks, spacing, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++)$df29249fe447c065$var$$a43aa20d3eb44e80$var$skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$skip(ticks, newTicks, spacing, last, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
        return newTicks;
    }
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$skip(ticks, newTicks, spacing);
    return newTicks;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineMaxTicks(scale) {
    const offset = scale.options.offset;
    const tickLength = scale._tickSize();
    const maxScale = scale._length / tickLength + (offset ? 0 : 1);
    const maxChart = scale._maxLength / tickLength;
    return Math.floor(Math.min(maxScale, maxChart));
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$calculateSpacing(majorIndices, ticks, ticksLimit) {
    const evenMajorSpacing = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getEvenSpacing(majorIndices);
    const spacing = ticks.length / ticksLimit;
    if (!evenMajorSpacing) return Math.max(spacing, 1);
    const factors = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a07804094c3ecf2d(evenMajorSpacing);
    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){
        const factor = factors[i];
        if (factor > spacing) return factor;
    }
    return Math.max(spacing, 1);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getMajorIndices(ticks) {
    const result = [];
    let i, ilen;
    for(i = 0, ilen = ticks.length; i < ilen; i++)if (ticks[i].major) result.push(i);
    return result;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$skipMajors(ticks, newTicks, majorIndices, spacing) {
    let count = 0;
    let next = majorIndices[0];
    let i;
    spacing = Math.ceil(spacing);
    for(i = 0; i < ticks.length; i++)if (i === next) {
        newTicks.push(ticks[i]);
        count++;
        next = majorIndices[count * spacing];
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$skip(ticks, newTicks, spacing, majorStart, majorEnd) {
    const start = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(majorStart, 0);
    const end = Math.min($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(majorEnd, ticks.length), ticks.length);
    let count = 0;
    let length, i, next;
    spacing = Math.ceil(spacing);
    if (majorEnd) {
        length = majorEnd - majorStart;
        spacing = length / Math.floor(length / spacing);
    }
    next = start;
    while(next < 0){
        count++;
        next = Math.round(start + count * spacing);
    }
    for(i = Math.max(start, 0); i < end; i++)if (i === next) {
        newTicks.push(ticks[i]);
        count++;
        next = Math.round(start + count * spacing);
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getEvenSpacing(arr) {
    const len = arr.length;
    let i, diff;
    if (len < 2) return false;
    for(diff = arr[0], i = 1; i < len; ++i){
        if (arr[i] - arr[i - 1] !== diff) return false;
    }
    return diff;
}
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$reverseAlign = (align)=>align === "left" ? "right" : align === "right" ? "left" : align
;
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$offsetFromEdge = (scale, edge, offset)=>edge === "top" || edge === "left" ? scale[edge] + offset : scale[edge] - offset
;
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$sample(arr, numItems) {
    const result = [];
    const increment = arr.length / numItems;
    const len = arr.length;
    let i = 0;
    for(; i < len; i += increment)result.push(arr[Math.floor(i)]);
    return result;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getPixelForGridLine(scale, index44, offsetGridLines) {
    const length = scale.ticks.length;
    const validIndex1 = Math.min(index44, length - 1);
    const start = scale._startPixel;
    const end = scale._endPixel;
    const epsilon = 0.000001;
    let lineValue = scale.getPixelForTick(validIndex1);
    let offset;
    if (offsetGridLines) {
        if (length === 1) offset = Math.max(lineValue - start, end - lineValue);
        else if (index44 === 0) offset = (scale.getPixelForTick(1) - lineValue) / 2;
        else offset = (lineValue - scale.getPixelForTick(validIndex1 - 1)) / 2;
        lineValue += validIndex1 < index44 ? offset : -offset;
        if (lineValue < start - epsilon || lineValue > end + epsilon) return;
    }
    return lineValue;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$garbageCollect(caches, length) {
    $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(caches, (cache)=>{
        const gc = cache.gc;
        const gcLen = gc.length / 2;
        let i;
        if (gcLen > length) {
            for(i = 0; i < gcLen; ++i)delete cache.data[gc[i]];
            gc.splice(0, gcLen);
        }
    });
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTickMarkLength(options) {
    return options.drawTicks ? options.tickLength : 0;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTitleHeight(options, fallback) {
    if (!options.display) return 0;
    const font = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(options.font, fallback);
    const padding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(options.padding);
    const lines = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(options.text) ? options.text.length : 1;
    return lines * font.lineHeight + padding.height;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$createScaleContext(parent, scale) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dda1d9f60106f0e9(parent, {
        scale: scale,
        type: "scale"
    });
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$createTickContext(parent, index45, tick) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dda1d9f60106f0e9(parent, {
        tick: tick,
        index: index45,
        type: "tick"
    });
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$titleAlign(align, position, reverse) {
    let ret = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$34aec0b863436764(align);
    if (reverse && position !== "right" || !reverse && position === "right") ret = $df29249fe447c065$var$$a43aa20d3eb44e80$var$reverseAlign(ret);
    return ret;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$titleArgs(scale, offset, position, align) {
    const { top: top , left: left , bottom: bottom , right: right , chart: chart  } = scale;
    const { chartArea: chartArea , scales: scales2  } = chart;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    const height = bottom - top;
    const width = right - left;
    if (scale.isHorizontal()) {
        titleX = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(align, left, right);
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            titleY = scales2[positionAxisID].getPixelForValue(value) + height - offset;
        } else if (position === "center") titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
        else titleY = $df29249fe447c065$var$$a43aa20d3eb44e80$var$offsetFromEdge(scale, position, offset);
        maxWidth = right - left;
    } else {
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            titleX = scales2[positionAxisID].getPixelForValue(value) - width + offset;
        } else if (position === "center") titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
        else titleX = $df29249fe447c065$var$$a43aa20d3eb44e80$var$offsetFromEdge(scale, position, offset);
        titleY = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(align, bottom, top);
        rotation = position === "left" ? -$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd : $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd;
    }
    return {
        titleX: titleX,
        titleY: titleY,
        maxWidth: maxWidth,
        rotation: rotation
    };
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$d60cfc58d3c358b6 extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$db77ccec0bb4ccac {
    init(options) {
        this.options = options.setContext(this.getContext());
        this.axis = options.axis;
        this._userMin = this.parse(options.min);
        this._userMax = this.parse(options.max);
        this._suggestedMin = this.parse(options.suggestedMin);
        this._suggestedMax = this.parse(options.suggestedMax);
    }
    parse(raw, index) {
        return raw;
    }
    getUserBounds() {
        let { _userMin: _userMin , _userMax: _userMax , _suggestedMin: _suggestedMin , _suggestedMax: _suggestedMax  } = this;
        _userMin = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c4ce752e73470fba(_userMin, Number.POSITIVE_INFINITY);
        _userMax = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c4ce752e73470fba(_userMax, Number.NEGATIVE_INFINITY);
        _suggestedMin = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c4ce752e73470fba(_suggestedMin, Number.POSITIVE_INFINITY);
        _suggestedMax = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c4ce752e73470fba(_suggestedMax, Number.NEGATIVE_INFINITY);
        return {
            min: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c4ce752e73470fba(_userMin, _suggestedMin),
            max: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c4ce752e73470fba(_userMax, _suggestedMax),
            minDefined: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(_userMin),
            maxDefined: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(_userMax)
        };
    }
    getMinMax(canStack) {
        let { min: min , max: max , minDefined: minDefined , maxDefined: maxDefined  } = this.getUserBounds();
        let range;
        if (minDefined && maxDefined) return {
            min: min,
            max: max
        };
        const metas = this.getMatchingVisibleMetas();
        for(let i = 0, ilen = metas.length; i < ilen; ++i){
            range = metas[i].controller.getMinMax(this, canStack);
            if (!minDefined) min = Math.min(min, range.min);
            if (!maxDefined) max = Math.max(max, range.max);
        }
        min = maxDefined && min > max ? max : min;
        max = minDefined && min > max ? min : max;
        return {
            min: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c4ce752e73470fba(min, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c4ce752e73470fba(max, min)),
            max: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c4ce752e73470fba(max, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c4ce752e73470fba(min, max))
        };
    }
    getPadding() {
        return {
            left: this.paddingLeft || 0,
            top: this.paddingTop || 0,
            right: this.paddingRight || 0,
            bottom: this.paddingBottom || 0
        };
    }
    getTicks() {
        return this.ticks;
    }
    getLabels() {
        const data = this.chart.data;
        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
    }
    beforeLayout() {
        this._cache = {
        };
        this._dataLimitsCached = false;
    }
    beforeUpdate() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(this.options.beforeUpdate, [
            this
        ]);
    }
    update(maxWidth, maxHeight, margins) {
        const { beginAtZero: beginAtZero , grace: grace , ticks: tickOpts  } = this.options;
        const sampleSize = tickOpts.sampleSize;
        this.beforeUpdate();
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins = Object.assign({
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        }, margins);
        this.ticks = null;
        this._labelSizes = null;
        this._gridLineItems = null;
        this._labelItems = null;
        this.beforeSetDimensions();
        this.setDimensions();
        this.afterSetDimensions();
        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
        if (!this._dataLimitsCached) {
            this.beforeDataLimits();
            this.determineDataLimits();
            this.afterDataLimits();
            this._range = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$db202ddc8be9136(this, grace, beginAtZero);
            this._dataLimitsCached = true;
        }
        this.beforeBuildTicks();
        this.ticks = this.buildTicks() || [];
        this.afterBuildTicks();
        const samplingEnabled = sampleSize < this.ticks.length;
        this._convertTicksToLabels(samplingEnabled ? $df29249fe447c065$var$$a43aa20d3eb44e80$var$sample(this.ticks, sampleSize) : this.ticks);
        this.configure();
        this.beforeCalculateLabelRotation();
        this.calculateLabelRotation();
        this.afterCalculateLabelRotation();
        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
            this.ticks = $df29249fe447c065$var$$a43aa20d3eb44e80$var$autoSkip(this, this.ticks);
            this._labelSizes = null;
            this.afterAutoSkip();
        }
        if (samplingEnabled) this._convertTicksToLabels(this.ticks);
        this.beforeFit();
        this.fit();
        this.afterFit();
        this.afterUpdate();
    }
    configure() {
        let reversePixels = this.options.reverse;
        let startPixel, endPixel;
        if (this.isHorizontal()) {
            startPixel = this.left;
            endPixel = this.right;
        } else {
            startPixel = this.top;
            endPixel = this.bottom;
            reversePixels = !reversePixels;
        }
        this._startPixel = startPixel;
        this._endPixel = endPixel;
        this._reversePixels = reversePixels;
        this._length = endPixel - startPixel;
        this._alignToPixels = this.options.alignToPixels;
    }
    afterUpdate() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(this.options.afterUpdate, [
            this
        ]);
    }
    beforeSetDimensions() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(this.options.beforeSetDimensions, [
            this
        ]);
    }
    setDimensions() {
        if (this.isHorizontal()) {
            this.width = this.maxWidth;
            this.left = 0;
            this.right = this.width;
        } else {
            this.height = this.maxHeight;
            this.top = 0;
            this.bottom = this.height;
        }
        this.paddingLeft = 0;
        this.paddingTop = 0;
        this.paddingRight = 0;
        this.paddingBottom = 0;
    }
    afterSetDimensions() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(this.options.afterSetDimensions, [
            this
        ]);
    }
    _callHooks(name) {
        this.chart.notifyPlugins(name, this.getContext());
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(this.options[name], [
            this
        ]);
    }
    beforeDataLimits() {
        this._callHooks("beforeDataLimits");
    }
    determineDataLimits() {
    }
    afterDataLimits() {
        this._callHooks("afterDataLimits");
    }
    beforeBuildTicks() {
        this._callHooks("beforeBuildTicks");
    }
    buildTicks() {
        return [];
    }
    afterBuildTicks() {
        this._callHooks("afterBuildTicks");
    }
    beforeTickToLabelConversion() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(this.options.beforeTickToLabelConversion, [
            this
        ]);
    }
    generateTickLabels(ticks) {
        const tickOpts = this.options.ticks;
        let i, ilen, tick;
        for(i = 0, ilen = ticks.length; i < ilen; i++){
            tick = ticks[i];
            tick.label = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(tickOpts.callback, [
                tick.value,
                i,
                ticks
            ], this);
        }
    }
    afterTickToLabelConversion() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(this.options.afterTickToLabelConversion, [
            this
        ]);
    }
    beforeCalculateLabelRotation() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(this.options.beforeCalculateLabelRotation, [
            this
        ]);
    }
    calculateLabelRotation() {
        const options = this.options;
        const tickOpts = options.ticks;
        const numTicks = this.ticks.length;
        const minRotation = tickOpts.minRotation || 0;
        const maxRotation = tickOpts.maxRotation;
        let labelRotation = minRotation;
        let tickWidth, maxHeight, maxLabelDiagonal;
        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
            this.labelRotation = minRotation;
            return;
        }
        const labelSizes = this._getLabelSizes();
        const maxLabelWidth = labelSizes.widest.width;
        const maxLabelHeight = labelSizes.highest.height;
        const maxWidth = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(this.chart.width - maxLabelWidth, 0, this.maxWidth);
        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
        if (maxLabelWidth + 6 > tickWidth) {
            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
            maxHeight = this.maxHeight - $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTickMarkLength(options.grid) - tickOpts.padding - $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTitleHeight(options.title, this.chart.options.font);
            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
            labelRotation = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$25ce5a424b770e84(Math.min(Math.asin($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(maxLabelHeight / maxLabelDiagonal, -1, 1))));
            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
        }
        this.labelRotation = labelRotation;
    }
    afterCalculateLabelRotation() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(this.options.afterCalculateLabelRotation, [
            this
        ]);
    }
    afterAutoSkip() {
    }
    beforeFit() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(this.options.beforeFit, [
            this
        ]);
    }
    fit() {
        const minSize = {
            width: 0,
            height: 0
        };
        const { chart: chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;
        const display = this._isVisible();
        const isHorizontal = this.isHorizontal();
        if (display) {
            const titleHeight = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTitleHeight(titleOpts, chart.options.font);
            if (isHorizontal) {
                minSize.width = this.maxWidth;
                minSize.height = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTickMarkLength(gridOpts) + titleHeight;
            } else {
                minSize.height = this.maxHeight;
                minSize.width = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTickMarkLength(gridOpts) + titleHeight;
            }
            if (tickOpts.display && this.ticks.length) {
                const { first: first , last: last , widest: widest , highest: highest  } = this._getLabelSizes();
                const tickPadding = tickOpts.padding * 2;
                const angleRadians = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$625550452a3fa3ec(this.labelRotation);
                const cos = Math.cos(angleRadians);
                const sin = Math.sin(angleRadians);
                if (isHorizontal) {
                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
                } else {
                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
                }
                this._calculatePadding(first, last, sin, cos);
            }
        }
        this._handleMargins();
        if (isHorizontal) {
            this.width = this._length = chart.width - this._margins.left - this._margins.right;
            this.height = minSize.height;
        } else {
            this.width = minSize.width;
            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
        }
    }
    _calculatePadding(first, last, sin, cos) {
        const { ticks: { align: align , padding: padding  } , position: position  } = this.options;
        const isRotated = this.labelRotation !== 0;
        const labelsBelowTicks = position !== "top" && this.axis === "x";
        if (this.isHorizontal()) {
            const offsetLeft = this.getPixelForTick(0) - this.left;
            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
            let paddingLeft = 0;
            let paddingRight = 0;
            if (isRotated) {
                if (labelsBelowTicks) {
                    paddingLeft = cos * first.width;
                    paddingRight = sin * last.height;
                } else {
                    paddingLeft = sin * first.height;
                    paddingRight = cos * last.width;
                }
            } else if (align === "start") paddingRight = last.width;
            else if (align === "end") paddingLeft = first.width;
            else if (align !== "inner") {
                paddingLeft = first.width / 2;
                paddingRight = last.width / 2;
            }
            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
        } else {
            let paddingTop = last.height / 2;
            let paddingBottom = first.height / 2;
            if (align === "start") {
                paddingTop = 0;
                paddingBottom = first.height;
            } else if (align === "end") {
                paddingTop = last.height;
                paddingBottom = 0;
            }
            this.paddingTop = paddingTop + padding;
            this.paddingBottom = paddingBottom + padding;
        }
    }
    _handleMargins() {
        if (this._margins) {
            this._margins.left = Math.max(this.paddingLeft, this._margins.left);
            this._margins.top = Math.max(this.paddingTop, this._margins.top);
            this._margins.right = Math.max(this.paddingRight, this._margins.right);
            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
        }
    }
    afterFit() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(this.options.afterFit, [
            this
        ]);
    }
    isHorizontal() {
        const { axis: axis , position: position  } = this.options;
        return position === "top" || position === "bottom" || axis === "x";
    }
    isFullSize() {
        return this.options.fullSize;
    }
    _convertTicksToLabels(ticks) {
        this.beforeTickToLabelConversion();
        this.generateTickLabels(ticks);
        let i, ilen;
        for(i = 0, ilen = ticks.length; i < ilen; i++)if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(ticks[i].label)) {
            ticks.splice(i, 1);
            ilen--;
            i--;
        }
        this.afterTickToLabelConversion();
    }
    _getLabelSizes() {
        let labelSizes = this._labelSizes;
        if (!labelSizes) {
            const sampleSize = this.options.ticks.sampleSize;
            let ticks = this.ticks;
            if (sampleSize < ticks.length) ticks = $df29249fe447c065$var$$a43aa20d3eb44e80$var$sample(ticks, sampleSize);
            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);
        }
        return labelSizes;
    }
    _computeLabelSizes(ticks, length) {
        const { ctx: ctx , _longestTextCache: caches  } = this;
        const widths = [];
        const heights = [];
        let widestLabelSize = 0;
        let highestLabelSize = 0;
        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
        for(i = 0; i < length; ++i){
            label = ticks[i].label;
            tickFont = this._resolveTickFontOptions(i);
            ctx.font = fontString = tickFont.string;
            cache = caches[fontString] = caches[fontString] || {
                data: {
                },
                gc: []
            };
            lineHeight = tickFont.lineHeight;
            width = height = 0;
            if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(label) && !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(label)) {
                width = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a6d5c9ae78a2c08(ctx, cache.data, cache.gc, width, label);
                height = lineHeight;
            } else if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(label)) for(j = 0, jlen = label.length; j < jlen; ++j){
                nestedLabel = label[j];
                if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(nestedLabel) && !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(nestedLabel)) {
                    width = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a6d5c9ae78a2c08(ctx, cache.data, cache.gc, width, nestedLabel);
                    height += lineHeight;
                }
            }
            widths.push(width);
            heights.push(height);
            widestLabelSize = Math.max(width, widestLabelSize);
            highestLabelSize = Math.max(height, highestLabelSize);
        }
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$garbageCollect(caches, length);
        const widest = widths.indexOf(widestLabelSize);
        const highest = heights.indexOf(highestLabelSize);
        const valueAt = (idx)=>({
                width: widths[idx] || 0,
                height: heights[idx] || 0
            })
        ;
        return {
            first: valueAt(0),
            last: valueAt(length - 1),
            widest: valueAt(widest),
            highest: valueAt(highest),
            widths: widths,
            heights: heights
        };
    }
    getLabelForValue(value) {
        return value;
    }
    getPixelForValue(value, index) {
        return NaN;
    }
    getValueForPixel(pixel) {
    }
    getPixelForTick(index46) {
        const ticks = this.ticks;
        if (index46 < 0 || index46 > ticks.length - 1) return null;
        return this.getPixelForValue(ticks[index46].value);
    }
    getPixelForDecimal(decimal) {
        if (this._reversePixels) decimal = 1 - decimal;
        const pixel = this._startPixel + decimal * this._length;
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$e7c866399fa523f5(this._alignToPixels ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$71cec2538cb2c617(this.chart, pixel, 0) : pixel);
    }
    getDecimalForPixel(pixel) {
        const decimal = (pixel - this._startPixel) / this._length;
        return this._reversePixels ? 1 - decimal : decimal;
    }
    getBasePixel() {
        return this.getPixelForValue(this.getBaseValue());
    }
    getBaseValue() {
        const { min: min , max: max  } = this;
        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
    }
    getContext(index47) {
        const ticks = this.ticks || [];
        if (index47 >= 0 && index47 < ticks.length) {
            const tick = ticks[index47];
            return tick.$context || (tick.$context = $df29249fe447c065$var$$a43aa20d3eb44e80$var$createTickContext(this.getContext(), index47, tick));
        }
        return this.$context || (this.$context = $df29249fe447c065$var$$a43aa20d3eb44e80$var$createScaleContext(this.chart.getContext(), this));
    }
    _tickSize() {
        const optionTicks = this.options.ticks;
        const rot = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$625550452a3fa3ec(this.labelRotation);
        const cos = Math.abs(Math.cos(rot));
        const sin = Math.abs(Math.sin(rot));
        const labelSizes = this._getLabelSizes();
        const padding = optionTicks.autoSkipPadding || 0;
        const w = labelSizes ? labelSizes.widest.width + padding : 0;
        const h = labelSizes ? labelSizes.highest.height + padding : 0;
        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
    }
    _isVisible() {
        const display = this.options.display;
        if (display !== "auto") return !!display;
        return this.getMatchingVisibleMetas().length > 0;
    }
    _computeGridLineItems(chartArea) {
        const axis = this.axis;
        const chart = this.chart;
        const options = this.options;
        const { grid: grid , position: position  } = options;
        const offset = grid.offset;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const ticksLength = ticks.length + (offset ? 1 : 0);
        const tl = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTickMarkLength(grid);
        const items = [];
        const borderOpts = grid.setContext(this.getContext());
        const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;
        const axisHalfWidth = axisWidth / 2;
        const alignBorderValue = function(pixel) {
            return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$71cec2538cb2c617(chart, pixel, axisWidth);
        };
        let borderValue, i, lineValue, alignedLineValue;
        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
        if (position === "top") {
            borderValue = alignBorderValue(this.bottom);
            ty1 = this.bottom - tl;
            ty2 = borderValue - axisHalfWidth;
            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
            y2 = chartArea.bottom;
        } else if (position === "bottom") {
            borderValue = alignBorderValue(this.top);
            y1 = chartArea.top;
            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
            ty1 = borderValue + axisHalfWidth;
            ty2 = this.top + tl;
        } else if (position === "left") {
            borderValue = alignBorderValue(this.right);
            tx1 = this.right - tl;
            tx2 = borderValue - axisHalfWidth;
            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
            x2 = chartArea.right;
        } else if (position === "right") {
            borderValue = alignBorderValue(this.left);
            x1 = chartArea.left;
            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
            tx1 = borderValue + axisHalfWidth;
            tx2 = this.left + tl;
        } else if (axis === "x") {
            if (position === "center") borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
            else if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
            }
            y1 = chartArea.top;
            y2 = chartArea.bottom;
            ty1 = borderValue + axisHalfWidth;
            ty2 = ty1 + tl;
        } else if (axis === "y") {
            if (position === "center") borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
            else if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
            }
            tx1 = borderValue - axisHalfWidth;
            tx2 = tx1 - tl;
            x1 = chartArea.left;
            x2 = chartArea.right;
        }
        const limit = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(options.ticks.maxTicksLimit, ticksLength);
        const step = Math.max(1, Math.ceil(ticksLength / limit));
        for(i = 0; i < ticksLength; i += step){
            const optsAtIndex = grid.setContext(this.getContext(i));
            const lineWidth = optsAtIndex.lineWidth;
            const lineColor = optsAtIndex.color;
            const borderDash = grid.borderDash || [];
            const borderDashOffset = optsAtIndex.borderDashOffset;
            const tickWidth = optsAtIndex.tickWidth;
            const tickColor = optsAtIndex.tickColor;
            const tickBorderDash = optsAtIndex.tickBorderDash || [];
            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
            lineValue = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getPixelForGridLine(this, i, offset);
            if (lineValue === undefined) continue;
            alignedLineValue = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$71cec2538cb2c617(chart, lineValue, lineWidth);
            if (isHorizontal) tx1 = tx2 = x1 = x2 = alignedLineValue;
            else ty1 = ty2 = y1 = y2 = alignedLineValue;
            items.push({
                tx1: tx1,
                ty1: ty1,
                tx2: tx2,
                ty2: ty2,
                x1: x1,
                y1: y1,
                x2: x2,
                y2: y2,
                width: lineWidth,
                color: lineColor,
                borderDash: borderDash,
                borderDashOffset: borderDashOffset,
                tickWidth: tickWidth,
                tickColor: tickColor,
                tickBorderDash: tickBorderDash,
                tickBorderDashOffset: tickBorderDashOffset
            });
        }
        this._ticksLength = ticksLength;
        this._borderValue = borderValue;
        return items;
    }
    _computeLabelItems(chartArea) {
        const axis = this.axis;
        const options = this.options;
        const { position: position , ticks: optionTicks  } = options;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const { align: align , crossAlign: crossAlign , padding: padding , mirror: mirror  } = optionTicks;
        const tl = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTickMarkLength(options.grid);
        const tickAndPadding = tl + padding;
        const hTickAndPadding = mirror ? -padding : tickAndPadding;
        const rotation = -$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$625550452a3fa3ec(this.labelRotation);
        const items = [];
        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
        let textBaseline = "middle";
        if (position === "top") {
            y = this.bottom - hTickAndPadding;
            textAlign = this._getXAxisLabelAlignment();
        } else if (position === "bottom") {
            y = this.top + hTickAndPadding;
            textAlign = this._getXAxisLabelAlignment();
        } else if (position === "left") {
            const ret = this._getYAxisLabelAlignment(tl);
            textAlign = ret.textAlign;
            x = ret.x;
        } else if (position === "right") {
            const ret = this._getYAxisLabelAlignment(tl);
            textAlign = ret.textAlign;
            x = ret.x;
        } else if (axis === "x") {
            if (position === "center") y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
            else if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
            }
            textAlign = this._getXAxisLabelAlignment();
        } else if (axis === "y") {
            if (position === "center") x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
            else if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                x = this.chart.scales[positionAxisID].getPixelForValue(value);
            }
            textAlign = this._getYAxisLabelAlignment(tl).textAlign;
        }
        if (axis === "y") {
            if (align === "start") textBaseline = "top";
            else if (align === "end") textBaseline = "bottom";
        }
        const labelSizes = this._getLabelSizes();
        for(i = 0, ilen = ticks.length; i < ilen; ++i){
            tick = ticks[i];
            label = tick.label;
            const optsAtIndex = optionTicks.setContext(this.getContext(i));
            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
            font = this._resolveTickFontOptions(i);
            lineHeight = font.lineHeight;
            lineCount = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(label) ? label.length : 1;
            const halfCount = lineCount / 2;
            const color1 = optsAtIndex.color;
            const strokeColor = optsAtIndex.textStrokeColor;
            const strokeWidth = optsAtIndex.textStrokeWidth;
            let tickTextAlign = textAlign;
            if (isHorizontal) {
                x = pixel;
                if (textAlign === "inner") {
                    if (i === ilen - 1) tickTextAlign = !this.options.reverse ? "right" : "left";
                    else if (i === 0) tickTextAlign = !this.options.reverse ? "left" : "right";
                    else tickTextAlign = "center";
                }
                if (position === "top") {
                    if (crossAlign === "near" || rotation !== 0) textOffset = -lineCount * lineHeight + lineHeight / 2;
                    else if (crossAlign === "center") textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
                    else textOffset = -labelSizes.highest.height + lineHeight / 2;
                } else {
                    if (crossAlign === "near" || rotation !== 0) textOffset = lineHeight / 2;
                    else if (crossAlign === "center") textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
                    else textOffset = labelSizes.highest.height - lineCount * lineHeight;
                }
                if (mirror) textOffset *= -1;
            } else {
                y = pixel;
                textOffset = (1 - lineCount) * lineHeight / 2;
            }
            let backdrop;
            if (optsAtIndex.showLabelBackdrop) {
                const labelPadding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(optsAtIndex.backdropPadding);
                const height = labelSizes.heights[i];
                const width = labelSizes.widths[i];
                let top = y + textOffset - labelPadding.top;
                let left = x - labelPadding.left;
                switch(textBaseline){
                    case "middle":
                        top -= height / 2;
                        break;
                    case "bottom":
                        top -= height;
                        break;
                }
                switch(textAlign){
                    case "center":
                        left -= width / 2;
                        break;
                    case "right":
                        left -= width;
                        break;
                }
                backdrop = {
                    left: left,
                    top: top,
                    width: width + labelPadding.width,
                    height: height + labelPadding.height,
                    color: optsAtIndex.backdropColor
                };
            }
            items.push({
                rotation: rotation,
                label: label,
                font: font,
                color: color1,
                strokeColor: strokeColor,
                strokeWidth: strokeWidth,
                textOffset: textOffset,
                textAlign: tickTextAlign,
                textBaseline: textBaseline,
                translation: [
                    x,
                    y
                ],
                backdrop: backdrop
            });
        }
        return items;
    }
    _getXAxisLabelAlignment() {
        const { position: position , ticks: ticks  } = this.options;
        const rotation = -$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$625550452a3fa3ec(this.labelRotation);
        if (rotation) return position === "top" ? "left" : "right";
        let align = "center";
        if (ticks.align === "start") align = "left";
        else if (ticks.align === "end") align = "right";
        else if (ticks.align === "inner") align = "inner";
        return align;
    }
    _getYAxisLabelAlignment(tl) {
        const { position: position , ticks: { crossAlign: crossAlign , mirror: mirror , padding: padding  }  } = this.options;
        const labelSizes = this._getLabelSizes();
        const tickAndPadding = tl + padding;
        const widest = labelSizes.widest.width;
        let textAlign;
        let x;
        if (position === "left") {
            if (mirror) {
                x = this.right + padding;
                if (crossAlign === "near") textAlign = "left";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x += widest / 2;
                } else {
                    textAlign = "right";
                    x += widest;
                }
            } else {
                x = this.right - tickAndPadding;
                if (crossAlign === "near") textAlign = "right";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x -= widest / 2;
                } else {
                    textAlign = "left";
                    x = this.left;
                }
            }
        } else if (position === "right") {
            if (mirror) {
                x = this.left + padding;
                if (crossAlign === "near") textAlign = "right";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x -= widest / 2;
                } else {
                    textAlign = "left";
                    x -= widest;
                }
            } else {
                x = this.left + tickAndPadding;
                if (crossAlign === "near") textAlign = "left";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x += widest / 2;
                } else {
                    textAlign = "right";
                    x = this.right;
                }
            }
        } else textAlign = "right";
        return {
            textAlign: textAlign,
            x: x
        };
    }
    _computeLabelArea() {
        if (this.options.ticks.mirror) return;
        const chart = this.chart;
        const position = this.options.position;
        if (position === "left" || position === "right") return {
            top: 0,
            left: this.left,
            bottom: chart.height,
            right: this.right
        };
        if (position === "top" || position === "bottom") return {
            top: this.top,
            left: 0,
            bottom: this.bottom,
            right: chart.width
        };
    }
    drawBackground() {
        const { ctx: ctx , options: { backgroundColor: backgroundColor  } , left: left , top: top , width: width , height: height  } = this;
        if (backgroundColor) {
            ctx.save();
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(left, top, width, height);
            ctx.restore();
        }
    }
    getLineWidthForValue(value) {
        const grid = this.options.grid;
        if (!this._isVisible() || !grid.display) return 0;
        const ticks = this.ticks;
        const index48 = ticks.findIndex((t)=>t.value === value
        );
        if (index48 >= 0) {
            const opts = grid.setContext(this.getContext(index48));
            return opts.lineWidth;
        }
        return 0;
    }
    drawGrid(chartArea) {
        const grid = this.options.grid;
        const ctx = this.ctx;
        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
        let i, ilen;
        const drawLine = (p1, p2, style)=>{
            if (!style.width || !style.color) return;
            ctx.save();
            ctx.lineWidth = style.width;
            ctx.strokeStyle = style.color;
            ctx.setLineDash(style.borderDash || []);
            ctx.lineDashOffset = style.borderDashOffset;
            ctx.beginPath();
            ctx.moveTo(p1.x, p1.y);
            ctx.lineTo(p2.x, p2.y);
            ctx.stroke();
            ctx.restore();
        };
        if (grid.display) for(i = 0, ilen = items.length; i < ilen; ++i){
            const item = items[i];
            if (grid.drawOnChartArea) drawLine({
                x: item.x1,
                y: item.y1
            }, {
                x: item.x2,
                y: item.y2
            }, item);
            if (grid.drawTicks) drawLine({
                x: item.tx1,
                y: item.ty1
            }, {
                x: item.tx2,
                y: item.ty2
            }, {
                color: item.tickColor,
                width: item.tickWidth,
                borderDash: item.tickBorderDash,
                borderDashOffset: item.tickBorderDashOffset
            });
        }
    }
    drawBorder() {
        const { chart: chart , ctx: ctx , options: { grid: grid  }  } = this;
        const borderOpts = grid.setContext(this.getContext());
        const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;
        if (!axisWidth) return;
        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
        const borderValue = this._borderValue;
        let x1, x2, y1, y2;
        if (this.isHorizontal()) {
            x1 = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$71cec2538cb2c617(chart, this.left, axisWidth) - axisWidth / 2;
            x2 = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$71cec2538cb2c617(chart, this.right, lastLineWidth) + lastLineWidth / 2;
            y1 = y2 = borderValue;
        } else {
            y1 = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$71cec2538cb2c617(chart, this.top, axisWidth) - axisWidth / 2;
            y2 = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$71cec2538cb2c617(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
            x1 = x2 = borderValue;
        }
        ctx.save();
        ctx.lineWidth = borderOpts.borderWidth;
        ctx.strokeStyle = borderOpts.borderColor;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
        ctx.restore();
    }
    drawLabels(chartArea) {
        const optionTicks = this.options.ticks;
        if (!optionTicks.display) return;
        const ctx = this.ctx;
        const area = this._computeLabelArea();
        if (area) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$78acf4525d8a74c4(ctx, area);
        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
        let i, ilen;
        for(i = 0, ilen = items.length; i < ilen; ++i){
            const item = items[i];
            const tickFont = item.font;
            const label = item.label;
            if (item.backdrop) {
                ctx.fillStyle = item.backdrop.color;
                ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);
            }
            let y = item.textOffset;
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8743009a87fcb00f(ctx, label, 0, y, tickFont, item);
        }
        if (area) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dc98b0b04f4c7758(ctx);
    }
    drawTitle() {
        const { ctx: ctx , options: { position: position , title: title , reverse: reverse  }  } = this;
        if (!title.display) return;
        const font = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(title.font);
        const padding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(title.padding);
        const align = title.align;
        let offset = font.lineHeight / 2;
        if (position === "bottom" || position === "center" || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(position)) {
            offset += padding.bottom;
            if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(title.text)) offset += font.lineHeight * (title.text.length - 1);
        } else offset += padding.top;
        const { titleX: titleX , titleY: titleY , maxWidth: maxWidth , rotation: rotation  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$titleArgs(this, offset, position, align);
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8743009a87fcb00f(ctx, title.text, 0, 0, font, {
            color: title.color,
            maxWidth: maxWidth,
            rotation: rotation,
            textAlign: $df29249fe447c065$var$$a43aa20d3eb44e80$var$titleAlign(align, position, reverse),
            textBaseline: "middle",
            translation: [
                titleX,
                titleY
            ]
        });
    }
    draw(chartArea) {
        if (!this._isVisible()) return;
        this.drawBackground();
        this.drawGrid(chartArea);
        this.drawBorder();
        this.drawTitle();
        this.drawLabels(chartArea);
    }
    _layers() {
        const opts = this.options;
        const tz = opts.ticks && opts.ticks.z || 0;
        const gz = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(opts.grid && opts.grid.z, -1);
        if (!this._isVisible() || this.draw !== $df29249fe447c065$var$$a43aa20d3eb44e80$export$d60cfc58d3c358b6.prototype.draw) return [
            {
                z: tz,
                draw: (chartArea)=>{
                    this.draw(chartArea);
                }
            }
        ];
        return [
            {
                z: gz,
                draw: (chartArea)=>{
                    this.drawBackground();
                    this.drawGrid(chartArea);
                    this.drawTitle();
                }
            },
            {
                z: gz + 1,
                draw: ()=>{
                    this.drawBorder();
                }
            },
            {
                z: tz,
                draw: (chartArea)=>{
                    this.drawLabels(chartArea);
                }
            }
        ];
    }
    getMatchingVisibleMetas(type) {
        const metas = this.chart.getSortedVisibleDatasetMetas();
        const axisID = this.axis + "AxisID";
        const result = [];
        let i, ilen;
        for(i = 0, ilen = metas.length; i < ilen; ++i){
            const meta = metas[i];
            if (meta[axisID] === this.id && (!type || meta.type === type)) result.push(meta);
        }
        return result;
    }
    _resolveTickFontOptions(index49) {
        const opts = this.options.ticks.setContext(this.getContext(index49));
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(opts.font);
    }
    _maxDigits() {
        const fontSize = this._resolveTickFontOptions(0).lineHeight;
        return (this.isHorizontal() ? this.width : this.height) / fontSize;
    }
    constructor(cfg){
        super();
        this.id = cfg.id;
        this.type = cfg.type;
        this.options = undefined;
        this.ctx = cfg.ctx;
        this.chart = cfg.chart;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this._margins = {
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        };
        this.maxWidth = undefined;
        this.maxHeight = undefined;
        this.paddingTop = undefined;
        this.paddingBottom = undefined;
        this.paddingLeft = undefined;
        this.paddingRight = undefined;
        this.axis = undefined;
        this.labelRotation = undefined;
        this.min = undefined;
        this.max = undefined;
        this._range = undefined;
        this.ticks = [];
        this._gridLineItems = null;
        this._labelItems = null;
        this._labelSizes = null;
        this._length = 0;
        this._maxLength = 0;
        this._longestTextCache = {
        };
        this._startPixel = undefined;
        this._endPixel = undefined;
        this._reversePixels = false;
        this._userMax = undefined;
        this._userMin = undefined;
        this._suggestedMax = undefined;
        this._suggestedMin = undefined;
        this._ticksLength = 0;
        this._borderValue = 0;
        this._cache = {
        };
        this._dataLimitsCached = false;
        this.$context = undefined;
    }
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$var$TypedRegistry {
    isForType(type) {
        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
    }
    register(item) {
        const proto = Object.getPrototypeOf(item);
        let parentScope;
        if ($df29249fe447c065$var$$a43aa20d3eb44e80$var$isIChartComponent(proto)) parentScope = this.register(proto);
        const items = this.items;
        const id = item.id;
        const scope = this.scope + "." + id;
        if (!id) throw new Error("class does not have id: " + item);
        if (id in items) return scope;
        items[id] = item;
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$registerDefaults(item, scope, parentScope);
        if (this.override) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.override(item.id, item.overrides);
        return scope;
    }
    get(id) {
        return this.items[id];
    }
    unregister(item) {
        const items = this.items;
        const id = item.id;
        const scope = this.scope;
        if (id in items) delete items[id];
        if (scope && id in $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0[scope]) {
            delete $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0[scope][id];
            if (this.override) delete $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ce26c07117d59d6a[id];
        }
    }
    constructor(type, scope, override){
        this.type = type;
        this.scope = scope;
        this.override = override;
        this.items = Object.create(null);
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$registerDefaults(item, scope, parentScope) {
    const itemDefaults = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$6559d589eb85fbb6(Object.create(null), [
        parentScope ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.get(parentScope) : {
        },
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.get(scope),
        item.defaults
    ]);
    $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.set(scope, itemDefaults);
    if (item.defaultRoutes) $df29249fe447c065$var$$a43aa20d3eb44e80$var$routeDefaults(scope, item.defaultRoutes);
    if (item.descriptors) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.describe(scope, item.descriptors);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$routeDefaults(scope, routes) {
    Object.keys(routes).forEach((property)=>{
        const propertyParts = property.split(".");
        const sourceName = propertyParts.pop();
        const sourceScope = [
            scope
        ].concat(propertyParts).join(".");
        const parts = routes[property].split(".");
        const targetName = parts.pop();
        const targetScope = parts.join(".");
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.route(sourceScope, sourceName, targetScope, targetName);
    });
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$isIChartComponent(proto) {
    return "id" in proto && "defaults" in proto;
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$var$Registry {
    add(...args) {
        this._each("register", args);
    }
    remove(...args) {
        this._each("unregister", args);
    }
    addControllers(...args) {
        this._each("register", args, this.controllers);
    }
    addElements(...args) {
        this._each("register", args, this.elements);
    }
    addPlugins(...args) {
        this._each("register", args, this.plugins);
    }
    addScales(...args) {
        this._each("register", args, this.scales);
    }
    getController(id) {
        return this._get(id, this.controllers, "controller");
    }
    getElement(id) {
        return this._get(id, this.elements, "element");
    }
    getPlugin(id) {
        return this._get(id, this.plugins, "plugin");
    }
    getScale(id) {
        return this._get(id, this.scales, "scale");
    }
    removeControllers(...args) {
        this._each("unregister", args, this.controllers);
    }
    removeElements(...args) {
        this._each("unregister", args, this.elements);
    }
    removePlugins(...args) {
        this._each("unregister", args, this.plugins);
    }
    removeScales(...args) {
        this._each("unregister", args, this.scales);
    }
    _each(method, args, typedRegistry) {
        [
            ...args
        ].forEach((arg)=>{
            const reg = typedRegistry || this._getRegistryForType(arg);
            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) this._exec(method, reg, arg);
            else $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(arg, (item)=>{
                const itemReg = typedRegistry || this._getRegistryForType(item);
                this._exec(method, itemReg, item);
            });
        });
    }
    _exec(method, registry1, component) {
        const camelMethod = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efca4cbe5dd06740(method);
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(component["before" + camelMethod], [], component);
        registry1[method](component);
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(component["after" + camelMethod], [], component);
    }
    _getRegistryForType(type) {
        for(let i = 0; i < this._typedRegistries.length; i++){
            const reg = this._typedRegistries[i];
            if (reg.isForType(type)) return reg;
        }
        return this.plugins;
    }
    _get(id, typedRegistry, type) {
        const item = typedRegistry.get(id);
        if (item === undefined) throw new Error('"' + id + '" is not a registered ' + type + ".");
        return item;
    }
    constructor(){
        this.controllers = new $df29249fe447c065$var$$a43aa20d3eb44e80$var$TypedRegistry($df29249fe447c065$var$$a43aa20d3eb44e80$export$75572ec5c55b4048, "datasets", true);
        this.elements = new $df29249fe447c065$var$$a43aa20d3eb44e80$var$TypedRegistry($df29249fe447c065$var$$a43aa20d3eb44e80$export$db77ccec0bb4ccac, "elements");
        this.plugins = new $df29249fe447c065$var$$a43aa20d3eb44e80$var$TypedRegistry(Object, "plugins");
        this.scales = new $df29249fe447c065$var$$a43aa20d3eb44e80$var$TypedRegistry($df29249fe447c065$var$$a43aa20d3eb44e80$export$d60cfc58d3c358b6, "scales");
        this._typedRegistries = [
            this.controllers,
            this.scales,
            this.elements
        ];
    }
}
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$4bb7493d241fd8a5 = new $df29249fe447c065$var$$a43aa20d3eb44e80$var$Registry();
class $df29249fe447c065$var$$a43aa20d3eb44e80$var$PluginService {
    notify(chart, hook, args, filter) {
        if (hook === "beforeInit") {
            this._init = this._createDescriptors(chart, true);
            this._notify(this._init, chart, "install");
        }
        const descriptors1 = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
        const result = this._notify(descriptors1, chart, hook, args);
        if (hook === "afterDestroy") {
            this._notify(descriptors1, chart, "stop");
            this._notify(this._init, chart, "uninstall");
        }
        return result;
    }
    _notify(descriptors2, chart, hook, args) {
        args = args || {
        };
        for (const descriptor of descriptors2){
            const plugin = descriptor.plugin;
            const method = plugin[hook];
            const params = [
                chart,
                args,
                descriptor.options
            ];
            if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(method, params, plugin) === false && args.cancelable) return false;
        }
        return true;
    }
    invalidate() {
        if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(this._cache)) {
            this._oldCache = this._cache;
            this._cache = undefined;
        }
    }
    _descriptors(chart) {
        if (this._cache) return this._cache;
        const descriptors3 = this._cache = this._createDescriptors(chart);
        this._notifyStateChanges(chart);
        return descriptors3;
    }
    _createDescriptors(chart, all) {
        const config = chart && chart.config;
        const options = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(config.options && config.options.plugins, {
        });
        const plugins1 = $df29249fe447c065$var$$a43aa20d3eb44e80$var$allPlugins(config);
        return options === false && !all ? [] : $df29249fe447c065$var$$a43aa20d3eb44e80$var$createDescriptors(chart, plugins1, options, all);
    }
    _notifyStateChanges(chart) {
        const previousDescriptors = this._oldCache || [];
        const descriptors4 = this._cache;
        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id
                )
            )
        ;
        this._notify(diff(previousDescriptors, descriptors4), chart, "stop");
        this._notify(diff(descriptors4, previousDescriptors), chart, "start");
    }
    constructor(){
        this._init = [];
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$allPlugins(config) {
    const plugins2 = [];
    const keys = Object.keys($df29249fe447c065$var$$a43aa20d3eb44e80$export$4bb7493d241fd8a5.plugins.items);
    for(let i = 0; i < keys.length; i++)plugins2.push($df29249fe447c065$var$$a43aa20d3eb44e80$export$4bb7493d241fd8a5.getPlugin(keys[i]));
    const local = config.plugins || [];
    for(let i3 = 0; i3 < local.length; i3++){
        const plugin = local[i3];
        if (plugins2.indexOf(plugin) === -1) plugins2.push(plugin);
    }
    return plugins2;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getOpts(options, all) {
    if (!all && options === false) return null;
    if (options === true) return {
    };
    return options;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$createDescriptors(chart, plugins3, options, all) {
    const result = [];
    const context = chart.getContext();
    for(let i = 0; i < plugins3.length; i++){
        const plugin = plugins3[i];
        const id = plugin.id;
        const opts = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getOpts(options[id], all);
        if (opts === null) continue;
        result.push({
            plugin: plugin,
            options: $df29249fe447c065$var$$a43aa20d3eb44e80$var$pluginOpts(chart.config, plugin, opts, context)
        });
    }
    return result;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$pluginOpts(config, plugin, opts, context) {
    const keys = config.pluginScopeKeys(plugin);
    const scopes = config.getOptionScopes(opts, keys);
    return config.createResolver(scopes, context, [
        ""
    ], {
        scriptable: false,
        indexable: false,
        allKeys: true
    });
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getIndexAxis(type, options) {
    const datasetDefaults = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.datasets[type] || {
    };
    const datasetOptions = (options.datasets || {
    })[type] || {
    };
    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || "x";
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getAxisFromDefaultScaleID(id, indexAxis) {
    let axis = id;
    if (id === "_index_") axis = indexAxis;
    else if (id === "_value_") axis = indexAxis === "x" ? "y" : "x";
    return axis;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getDefaultScaleIDFromAxis(axis, indexAxis) {
    return axis === indexAxis ? "_index_" : "_value_";
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$axisFromPosition(position) {
    if (position === "top" || position === "bottom") return "x";
    if (position === "left" || position === "right") return "y";
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineAxis(id, scaleOptions) {
    if (id === "x" || id === "y") return id;
    return scaleOptions.axis || $df29249fe447c065$var$$a43aa20d3eb44e80$var$axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$mergeScaleConfig(config, options) {
    const chartDefaults = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ce26c07117d59d6a[config.type] || {
        scales: {
        }
    };
    const configScales = options.scales || {
    };
    const chartIndexAxis = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getIndexAxis(config.type, options);
    const firstIDs = Object.create(null);
    const scales3 = Object.create(null);
    Object.keys(configScales).forEach((id)=>{
        const scaleConf = configScales[id];
        if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(scaleConf)) return console.error(`Invalid scale configuration for scale: ${id}`);
        if (scaleConf._proxy) return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
        const axis = $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineAxis(id, scaleConf);
        const defaultId = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getDefaultScaleIDFromAxis(axis, chartIndexAxis);
        const defaultScaleOptions = chartDefaults.scales || {
        };
        firstIDs[axis] = firstIDs[axis] || id;
        scales3[id] = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7910e0436ed8d1de(Object.create(null), [
            {
                axis: axis
            },
            scaleConf,
            defaultScaleOptions[axis],
            defaultScaleOptions[defaultId]
        ]);
    });
    config.data.datasets.forEach((dataset)=>{
        const type = dataset.type || config.type;
        const indexAxis = dataset.indexAxis || $df29249fe447c065$var$$a43aa20d3eb44e80$var$getIndexAxis(type, options);
        const datasetDefaults = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ce26c07117d59d6a[type] || {
        };
        const defaultScaleOptions = datasetDefaults.scales || {
        };
        Object.keys(defaultScaleOptions).forEach((defaultID)=>{
            const axis = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getAxisFromDefaultScaleID(defaultID, indexAxis);
            const id = dataset[axis + "AxisID"] || firstIDs[axis] || axis;
            scales3[id] = scales3[id] || Object.create(null);
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7910e0436ed8d1de(scales3[id], [
                {
                    axis: axis
                },
                configScales[id],
                defaultScaleOptions[defaultID]
            ]);
        });
    });
    Object.keys(scales3).forEach((key)=>{
        const scale = scales3[key];
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7910e0436ed8d1de(scale, [
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.scales[scale.type],
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.scale
        ]);
    });
    return scales3;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$initOptions(config) {
    const options = config.options || (config.options = {
    });
    options.plugins = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(options.plugins, {
    });
    options.scales = $df29249fe447c065$var$$a43aa20d3eb44e80$var$mergeScaleConfig(config, options);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$initData(data) {
    data = data || {
    };
    data.datasets = data.datasets || [];
    data.labels = data.labels || [];
    return data;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$initConfig(config) {
    config = config || {
    };
    config.data = $df29249fe447c065$var$$a43aa20d3eb44e80$var$initData(config.data);
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$initOptions(config);
    return config;
}
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$keyCache = new Map();
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$keysCached = new Set();
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$cachedKeys(cacheKey, generate) {
    let keys = $df29249fe447c065$var$$a43aa20d3eb44e80$var$keyCache.get(cacheKey);
    if (!keys) {
        keys = generate();
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$keyCache.set(cacheKey, keys);
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$keysCached.add(keys);
    }
    return keys;
}
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$addIfFound = (set, obj, key)=>{
    const opts = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2d1720544b23b823(obj, key);
    if (opts !== undefined) set.add(opts);
};
class $df29249fe447c065$var$$a43aa20d3eb44e80$var$Config {
    get platform() {
        return this._config.platform;
    }
    get type() {
        return this._config.type;
    }
    set type(type) {
        this._config.type = type;
    }
    get data() {
        return this._config.data;
    }
    set data(data) {
        this._config.data = $df29249fe447c065$var$$a43aa20d3eb44e80$var$initData(data);
    }
    get options() {
        return this._config.options;
    }
    set options(options) {
        this._config.options = options;
    }
    get plugins() {
        return this._config.plugins;
    }
    update() {
        const config = this._config;
        this.clearCache();
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$initOptions(config);
    }
    clearCache() {
        this._scopeCache.clear();
        this._resolverCache.clear();
    }
    datasetScopeKeys(datasetType) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$cachedKeys(datasetType, ()=>[
                [
                    `datasets.${datasetType}`,
                    ""
                ]
            ]
        );
    }
    datasetAnimationScopeKeys(datasetType, transition) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$cachedKeys(`${datasetType}.transition.${transition}`, ()=>[
                [
                    `datasets.${datasetType}.transitions.${transition}`,
                    `transitions.${transition}`, 
                ],
                [
                    `datasets.${datasetType}`,
                    ""
                ]
            ]
        );
    }
    datasetElementScopeKeys(datasetType, elementType) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$cachedKeys(`${datasetType}-${elementType}`, ()=>[
                [
                    `datasets.${datasetType}.elements.${elementType}`,
                    `datasets.${datasetType}`,
                    `elements.${elementType}`,
                    ""
                ]
            ]
        );
    }
    pluginScopeKeys(plugin) {
        const id = plugin.id;
        const type = this.type;
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$cachedKeys(`${type}-plugin-${id}`, ()=>[
                [
                    `plugins.${id}`,
                    ...plugin.additionalOptionScopes || [], 
                ]
            ]
        );
    }
    _cachedScopes(mainScope, resetCache) {
        const _scopeCache = this._scopeCache;
        let cache = _scopeCache.get(mainScope);
        if (!cache || resetCache) {
            cache = new Map();
            _scopeCache.set(mainScope, cache);
        }
        return cache;
    }
    getOptionScopes(mainScope, keyLists, resetCache) {
        const { options: options , type: type  } = this;
        const cache = this._cachedScopes(mainScope, resetCache);
        const cached = cache.get(keyLists);
        if (cached) return cached;
        const scopes = new Set();
        keyLists.forEach((keys)=>{
            if (mainScope) {
                scopes.add(mainScope);
                keys.forEach((key)=>$df29249fe447c065$var$$a43aa20d3eb44e80$var$addIfFound(scopes, mainScope, key)
                );
            }
            keys.forEach((key)=>$df29249fe447c065$var$$a43aa20d3eb44e80$var$addIfFound(scopes, options, key)
            );
            keys.forEach((key)=>$df29249fe447c065$var$$a43aa20d3eb44e80$var$addIfFound(scopes, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ce26c07117d59d6a[type] || {
                }, key)
            );
            keys.forEach((key)=>$df29249fe447c065$var$$a43aa20d3eb44e80$var$addIfFound(scopes, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0, key)
            );
            keys.forEach((key)=>$df29249fe447c065$var$$a43aa20d3eb44e80$var$addIfFound(scopes, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a8550f7dbe79f93a, key)
            );
        });
        const array = Array.from(scopes);
        if (array.length === 0) array.push(Object.create(null));
        if ($df29249fe447c065$var$$a43aa20d3eb44e80$var$keysCached.has(keyLists)) cache.set(keyLists, array);
        return array;
    }
    chartOptionScopes() {
        const { options: options , type: type  } = this;
        return [
            options,
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ce26c07117d59d6a[type] || {
            },
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.datasets[type] || {
            },
            {
                type: type
            },
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0,
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a8550f7dbe79f93a
        ];
    }
    resolveNamedOptions(scopes, names, context, prefixes = [
        ""
    ]) {
        const result = {
            $shared: true
        };
        const { resolver: resolver , subPrefixes: subPrefixes  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getResolver(this._resolverCache, scopes, prefixes);
        let options = resolver;
        if ($df29249fe447c065$var$$a43aa20d3eb44e80$var$needContext(resolver, names)) {
            result.$shared = false;
            context = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2e2af4578d910ddf(context) ? context() : context;
            const subResolver = this.createResolver(scopes, context, subPrefixes);
            options = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a93c5207d687da10(resolver, context, subResolver);
        }
        for (const prop of names)result[prop] = options[prop];
        return result;
    }
    createResolver(scopes, context, prefixes = [
        ""
    ], descriptorDefaults) {
        const { resolver: resolver  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getResolver(this._resolverCache, scopes, prefixes);
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(context) ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a93c5207d687da10(resolver, context, undefined, descriptorDefaults) : resolver;
    }
    constructor(config){
        this._config = $df29249fe447c065$var$$a43aa20d3eb44e80$var$initConfig(config);
        this._scopeCache = new Map();
        this._resolverCache = new Map();
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getResolver(resolverCache, scopes, prefixes) {
    let cache = resolverCache.get(scopes);
    if (!cache) {
        cache = new Map();
        resolverCache.set(scopes, cache);
    }
    const cacheKey = prefixes.join();
    let cached = cache.get(cacheKey);
    if (!cached) {
        const resolver = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c3950d9923825c02(scopes, prefixes);
        cached = {
            resolver: resolver,
            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes("hover")
            )
        };
        cache.set(cacheKey, cached);
    }
    return cached;
}
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$hasFunction = (value)=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(value) && Object.getOwnPropertyNames(value).reduce((acc, key)=>acc || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2e2af4578d910ddf(value[key])
    , false)
;
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$needContext(proxy, names) {
    const { isScriptable: isScriptable , isIndexable: isIndexable  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c996f45e5784d0(proxy);
    for (const prop of names){
        const scriptable = isScriptable(prop);
        const indexable = isIndexable(prop);
        const value = (indexable || scriptable) && proxy[prop];
        if (scriptable && ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2e2af4578d910ddf(value) || $df29249fe447c065$var$$a43aa20d3eb44e80$var$hasFunction(value)) || indexable && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(value)) return true;
    }
    return false;
}
var $df29249fe447c065$var$$a43aa20d3eb44e80$var$version = "3.8.0";
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$KNOWN_POSITIONS = [
    "top",
    "bottom",
    "left",
    "right",
    "chartArea"
];
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$positionIsHorizontal(position, axis) {
    return position === "top" || position === "bottom" || $df29249fe447c065$var$$a43aa20d3eb44e80$var$KNOWN_POSITIONS.indexOf(position) === -1 && axis === "x";
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$compare2Level(l1, l2) {
    return function(a, b) {
        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$onAnimationsComplete(context) {
    const chart = context.chart;
    const animationOptions1 = chart.options.animation;
    chart.notifyPlugins("afterRender");
    $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(animationOptions1 && animationOptions1.onComplete, [
        context
    ], chart);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$onAnimationProgress(context) {
    const chart = context.chart;
    const animationOptions2 = chart.options.animation;
    $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(animationOptions2 && animationOptions2.onProgress, [
        context
    ], chart);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getCanvas(item) {
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$61196ced6d74a310() && typeof item === "string") item = document.getElementById(item);
    else if (item && item.length) item = item[0];
    if (item && item.canvas) item = item.canvas;
    return item;
}
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$instances = {
};
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$getChart = (key)=>{
    const canvas = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getCanvas(key);
    return Object.values($df29249fe447c065$var$$a43aa20d3eb44e80$var$instances).filter((c)=>c.canvas === canvas
    ).pop();
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$moveNumericKeys(obj, start, move) {
    const keys = Object.keys(obj);
    for (const key of keys){
        const intKey = +key;
        if (intKey >= start) {
            const value = obj[key];
            delete obj[key];
            if (move > 0 || intKey > start) obj[intKey + move] = value;
        }
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineLastEvent(e, lastEvent, inChartArea, isClick) {
    if (!inChartArea || e.type === "mouseout") return null;
    if (isClick) return lastEvent;
    return e;
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$acaa6426d77a227e {
    get aspectRatio() {
        const { options: { aspectRatio: aspectRatio , maintainAspectRatio: maintainAspectRatio  } , width: width , height: height , _aspectRatio: _aspectRatio  } = this;
        if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(aspectRatio)) return aspectRatio;
        if (maintainAspectRatio && _aspectRatio) return _aspectRatio;
        return height ? width / height : null;
    }
    get data() {
        return this.config.data;
    }
    set data(data) {
        this.config.data = data;
    }
    get options() {
        return this._options;
    }
    set options(options) {
        this.config.options = options;
    }
    _initialize() {
        this.notifyPlugins("beforeInit");
        if (this.options.responsive) this.resize();
        else $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4c3d22f3d993c33f(this, this.options.devicePixelRatio);
        this.bindEvents();
        this.notifyPlugins("afterInit");
        return this;
    }
    clear() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f787f51d84a910ad(this.canvas, this.ctx);
        return this;
    }
    stop() {
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$a424a0aa8f687495.stop(this);
        return this;
    }
    resize(width, height) {
        if (!$df29249fe447c065$var$$a43aa20d3eb44e80$export$a424a0aa8f687495.running(this)) this._resize(width, height);
        else this._resizeBeforeDraw = {
            width: width,
            height: height
        };
    }
    _resize(width, height) {
        const options = this.options;
        const canvas = this.canvas;
        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
        const mode = this.width ? "resize" : "attach";
        this.width = newSize.width;
        this.height = newSize.height;
        this._aspectRatio = this.aspectRatio;
        if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4c3d22f3d993c33f(this, newRatio, true)) return;
        this.notifyPlugins("resize", {
            size: newSize
        });
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(options.onResize, [
            this,
            newSize
        ], this);
        if (this.attached) {
            if (this._doResize(mode)) this.render();
        }
    }
    ensureScalesHaveIDs() {
        const options = this.options;
        const scalesOptions = options.scales || {
        };
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(scalesOptions, (axisOptions, axisID)=>{
            axisOptions.id = axisID;
        });
    }
    buildOrUpdateScales() {
        const options = this.options;
        const scaleOpts = options.scales;
        const scales4 = this.scales;
        const updated = Object.keys(scales4).reduce((obj, id)=>{
            obj[id] = false;
            return obj;
        }, {
        });
        let items = [];
        if (scaleOpts) items = items.concat(Object.keys(scaleOpts).map((id)=>{
            const scaleOptions = scaleOpts[id];
            const axis = $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineAxis(id, scaleOptions);
            const isRadial = axis === "r";
            const isHorizontal = axis === "x";
            return {
                options: scaleOptions,
                dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
                dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
            };
        }));
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(items, (item)=>{
            const scaleOptions = item.options;
            const id = scaleOptions.id;
            const axis = $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineAxis(id, scaleOptions);
            const scaleType = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(scaleOptions.type, item.dtype);
            if (scaleOptions.position === undefined || $df29249fe447c065$var$$a43aa20d3eb44e80$var$positionIsHorizontal(scaleOptions.position, axis) !== $df29249fe447c065$var$$a43aa20d3eb44e80$var$positionIsHorizontal(item.dposition)) scaleOptions.position = item.dposition;
            updated[id] = true;
            let scale = null;
            if (id in scales4 && scales4[id].type === scaleType) scale = scales4[id];
            else {
                const scaleClass = $df29249fe447c065$var$$a43aa20d3eb44e80$export$4bb7493d241fd8a5.getScale(scaleType);
                scale = new scaleClass({
                    id: id,
                    type: scaleType,
                    ctx: this.ctx,
                    chart: this
                });
                scales4[scale.id] = scale;
            }
            scale.init(scaleOptions, options);
        });
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(updated, (hasUpdated, id)=>{
            if (!hasUpdated) delete scales4[id];
        });
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(scales4, (scale)=>{
            $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.configure(this, scale, scale.options);
            $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.addBox(this, scale);
        });
    }
    _updateMetasets() {
        const metasets = this._metasets;
        const numData = this.data.datasets.length;
        const numMeta = metasets.length;
        metasets.sort((a, b)=>a.index - b.index
        );
        if (numMeta > numData) {
            for(let i = numData; i < numMeta; ++i)this._destroyDatasetMeta(i);
            metasets.splice(numData, numMeta - numData);
        }
        this._sortedMetasets = metasets.slice(0).sort($df29249fe447c065$var$$a43aa20d3eb44e80$var$compare2Level("order", "index"));
    }
    _removeUnreferencedMetasets() {
        const { _metasets: metasets , data: { datasets: datasets  }  } = this;
        if (metasets.length > datasets.length) delete this._stacks;
        metasets.forEach((meta, index50)=>{
            if (datasets.filter((x)=>x === meta._dataset
            ).length === 0) this._destroyDatasetMeta(index50);
        });
    }
    buildOrUpdateControllers() {
        const newControllers = [];
        const datasets = this.data.datasets;
        let i, ilen;
        this._removeUnreferencedMetasets();
        for(i = 0, ilen = datasets.length; i < ilen; i++){
            const dataset = datasets[i];
            let meta = this.getDatasetMeta(i);
            const type = dataset.type || this.config.type;
            if (meta.type && meta.type !== type) {
                this._destroyDatasetMeta(i);
                meta = this.getDatasetMeta(i);
            }
            meta.type = type;
            meta.indexAxis = dataset.indexAxis || $df29249fe447c065$var$$a43aa20d3eb44e80$var$getIndexAxis(type, this.options);
            meta.order = dataset.order || 0;
            meta.index = i;
            meta.label = "" + dataset.label;
            meta.visible = this.isDatasetVisible(i);
            if (meta.controller) {
                meta.controller.updateIndex(i);
                meta.controller.linkScales();
            } else {
                const ControllerClass = $df29249fe447c065$var$$a43aa20d3eb44e80$export$4bb7493d241fd8a5.getController(type);
                const { datasetElementType: datasetElementType , dataElementType: dataElementType  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.datasets[type];
                Object.assign(ControllerClass.prototype, {
                    dataElementType: $df29249fe447c065$var$$a43aa20d3eb44e80$export$4bb7493d241fd8a5.getElement(dataElementType),
                    datasetElementType: datasetElementType && $df29249fe447c065$var$$a43aa20d3eb44e80$export$4bb7493d241fd8a5.getElement(datasetElementType)
                });
                meta.controller = new ControllerClass(this, i);
                newControllers.push(meta.controller);
            }
        }
        this._updateMetasets();
        return newControllers;
    }
    _resetElements() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(this.data.datasets, (dataset, datasetIndex)=>{
            this.getDatasetMeta(datasetIndex).controller.reset();
        }, this);
    }
    reset() {
        this._resetElements();
        this.notifyPlugins("reset");
    }
    update(mode) {
        const config = this.config;
        config.update();
        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
        const animsDisabled = this._animationsDisabled = !options.animation;
        this._updateScales();
        this._checkEventBindings();
        this._updateHiddenIndices();
        this._plugins.invalidate();
        if (this.notifyPlugins("beforeUpdate", {
            mode: mode,
            cancelable: true
        }) === false) return;
        const newControllers = this.buildOrUpdateControllers();
        this.notifyPlugins("beforeElementsUpdate");
        let minPadding = 0;
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){
            const { controller: controller  } = this.getDatasetMeta(i);
            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
            controller.buildOrUpdateElements(reset);
            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
        }
        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
        this._updateLayout(minPadding);
        if (!animsDisabled) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(newControllers, (controller)=>{
            controller.reset();
        });
        this._updateDatasets(mode);
        this.notifyPlugins("afterUpdate", {
            mode: mode
        });
        this._layers.sort($df29249fe447c065$var$$a43aa20d3eb44e80$var$compare2Level("z", "_idx"));
        const { _active: _active , _lastEvent: _lastEvent  } = this;
        if (_lastEvent) this._eventHandler(_lastEvent, true);
        else if (_active.length) this._updateHoverStyles(_active, _active, true);
        this.render();
    }
    _updateScales() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(this.scales, (scale)=>{
            $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.removeBox(this, scale);
        });
        this.ensureScalesHaveIDs();
        this.buildOrUpdateScales();
    }
    _checkEventBindings() {
        const options = this.options;
        const existingEvents = new Set(Object.keys(this._listeners));
        const newEvents = new Set(options.events);
        if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c9170ad7d4cd7e57(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
            this.unbindEvents();
            this.bindEvents();
        }
    }
    _updateHiddenIndices() {
        const { _hiddenIndices: _hiddenIndices  } = this;
        const changes = this._getUniformDataChanges() || [];
        for (const { method: method , start: start , count: count  } of changes){
            const move = method === "_removeElements" ? -count : count;
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$moveNumericKeys(_hiddenIndices, start, move);
        }
    }
    _getUniformDataChanges() {
        const _dataChanges = this._dataChanges;
        if (!_dataChanges || !_dataChanges.length) return;
        this._dataChanges = [];
        const datasetCount = this.data.datasets.length;
        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx
            ).map((c, i)=>i + "," + c.splice(1).join(",")
            ))
        ;
        const changeSet = makeSet(0);
        for(let i4 = 1; i4 < datasetCount; i4++){
            if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c9170ad7d4cd7e57(changeSet, makeSet(i4))) return;
        }
        return Array.from(changeSet).map((c)=>c.split(",")
        ).map((a)=>({
                method: a[1],
                start: +a[2],
                count: +a[3]
            })
        );
    }
    _updateLayout(minPadding) {
        if (this.notifyPlugins("beforeLayout", {
            cancelable: true
        }) === false) return;
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.update(this, this.width, this.height, minPadding);
        const area = this.chartArea;
        const noArea = area.width <= 0 || area.height <= 0;
        this._layers = [];
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(this.boxes, (box)=>{
            if (noArea && box.position === "chartArea") return;
            if (box.configure) box.configure();
            this._layers.push(...box._layers());
        }, this);
        this._layers.forEach((item, index51)=>{
            item._idx = index51;
        });
        this.notifyPlugins("afterLayout");
    }
    _updateDatasets(mode) {
        if (this.notifyPlugins("beforeDatasetsUpdate", {
            mode: mode,
            cancelable: true
        }) === false) return;
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this.getDatasetMeta(i).controller.configure();
        for(let i5 = 0, ilen1 = this.data.datasets.length; i5 < ilen1; ++i5)this._updateDataset(i5, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2e2af4578d910ddf(mode) ? mode({
            datasetIndex: i5
        }) : mode);
        this.notifyPlugins("afterDatasetsUpdate", {
            mode: mode
        });
    }
    _updateDataset(index52, mode) {
        const meta = this.getDatasetMeta(index52);
        const args = {
            meta: meta,
            index: index52,
            mode: mode,
            cancelable: true
        };
        if (this.notifyPlugins("beforeDatasetUpdate", args) === false) return;
        meta.controller._update(mode);
        args.cancelable = false;
        this.notifyPlugins("afterDatasetUpdate", args);
    }
    render() {
        if (this.notifyPlugins("beforeRender", {
            cancelable: true
        }) === false) return;
        if ($df29249fe447c065$var$$a43aa20d3eb44e80$export$a424a0aa8f687495.has(this)) {
            if (this.attached && !$df29249fe447c065$var$$a43aa20d3eb44e80$export$a424a0aa8f687495.running(this)) $df29249fe447c065$var$$a43aa20d3eb44e80$export$a424a0aa8f687495.start(this);
        } else {
            this.draw();
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$onAnimationsComplete({
                chart: this
            });
        }
    }
    draw() {
        let i;
        if (this._resizeBeforeDraw) {
            const { width: width , height: height  } = this._resizeBeforeDraw;
            this._resize(width, height);
            this._resizeBeforeDraw = null;
        }
        this.clear();
        if (this.width <= 0 || this.height <= 0) return;
        if (this.notifyPlugins("beforeDraw", {
            cancelable: true
        }) === false) return;
        const layers = this._layers;
        for(i = 0; i < layers.length && layers[i].z <= 0; ++i)layers[i].draw(this.chartArea);
        this._drawDatasets();
        for(; i < layers.length; ++i)layers[i].draw(this.chartArea);
        this.notifyPlugins("afterDraw");
    }
    _getSortedDatasetMetas(filterVisible) {
        const metasets = this._sortedMetasets;
        const result = [];
        let i, ilen;
        for(i = 0, ilen = metasets.length; i < ilen; ++i){
            const meta = metasets[i];
            if (!filterVisible || meta.visible) result.push(meta);
        }
        return result;
    }
    getSortedVisibleDatasetMetas() {
        return this._getSortedDatasetMetas(true);
    }
    _drawDatasets() {
        if (this.notifyPlugins("beforeDatasetsDraw", {
            cancelable: true
        }) === false) return;
        const metasets = this.getSortedVisibleDatasetMetas();
        for(let i = metasets.length - 1; i >= 0; --i)this._drawDataset(metasets[i]);
        this.notifyPlugins("afterDatasetsDraw");
    }
    _drawDataset(meta) {
        const ctx = this.ctx;
        const clip = meta._clip;
        const useClip = !clip.disabled;
        const area = this.chartArea;
        const args = {
            meta: meta,
            index: meta.index,
            cancelable: true
        };
        if (this.notifyPlugins("beforeDatasetDraw", args) === false) return;
        if (useClip) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$78acf4525d8a74c4(ctx, {
            left: clip.left === false ? 0 : area.left - clip.left,
            right: clip.right === false ? this.width : area.right + clip.right,
            top: clip.top === false ? 0 : area.top - clip.top,
            bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
        });
        meta.controller.draw();
        if (useClip) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dc98b0b04f4c7758(ctx);
        args.cancelable = false;
        this.notifyPlugins("afterDatasetDraw", args);
    }
    isPointInArea(point) {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ef35774e6d314e91(point, this.chartArea, this._minPadding);
    }
    getElementsAtEventForMode(e, mode, options, useFinalPosition) {
        const method = $df29249fe447c065$var$$a43aa20d3eb44e80$export$a13296960cae0384.modes[mode];
        if (typeof method === "function") return method(this, e, options, useFinalPosition);
        return [];
    }
    getDatasetMeta(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        const metasets = this._metasets;
        let meta = metasets.filter((x)=>x && x._dataset === dataset
        ).pop();
        if (!meta) {
            meta = {
                type: null,
                data: [],
                dataset: null,
                controller: null,
                hidden: null,
                xAxisID: null,
                yAxisID: null,
                order: dataset && dataset.order || 0,
                index: datasetIndex,
                _dataset: dataset,
                _parsed: [],
                _sorted: false
            };
            metasets.push(meta);
        }
        return meta;
    }
    getContext() {
        return this.$context || (this.$context = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dda1d9f60106f0e9(null, {
            chart: this,
            type: "chart"
        }));
    }
    getVisibleDatasetCount() {
        return this.getSortedVisibleDatasetMetas().length;
    }
    isDatasetVisible(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        if (!dataset) return false;
        const meta = this.getDatasetMeta(datasetIndex);
        return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
    }
    setDatasetVisibility(datasetIndex, visible) {
        const meta = this.getDatasetMeta(datasetIndex);
        meta.hidden = !visible;
    }
    toggleDataVisibility(index53) {
        this._hiddenIndices[index53] = !this._hiddenIndices[index53];
    }
    getDataVisibility(index54) {
        return !this._hiddenIndices[index54];
    }
    _updateVisibility(datasetIndex, dataIndex, visible) {
        const mode = visible ? "show" : "hide";
        const meta = this.getDatasetMeta(datasetIndex);
        const anims = meta.controller._resolveAnimations(undefined, mode);
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$35e795649ee09318(dataIndex)) {
            meta.data[dataIndex].hidden = !visible;
            this.update();
        } else {
            this.setDatasetVisibility(datasetIndex, visible);
            anims.update(meta, {
                visible: visible
            });
            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined
            );
        }
    }
    hide(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, false);
    }
    show(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, true);
    }
    _destroyDatasetMeta(datasetIndex) {
        const meta = this._metasets[datasetIndex];
        if (meta && meta.controller) meta.controller._destroy();
        delete this._metasets[datasetIndex];
    }
    _stop() {
        let i, ilen;
        this.stop();
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$a424a0aa8f687495.remove(this);
        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this._destroyDatasetMeta(i);
    }
    destroy() {
        this.notifyPlugins("beforeDestroy");
        const { canvas: canvas , ctx: ctx  } = this;
        this._stop();
        this.config.clearCache();
        if (canvas) {
            this.unbindEvents();
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f787f51d84a910ad(canvas, ctx);
            this.platform.releaseContext(ctx);
            this.canvas = null;
            this.ctx = null;
        }
        this.notifyPlugins("destroy");
        delete $df29249fe447c065$var$$a43aa20d3eb44e80$var$instances[this.id];
        this.notifyPlugins("afterDestroy");
    }
    toBase64Image(...args) {
        return this.canvas.toDataURL(...args);
    }
    bindEvents() {
        this.bindUserEvents();
        if (this.options.responsive) this.bindResponsiveEvents();
        else this.attached = true;
    }
    bindUserEvents() {
        const listeners = this._listeners;
        const platform = this.platform;
        const _add = (type, listener)=>{
            platform.addEventListener(this, type, listener);
            listeners[type] = listener;
        };
        const listener1 = (e, x, y)=>{
            e.offsetX = x;
            e.offsetY = y;
            this._eventHandler(e);
        };
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(this.options.events, (type)=>_add(type, listener1)
        );
    }
    bindResponsiveEvents() {
        if (!this._responsiveListeners) this._responsiveListeners = {
        };
        const listeners = this._responsiveListeners;
        const platform = this.platform;
        const _add = (type, listener)=>{
            platform.addEventListener(this, type, listener);
            listeners[type] = listener;
        };
        const _remove = (type, listener)=>{
            if (listeners[type]) {
                platform.removeEventListener(this, type, listener);
                delete listeners[type];
            }
        };
        const listener2 = (width, height)=>{
            if (this.canvas) this.resize(width, height);
        };
        let detached;
        const attached = ()=>{
            _remove("attach", attached);
            this.attached = true;
            this.resize();
            _add("resize", listener2);
            _add("detach", detached);
        };
        detached = ()=>{
            this.attached = false;
            _remove("resize", listener2);
            this._stop();
            this._resize(0, 0);
            _add("attach", attached);
        };
        if (platform.isAttached(this.canvas)) attached();
        else detached();
    }
    unbindEvents() {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(this._listeners, (listener, type)=>{
            this.platform.removeEventListener(this, type, listener);
        });
        this._listeners = {
        };
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(this._responsiveListeners, (listener, type)=>{
            this.platform.removeEventListener(this, type, listener);
        });
        this._responsiveListeners = undefined;
    }
    updateHoverStyle(items, mode, enabled) {
        const prefix = enabled ? "set" : "remove";
        let meta, item, i, ilen;
        if (mode === "dataset") {
            meta = this.getDatasetMeta(items[0].datasetIndex);
            meta.controller["_" + prefix + "DatasetHoverStyle"]();
        }
        for(i = 0, ilen = items.length; i < ilen; ++i){
            item = items[i];
            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
            if (controller) controller[prefix + "HoverStyle"](item.element, item.datasetIndex, item.index);
        }
    }
    getActiveElements() {
        return this._active || [];
    }
    setActiveElements(activeElements) {
        const lastActive = this._active || [];
        const active = activeElements.map(({ datasetIndex: datasetIndex , index: index55  })=>{
            const meta = this.getDatasetMeta(datasetIndex);
            if (!meta) throw new Error("No dataset found at index " + datasetIndex);
            return {
                datasetIndex: datasetIndex,
                element: meta.data[index55],
                index: index55
            };
        });
        const changed = !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ee7c8ad385a60b7b(active, lastActive);
        if (changed) {
            this._active = active;
            this._lastEvent = null;
            this._updateHoverStyles(active, lastActive);
        }
    }
    notifyPlugins(hook, args, filter) {
        return this._plugins.notify(this, hook, args, filter);
    }
    _updateHoverStyles(active, lastActive, replay) {
        const hoverOptions = this.options.hover;
        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index
                )
            )
        ;
        const deactivated = diff(lastActive, active);
        const activated = replay ? active : diff(active, lastActive);
        if (deactivated.length) this.updateHoverStyle(deactivated, hoverOptions.mode, false);
        if (activated.length && hoverOptions.mode) this.updateHoverStyle(activated, hoverOptions.mode, true);
    }
    _eventHandler(e, replay) {
        const args = {
            event: e,
            replay: replay,
            cancelable: true,
            inChartArea: this.isPointInArea(e)
        };
        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type)
        ;
        if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) return;
        const changed = this._handleEvent(e, replay, args.inChartArea);
        args.cancelable = false;
        this.notifyPlugins("afterEvent", args, eventFilter);
        if (changed || args.changed) this.render();
        return this;
    }
    _handleEvent(e, replay, inChartArea) {
        const { _active: lastActive = [] , options: options  } = this;
        const useFinalPosition = replay;
        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
        const isClick = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$995eb9fca571757(e);
        const lastEvent = $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineLastEvent(e, this._lastEvent, inChartArea, isClick);
        if (inChartArea) {
            this._lastEvent = null;
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(options.onHover, [
                e,
                active,
                this
            ], this);
            if (isClick) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(options.onClick, [
                e,
                active,
                this
            ], this);
        }
        const changed = !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ee7c8ad385a60b7b(active, lastActive);
        if (changed || replay) {
            this._active = active;
            this._updateHoverStyles(active, lastActive, replay);
        }
        this._lastEvent = lastEvent;
        return changed;
    }
    _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
        if (e.type === "mouseout") return [];
        if (!inChartArea) return lastActive;
        const hoverOptions = this.options.hover;
        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
    }
    constructor(item, userConfig){
        const config = this.config = new $df29249fe447c065$var$$a43aa20d3eb44e80$var$Config(userConfig);
        const initialCanvas = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getCanvas(item);
        const existingChart = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getChart(initialCanvas);
        if (existingChart) throw new Error("Canvas is already in use. Chart with ID '" + existingChart.id + "'" + " must be destroyed before the canvas can be reused.");
        const options = config.createResolver(config.chartOptionScopes(), this.getContext());
        this.platform = new (config.platform || $df29249fe447c065$var$$a43aa20d3eb44e80$export$72cd9e67b1b784f9(initialCanvas))();
        this.platform.updateConfig(config);
        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
        const canvas = context && context.canvas;
        const height = canvas && canvas.height;
        const width = canvas && canvas.width;
        this.id = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$555508cbc6add439();
        this.ctx = context;
        this.canvas = canvas;
        this.width = width;
        this.height = height;
        this._options = options;
        this._aspectRatio = this.aspectRatio;
        this._layers = [];
        this._metasets = [];
        this._stacks = undefined;
        this.boxes = [];
        this.currentDevicePixelRatio = undefined;
        this.chartArea = undefined;
        this._active = [];
        this._lastEvent = undefined;
        this._listeners = {
        };
        this._responsiveListeners = undefined;
        this._sortedMetasets = [];
        this.scales = {
        };
        this._plugins = new $df29249fe447c065$var$$a43aa20d3eb44e80$var$PluginService();
        this.$proxies = {
        };
        this._hiddenIndices = {
        };
        this.attached = false;
        this._animationsDisabled = undefined;
        this.$context = undefined;
        this._doResize = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2219238a014317b0((mode)=>this.update(mode)
        , options.resizeDelay || 0);
        this._dataChanges = [];
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$instances[this.id] = this;
        if (!context || !canvas) {
            console.error("Failed to create chart: can't acquire context from the given item");
            return;
        }
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$a424a0aa8f687495.listen(this, "complete", $df29249fe447c065$var$$a43aa20d3eb44e80$var$onAnimationsComplete);
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$a424a0aa8f687495.listen(this, "progress", $df29249fe447c065$var$$a43aa20d3eb44e80$var$onAnimationProgress);
        this._initialize();
        if (this.attached) this.update();
    }
}
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$invalidatePlugins = ()=>$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca($df29249fe447c065$var$$a43aa20d3eb44e80$export$acaa6426d77a227e.instances, (chart)=>chart._plugins.invalidate()
    )
;
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$enumerable = true;
Object.defineProperties($df29249fe447c065$var$$a43aa20d3eb44e80$export$acaa6426d77a227e, {
    defaults: {
        enumerable: $df29249fe447c065$var$$a43aa20d3eb44e80$var$enumerable,
        value: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0
    },
    instances: {
        enumerable: $df29249fe447c065$var$$a43aa20d3eb44e80$var$enumerable,
        value: $df29249fe447c065$var$$a43aa20d3eb44e80$var$instances
    },
    overrides: {
        enumerable: $df29249fe447c065$var$$a43aa20d3eb44e80$var$enumerable,
        value: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ce26c07117d59d6a
    },
    registry: {
        enumerable: $df29249fe447c065$var$$a43aa20d3eb44e80$var$enumerable,
        value: $df29249fe447c065$var$$a43aa20d3eb44e80$export$4bb7493d241fd8a5
    },
    version: {
        enumerable: $df29249fe447c065$var$$a43aa20d3eb44e80$var$enumerable,
        value: $df29249fe447c065$var$$a43aa20d3eb44e80$var$version
    },
    getChart: {
        enumerable: $df29249fe447c065$var$$a43aa20d3eb44e80$var$enumerable,
        value: $df29249fe447c065$var$$a43aa20d3eb44e80$var$getChart
    },
    register: {
        enumerable: $df29249fe447c065$var$$a43aa20d3eb44e80$var$enumerable,
        value: (...items)=>{
            $df29249fe447c065$var$$a43aa20d3eb44e80$export$4bb7493d241fd8a5.add(...items);
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$invalidatePlugins();
        }
    },
    unregister: {
        enumerable: $df29249fe447c065$var$$a43aa20d3eb44e80$var$enumerable,
        value: (...items)=>{
            $df29249fe447c065$var$$a43aa20d3eb44e80$export$4bb7493d241fd8a5.remove(...items);
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$invalidatePlugins();
        }
    }
});
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$clipArc(ctx, element, endAngle) {
    const { startAngle: startAngle , pixelMargin: pixelMargin , x: x , y: y , outerRadius: outerRadius , innerRadius: innerRadius  } = element;
    let angleMargin = pixelMargin / outerRadius;
    ctx.beginPath();
    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
    if (innerRadius > pixelMargin) {
        angleMargin = pixelMargin / innerRadius;
        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
    } else ctx.arc(x, y, pixelMargin, endAngle + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd, startAngle - $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd);
    ctx.closePath();
    ctx.clip();
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$toRadiusCorners(value) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3b513254972cfc9c(value, [
        "outerStart",
        "outerEnd",
        "innerStart",
        "innerEnd"
    ]);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
    const o = $df29249fe447c065$var$$a43aa20d3eb44e80$var$toRadiusCorners(arc.options.borderRadius);
    const halfThickness = (outerRadius - innerRadius) / 2;
    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
    const computeOuterLimit = (val)=>{
        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(val, 0, Math.min(halfThickness, outerArcLimit));
    };
    return {
        outerStart: computeOuterLimit(o.outerStart),
        outerEnd: computeOuterLimit(o.outerEnd),
        innerStart: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(o.innerStart, 0, innerLimit),
        innerEnd: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(o.innerEnd, 0, innerLimit)
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$rThetaToXY(r, theta, x, y) {
    return {
        x: x + r * Math.cos(theta),
        y: y + r * Math.sin(theta)
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$pathArc(ctx, element, offset, spacing, end) {
    const { x: x , y: y , startAngle: start , pixelMargin: pixelMargin , innerRadius: innerR  } = element;
    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
    let spacingOffset = 0;
    const alpha = end - start;
    if (spacing) {
        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;
        spacingOffset = (alpha - adjustedAngle) / 2;
    }
    const beta = Math.max(0.001, alpha * outerRadius - offset / $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d) / outerRadius;
    const angleOffset = (alpha - beta) / 2;
    const startAngle = start + angleOffset + spacingOffset;
    const endAngle = end - angleOffset - spacingOffset;
    const { outerStart: outerStart , outerEnd: outerEnd , innerStart: innerStart , innerEnd: innerEnd  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
    const outerStartAdjustedRadius = outerRadius - outerStart;
    const outerEndAdjustedRadius = outerRadius - outerEnd;
    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
    const innerStartAdjustedRadius = innerRadius + innerStart;
    const innerEndAdjustedRadius = innerRadius + innerEnd;
    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
    ctx.beginPath();
    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);
    if (outerEnd > 0) {
        const pCenter = $df29249fe447c065$var$$a43aa20d3eb44e80$var$rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
        ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd);
    }
    const p4 = $df29249fe447c065$var$$a43aa20d3eb44e80$var$rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
    ctx.lineTo(p4.x, p4.y);
    if (innerEnd > 0) {
        const pCenter = $df29249fe447c065$var$$a43aa20d3eb44e80$var$rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
        ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd, innerEndAdjustedAngle + Math.PI);
    }
    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, startAngle + innerStart / innerRadius, true);
    if (innerStart > 0) {
        const pCenter = $df29249fe447c065$var$$a43aa20d3eb44e80$var$rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
        ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd);
    }
    const p8 = $df29249fe447c065$var$$a43aa20d3eb44e80$var$rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
    ctx.lineTo(p8.x, p8.y);
    if (outerStart > 0) {
        const pCenter = $df29249fe447c065$var$$a43aa20d3eb44e80$var$rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
        ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd, outerStartAdjustedAngle);
    }
    ctx.closePath();
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$drawArc(ctx, element, offset, spacing) {
    const { fullCircles: fullCircles , startAngle: startAngle , circumference: circumference  } = element;
    let endAngle = element.endAngle;
    if (fullCircles) {
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$pathArc(ctx, element, offset, spacing, startAngle + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7);
        for(let i = 0; i < fullCircles; ++i)ctx.fill();
        if (!isNaN(circumference)) {
            endAngle = startAngle + circumference % $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7;
            if (circumference % $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7 === 0) endAngle += $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7;
        }
    }
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$pathArc(ctx, element, offset, spacing, endAngle);
    ctx.fill();
    return endAngle;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$drawFullCircleBorders(ctx, element, inner) {
    const { x: x , y: y , startAngle: startAngle , pixelMargin: pixelMargin , fullCircles: fullCircles  } = element;
    const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);
    const innerRadius = element.innerRadius + pixelMargin;
    let i;
    if (inner) $df29249fe447c065$var$$a43aa20d3eb44e80$var$clipArc(ctx, element, startAngle + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7);
    ctx.beginPath();
    ctx.arc(x, y, innerRadius, startAngle + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7, startAngle, true);
    for(i = 0; i < fullCircles; ++i)ctx.stroke();
    ctx.beginPath();
    ctx.arc(x, y, outerRadius, startAngle, startAngle + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7);
    for(i = 0; i < fullCircles; ++i)ctx.stroke();
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$drawBorder(ctx, element, offset, spacing, endAngle) {
    const { options: options  } = element;
    const { borderWidth: borderWidth , borderJoinStyle: borderJoinStyle  } = options;
    const inner = options.borderAlign === "inner";
    if (!borderWidth) return;
    if (inner) {
        ctx.lineWidth = borderWidth * 2;
        ctx.lineJoin = borderJoinStyle || "round";
    } else {
        ctx.lineWidth = borderWidth;
        ctx.lineJoin = borderJoinStyle || "bevel";
    }
    if (element.fullCircles) $df29249fe447c065$var$$a43aa20d3eb44e80$var$drawFullCircleBorders(ctx, element, inner);
    if (inner) $df29249fe447c065$var$$a43aa20d3eb44e80$var$clipArc(ctx, element, endAngle);
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$pathArc(ctx, element, offset, spacing, endAngle);
    ctx.stroke();
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$d48203c759d6a1fc extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$db77ccec0bb4ccac {
    inRange(chartX, chartY, useFinalPosition) {
        const point = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        const { angle: angle , distance: distance  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$e7094788287c5e9b(point, {
            x: chartX,
            y: chartY
        });
        const { startAngle: startAngle , endAngle: endAngle , innerRadius: innerRadius , outerRadius: outerRadius , circumference: circumference  } = this.getProps([
            "startAngle",
            "endAngle",
            "innerRadius",
            "outerRadius",
            "circumference"
        ], useFinalPosition);
        const rAdjust = this.options.spacing / 2;
        const _circumference = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(circumference, endAngle - startAngle);
        const betweenAngles = _circumference >= $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7 || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ffb5f4729a158638(angle, startAngle, endAngle);
        const withinRadius = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f38c853ae54ed474(distance, innerRadius + rAdjust, outerRadius + rAdjust);
        return betweenAngles && withinRadius;
    }
    getCenterPoint(useFinalPosition) {
        const { x: x , y: y , startAngle: startAngle , endAngle: endAngle , innerRadius: innerRadius , outerRadius: outerRadius  } = this.getProps([
            "x",
            "y",
            "startAngle",
            "endAngle",
            "innerRadius",
            "outerRadius",
            "circumference", 
        ], useFinalPosition);
        const { offset: offset , spacing: spacing  } = this.options;
        const halfAngle = (startAngle + endAngle) / 2;
        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
        return {
            x: x + Math.cos(halfAngle) * halfRadius,
            y: y + Math.sin(halfAngle) * halfRadius
        };
    }
    tooltipPosition(useFinalPosition) {
        return this.getCenterPoint(useFinalPosition);
    }
    draw(ctx) {
        const { options: options , circumference: circumference  } = this;
        const offset = (options.offset || 0) / 2;
        const spacing = (options.spacing || 0) / 2;
        this.pixelMargin = options.borderAlign === "inner" ? 0.33 : 0;
        this.fullCircles = circumference > $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7 ? Math.floor(circumference / $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7) : 0;
        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) return;
        ctx.save();
        let radiusOffset = 0;
        if (offset) {
            radiusOffset = offset / 2;
            const halfAngle = (this.startAngle + this.endAngle) / 2;
            ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);
            if (this.circumference >= $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d) radiusOffset = offset;
        }
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        const endAngle = $df29249fe447c065$var$$a43aa20d3eb44e80$var$drawArc(ctx, this, radiusOffset, spacing);
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$drawBorder(ctx, this, radiusOffset, spacing, endAngle);
        ctx.restore();
    }
    constructor(cfg){
        super();
        this.options = undefined;
        this.circumference = undefined;
        this.startAngle = undefined;
        this.endAngle = undefined;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.pixelMargin = 0;
        this.fullCircles = 0;
        if (cfg) Object.assign(this, cfg);
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$d48203c759d6a1fc.id = "arc";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$d48203c759d6a1fc.defaults = {
    borderAlign: "center",
    borderColor: "#fff",
    borderJoinStyle: undefined,
    borderRadius: 0,
    borderWidth: 2,
    offset: 0,
    spacing: 0,
    angle: undefined
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$d48203c759d6a1fc.defaultRoutes = {
    backgroundColor: "backgroundColor"
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$setStyle(ctx, options, style = options) {
    ctx.lineCap = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(style.borderCapStyle, options.borderCapStyle);
    ctx.setLineDash($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(style.borderDash, options.borderDash));
    ctx.lineDashOffset = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(style.borderDashOffset, options.borderDashOffset);
    ctx.lineJoin = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(style.borderJoinStyle, options.borderJoinStyle);
    ctx.lineWidth = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(style.borderWidth, options.borderWidth);
    ctx.strokeStyle = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(style.borderColor, options.borderColor);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$lineTo(ctx, previous, target) {
    ctx.lineTo(target.x, target.y);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getLineMethod(options) {
    if (options.stepped) return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8a5498727ef6be21;
    if (options.tension || options.cubicInterpolationMode === "monotone") return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d24c54395ce0c509;
    return $df29249fe447c065$var$$a43aa20d3eb44e80$var$lineTo;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$pathVars(points, segment, params = {
}) {
    const count = points.length;
    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;
    const { start: segmentStart , end: segmentEnd  } = segment;
    const start = Math.max(paramsStart, segmentStart);
    const end = Math.min(paramsEnd, segmentEnd);
    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
    return {
        count: count,
        start: start,
        loop: segment.loop,
        ilen: end < start && !outside ? count + end - start : end - start
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$pathSegment(ctx, line, segment, params) {
    const { points: points , options: options  } = line;
    const { count: count , start: start , loop: loop , ilen: ilen  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$pathVars(points, segment, params);
    const lineMethod = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getLineMethod(options);
    let { move: move = true , reverse: reverse  } = params || {
    };
    let i, point, prev;
    for(i = 0; i <= ilen; ++i){
        point = points[(start + (reverse ? ilen - i : i)) % count];
        if (point.skip) continue;
        else if (move) {
            ctx.moveTo(point.x, point.y);
            move = false;
        } else lineMethod(ctx, prev, point, reverse, options.stepped);
        prev = point;
    }
    if (loop) {
        point = points[(start + (reverse ? ilen : 0)) % count];
        lineMethod(ctx, prev, point, reverse, options.stepped);
    }
    return !!loop;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$fastPathSegment(ctx, line, segment, params) {
    const points = line.points;
    const { count: count , start: start , ilen: ilen  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$pathVars(points, segment, params);
    const { move: move = true , reverse: reverse  } = params || {
    };
    let avgX = 0;
    let countX = 0;
    let i, point, prevX, minY, maxY, lastY;
    const pointIndex = (index56)=>(start + (reverse ? ilen - index56 : index56)) % count
    ;
    const drawX = ()=>{
        if (minY !== maxY) {
            ctx.lineTo(avgX, maxY);
            ctx.lineTo(avgX, minY);
            ctx.lineTo(avgX, lastY);
        }
    };
    if (move) {
        point = points[pointIndex(0)];
        ctx.moveTo(point.x, point.y);
    }
    for(i = 0; i <= ilen; ++i){
        point = points[pointIndex(i)];
        if (point.skip) continue;
        const x = point.x;
        const y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
            if (y < minY) minY = y;
            else if (y > maxY) maxY = y;
            avgX = (countX * avgX + x) / ++countX;
        } else {
            drawX();
            ctx.lineTo(x, y);
            prevX = truncX;
            countX = 0;
            minY = maxY = y;
        }
        lastY = y;
    }
    drawX();
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getSegmentMethod(line) {
    const opts = line.options;
    const borderDash = opts.borderDash && opts.borderDash.length;
    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== "monotone" && !opts.stepped && !borderDash;
    return useFastPath ? $df29249fe447c065$var$$a43aa20d3eb44e80$var$fastPathSegment : $df29249fe447c065$var$$a43aa20d3eb44e80$var$pathSegment;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getInterpolationMethod(options) {
    if (options.stepped) return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$306ddfe3a8403e2;
    if (options.tension || options.cubicInterpolationMode === "monotone") return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7a38258bbe170828;
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2f6ca3d3b1f80bf5;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$strokePathWithCache(ctx, line, start, count) {
    let path = line._path;
    if (!path) {
        path = line._path = new Path2D();
        if (line.path(path, start, count)) path.closePath();
    }
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$setStyle(ctx, line.options);
    ctx.stroke(path);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$strokePathDirect(ctx, line, start, count) {
    const { segments: segments , options: options  } = line;
    const segmentMethod = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getSegmentMethod(line);
    for (const segment of segments){
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$setStyle(ctx, options, segment.style);
        ctx.beginPath();
        if (segmentMethod(ctx, line, segment, {
            start: start,
            end: start + count - 1
        })) ctx.closePath();
        ctx.stroke();
    }
}
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$usePath2D = typeof Path2D === "function";
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$draw(ctx, line, start, count) {
    if ($df29249fe447c065$var$$a43aa20d3eb44e80$var$usePath2D && !line.options.segment) $df29249fe447c065$var$$a43aa20d3eb44e80$var$strokePathWithCache(ctx, line, start, count);
    else $df29249fe447c065$var$$a43aa20d3eb44e80$var$strokePathDirect(ctx, line, start, count);
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$55e463fa7bcd3469 extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$db77ccec0bb4ccac {
    updateControlPoints(chartArea, indexAxis) {
        const options = this.options;
        if ((options.tension || options.cubicInterpolationMode === "monotone") && !options.stepped && !this._pointsUpdated) {
            const loop = options.spanGaps ? this._loop : this._fullLoop;
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$21579262ef46735b(this._points, options, chartArea, loop, indexAxis);
            this._pointsUpdated = true;
        }
    }
    set points(points) {
        this._points = points;
        delete this._segments;
        delete this._path;
        this._pointsUpdated = false;
    }
    get points() {
        return this._points;
    }
    get segments() {
        return this._segments || (this._segments = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ab83b03e4111b1d0(this, this.options.segment));
    }
    first() {
        const segments = this.segments;
        const points = this.points;
        return segments.length && points[segments[0].start];
    }
    last() {
        const segments = this.segments;
        const points = this.points;
        const count = segments.length;
        return count && points[segments[count - 1].end];
    }
    interpolate(point, property) {
        const options = this.options;
        const value = point[property];
        const points = this.points;
        const segments = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$1a82df3d29112e01(this, {
            property: property,
            start: value,
            end: value
        });
        if (!segments.length) return;
        const result = [];
        const _interpolate = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getInterpolationMethod(options);
        let i, ilen;
        for(i = 0, ilen = segments.length; i < ilen; ++i){
            const { start: start , end: end  } = segments[i];
            const p1 = points[start];
            const p2 = points[end];
            if (p1 === p2) {
                result.push(p1);
                continue;
            }
            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
            const interpolated = _interpolate(p1, p2, t, options.stepped);
            interpolated[property] = point[property];
            result.push(interpolated);
        }
        return result.length === 1 ? result[0] : result;
    }
    pathSegment(ctx, segment, params) {
        const segmentMethod = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getSegmentMethod(this);
        return segmentMethod(ctx, this, segment, params);
    }
    path(ctx, start, count) {
        const segments = this.segments;
        const segmentMethod = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getSegmentMethod(this);
        let loop = this._loop;
        start = start || 0;
        count = count || this.points.length - start;
        for (const segment of segments)loop &= segmentMethod(ctx, this, segment, {
            start: start,
            end: start + count - 1
        });
        return !!loop;
    }
    draw(ctx, chartArea, start, count) {
        const options = this.options || {
        };
        const points = this.points || [];
        if (points.length && options.borderWidth) {
            ctx.save();
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$draw(ctx, this, start, count);
            ctx.restore();
        }
        if (this.animated) {
            this._pointsUpdated = false;
            this._path = undefined;
        }
    }
    constructor(cfg){
        super();
        this.animated = true;
        this.options = undefined;
        this._chart = undefined;
        this._loop = undefined;
        this._fullLoop = undefined;
        this._path = undefined;
        this._points = undefined;
        this._segments = undefined;
        this._decimated = false;
        this._pointsUpdated = false;
        this._datasetIndex = undefined;
        if (cfg) Object.assign(this, cfg);
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$55e463fa7bcd3469.id = "line";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$55e463fa7bcd3469.defaults = {
    borderCapStyle: "butt",
    borderDash: [],
    borderDashOffset: 0,
    borderJoinStyle: "miter",
    borderWidth: 3,
    capBezierPoints: true,
    cubicInterpolationMode: "default",
    fill: false,
    spanGaps: false,
    stepped: false,
    tension: 0
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$55e463fa7bcd3469.defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$55e463fa7bcd3469.descriptors = {
    _scriptable: true,
    _indexable: (name)=>name !== "borderDash" && name !== "fill"
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$inRange$1(el, pos, axis, useFinalPosition) {
    const options = el.options;
    const { [axis]: value  } = el.getProps([
        axis
    ], useFinalPosition);
    return Math.abs(pos - value) < options.radius + options.hitRadius;
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$bd159b522b230b7a extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$db77ccec0bb4ccac {
    inRange(mouseX, mouseY, useFinalPosition) {
        const options = this.options;
        const { x: x , y: y  } = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
    }
    inXRange(mouseX, useFinalPosition) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$inRange$1(this, mouseX, "x", useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$inRange$1(this, mouseY, "y", useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
        const { x: x , y: y  } = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        return {
            x: x,
            y: y
        };
    }
    size(options) {
        options = options || this.options || {
        };
        let radius = options.radius || 0;
        radius = Math.max(radius, radius && options.hoverRadius || 0);
        const borderWidth = radius && options.borderWidth || 0;
        return (radius + borderWidth) * 2;
    }
    draw(ctx, area) {
        const options = this.options;
        if (this.skip || options.radius < 0.1 || !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ef35774e6d314e91(this, area, this.size(options) / 2)) return;
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.fillStyle = options.backgroundColor;
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$6554612db691658e(ctx, options, this.x, this.y);
    }
    getRange() {
        const options = this.options || {
        };
        return options.radius + options.hitRadius;
    }
    constructor(cfg){
        super();
        this.options = undefined;
        this.parsed = undefined;
        this.skip = undefined;
        this.stop = undefined;
        if (cfg) Object.assign(this, cfg);
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$bd159b522b230b7a.id = "point";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$bd159b522b230b7a.defaults = {
    borderWidth: 1,
    hitRadius: 1,
    hoverBorderWidth: 1,
    hoverRadius: 4,
    pointStyle: "circle",
    radius: 3,
    rotation: 0
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$bd159b522b230b7a.defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getBarBounds(bar, useFinalPosition) {
    const { x: x , y: y , base: base , width: width , height: height  } = bar.getProps([
        "x",
        "y",
        "base",
        "width",
        "height"
    ], useFinalPosition);
    let left, right, top, bottom, half;
    if (bar.horizontal) {
        half = height / 2;
        left = Math.min(x, base);
        right = Math.max(x, base);
        top = y - half;
        bottom = y + half;
    } else {
        half = width / 2;
        left = x - half;
        right = x + half;
        top = Math.min(y, base);
        bottom = Math.max(y, base);
    }
    return {
        left: left,
        top: top,
        right: right,
        bottom: bottom
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$skipOrLimit(skip1, value, min, max) {
    return skip1 ? 0 : $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(value, min, max);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseBorderWidth(bar, maxW, maxH) {
    const value = bar.options.borderWidth;
    const skip2 = bar.borderSkipped;
    const o = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$1fbe638ecf81657e(value);
    return {
        t: $df29249fe447c065$var$$a43aa20d3eb44e80$var$skipOrLimit(skip2.top, o.top, 0, maxH),
        r: $df29249fe447c065$var$$a43aa20d3eb44e80$var$skipOrLimit(skip2.right, o.right, 0, maxW),
        b: $df29249fe447c065$var$$a43aa20d3eb44e80$var$skipOrLimit(skip2.bottom, o.bottom, 0, maxH),
        l: $df29249fe447c065$var$$a43aa20d3eb44e80$var$skipOrLimit(skip2.left, o.left, 0, maxW)
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseBorderRadius(bar, maxW, maxH) {
    const { enableBorderRadius: enableBorderRadius  } = bar.getProps([
        "enableBorderRadius"
    ]);
    const value = bar.options.borderRadius;
    const o = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d66dc83d8cfc8dd(value);
    const maxR = Math.min(maxW, maxH);
    const skip3 = bar.borderSkipped;
    const enableBorder = enableBorderRadius || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(value);
    return {
        topLeft: $df29249fe447c065$var$$a43aa20d3eb44e80$var$skipOrLimit(!enableBorder || skip3.top || skip3.left, o.topLeft, 0, maxR),
        topRight: $df29249fe447c065$var$$a43aa20d3eb44e80$var$skipOrLimit(!enableBorder || skip3.top || skip3.right, o.topRight, 0, maxR),
        bottomLeft: $df29249fe447c065$var$$a43aa20d3eb44e80$var$skipOrLimit(!enableBorder || skip3.bottom || skip3.left, o.bottomLeft, 0, maxR),
        bottomRight: $df29249fe447c065$var$$a43aa20d3eb44e80$var$skipOrLimit(!enableBorder || skip3.bottom || skip3.right, o.bottomRight, 0, maxR)
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$boundingRects(bar) {
    const bounds = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getBarBounds(bar);
    const width = bounds.right - bounds.left;
    const height = bounds.bottom - bounds.top;
    const border = $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseBorderWidth(bar, width / 2, height / 2);
    const radius = $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseBorderRadius(bar, width / 2, height / 2);
    return {
        outer: {
            x: bounds.left,
            y: bounds.top,
            w: width,
            h: height,
            radius: radius
        },
        inner: {
            x: bounds.left + border.l,
            y: bounds.top + border.t,
            w: width - border.l - border.r,
            h: height - border.t - border.b,
            radius: {
                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
            }
        }
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$inRange(bar, x, y, useFinalPosition) {
    const skipX = x === null;
    const skipY = y === null;
    const skipBoth = skipX && skipY;
    const bounds = bar && !skipBoth && $df29249fe447c065$var$$a43aa20d3eb44e80$var$getBarBounds(bar, useFinalPosition);
    return bounds && (skipX || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f38c853ae54ed474(x, bounds.left, bounds.right)) && (skipY || $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f38c853ae54ed474(y, bounds.top, bounds.bottom));
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$hasRadius(radius) {
    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$addNormalRectPath(ctx, rect) {
    ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$inflateRect(rect, amount, refRect = {
}) {
    const x = rect.x !== refRect.x ? -amount : 0;
    const y = rect.y !== refRect.y ? -amount : 0;
    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
    return {
        x: rect.x + x,
        y: rect.y + y,
        w: rect.w + w,
        h: rect.h + h,
        radius: rect.radius
    };
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$a16ed71bf4b07672 extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$db77ccec0bb4ccac {
    draw(ctx) {
        const { inflateAmount: inflateAmount , options: { borderColor: borderColor , backgroundColor: backgroundColor  }  } = this;
        const { inner: inner , outer: outer  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$boundingRects(this);
        const addRectPath = $df29249fe447c065$var$$a43aa20d3eb44e80$var$hasRadius(outer.radius) ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$493d36ec626b6698 : $df29249fe447c065$var$$a43aa20d3eb44e80$var$addNormalRectPath;
        ctx.save();
        if (outer.w !== inner.w || outer.h !== inner.h) {
            ctx.beginPath();
            addRectPath(ctx, $df29249fe447c065$var$$a43aa20d3eb44e80$var$inflateRect(outer, inflateAmount, inner));
            ctx.clip();
            addRectPath(ctx, $df29249fe447c065$var$$a43aa20d3eb44e80$var$inflateRect(inner, -inflateAmount, outer));
            ctx.fillStyle = borderColor;
            ctx.fill("evenodd");
        }
        ctx.beginPath();
        addRectPath(ctx, $df29249fe447c065$var$$a43aa20d3eb44e80$var$inflateRect(inner, inflateAmount));
        ctx.fillStyle = backgroundColor;
        ctx.fill();
        ctx.restore();
    }
    inRange(mouseX, mouseY, useFinalPosition) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$inRange(this, mouseX, mouseY, useFinalPosition);
    }
    inXRange(mouseX, useFinalPosition) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$inRange(this, mouseX, null, useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$inRange(this, null, mouseY, useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
        const { x: x , y: y , base: base , horizontal: horizontal  } = this.getProps([
            "x",
            "y",
            "base",
            "horizontal"
        ], useFinalPosition);
        return {
            x: horizontal ? (x + base) / 2 : x,
            y: horizontal ? y : (y + base) / 2
        };
    }
    getRange(axis) {
        return axis === "x" ? this.width / 2 : this.height / 2;
    }
    constructor(cfg){
        super();
        this.options = undefined;
        this.horizontal = undefined;
        this.base = undefined;
        this.width = undefined;
        this.height = undefined;
        this.inflateAmount = undefined;
        if (cfg) Object.assign(this, cfg);
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$a16ed71bf4b07672.id = "bar";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$a16ed71bf4b07672.defaults = {
    borderSkipped: "start",
    borderWidth: 0,
    borderRadius: 0,
    inflateAmount: "auto",
    pointStyle: undefined
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$a16ed71bf4b07672.defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
};
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$7a5d735b2ab6389d = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ArcElement: $df29249fe447c065$var$$a43aa20d3eb44e80$export$d48203c759d6a1fc,
    LineElement: $df29249fe447c065$var$$a43aa20d3eb44e80$export$55e463fa7bcd3469,
    PointElement: $df29249fe447c065$var$$a43aa20d3eb44e80$export$bd159b522b230b7a,
    BarElement: $df29249fe447c065$var$$a43aa20d3eb44e80$export$a16ed71bf4b07672
});
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$lttbDecimation(data, start, count, availableWidth, options) {
    const samples = options.samples || availableWidth;
    if (samples >= count) return data.slice(start, start + count);
    const decimated = [];
    const bucketWidth = (count - 2) / (samples - 2);
    let sampledIndex = 0;
    const endIndex = start + count - 1;
    let a = start;
    let i, maxAreaPoint, maxArea, area, nextA;
    decimated[sampledIndex++] = data[a];
    for(i = 0; i < samples - 2; i++){
        let avgX = 0;
        let avgY = 0;
        let j;
        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
        const avgRangeLength = avgRangeEnd - avgRangeStart;
        for(j = avgRangeStart; j < avgRangeEnd; j++){
            avgX += data[j].x;
            avgY += data[j].y;
        }
        avgX /= avgRangeLength;
        avgY /= avgRangeLength;
        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
        const { x: pointAx , y: pointAy  } = data[a];
        maxArea = area = -1;
        for(j = rangeOffs; j < rangeTo; j++){
            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));
            if (area > maxArea) {
                maxArea = area;
                maxAreaPoint = data[j];
                nextA = j;
            }
        }
        decimated[sampledIndex++] = maxAreaPoint;
        a = nextA;
    }
    decimated[sampledIndex++] = data[endIndex];
    return decimated;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$minMaxDecimation(data, start, count, availableWidth) {
    let avgX = 0;
    let countX = 0;
    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
    const decimated = [];
    const endIndex = start + count - 1;
    const xMin = data[start].x;
    const xMax = data[endIndex].x;
    const dx = xMax - xMin;
    for(i = start; i < start + count; ++i){
        point = data[i];
        x = (point.x - xMin) / dx * availableWidth;
        y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
            if (y < minY) {
                minY = y;
                minIndex = i;
            } else if (y > maxY) {
                maxY = y;
                maxIndex = i;
            }
            avgX = (countX * avgX + point.x) / ++countX;
        } else {
            const lastIndex = i - 1;
            if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(minIndex) && !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(maxIndex)) {
                const intermediateIndex1 = Math.min(minIndex, maxIndex);
                const intermediateIndex2 = Math.max(minIndex, maxIndex);
                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) decimated.push({
                    ...data[intermediateIndex1],
                    x: avgX
                });
                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) decimated.push({
                    ...data[intermediateIndex2],
                    x: avgX
                });
            }
            if (i > 0 && lastIndex !== startIndex) decimated.push(data[lastIndex]);
            decimated.push(point);
            prevX = truncX;
            countX = 0;
            minY = maxY = y;
            minIndex = maxIndex = startIndex = i;
        }
    }
    return decimated;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$cleanDecimatedDataset(dataset) {
    if (dataset._decimated) {
        const data = dataset._data;
        delete dataset._decimated;
        delete dataset._data;
        Object.defineProperty(dataset, "data", {
            value: data
        });
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$cleanDecimatedData(chart) {
    chart.data.datasets.forEach((dataset)=>{
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$cleanDecimatedDataset(dataset);
    });
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getStartAndCountOfVisiblePointsSimplified(meta, points) {
    const pointCount = points.length;
    let start = 0;
    let count;
    const { iScale: iScale  } = meta;
    const { min: min , max: max , minDefined: minDefined , maxDefined: maxDefined  } = iScale.getUserBounds();
    if (minDefined) start = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d141bba7fdc215a3(points, iScale.axis, min).lo, 0, pointCount - 1);
    if (maxDefined) count = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d141bba7fdc215a3(points, iScale.axis, max).hi + 1, start, pointCount) - start;
    else count = pointCount - start;
    return {
        start: start,
        count: count
    };
}
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$be17f937e9aa7533 = {
    id: "decimation",
    defaults: {
        algorithm: "min-max",
        enabled: false
    },
    beforeElementsUpdate: (chart, args, options)=>{
        if (!options.enabled) {
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$cleanDecimatedData(chart);
            return;
        }
        const availableWidth = chart.width;
        chart.data.datasets.forEach((dataset, datasetIndex)=>{
            const { _data: _data , indexAxis: indexAxis  } = dataset;
            const meta = chart.getDatasetMeta(datasetIndex);
            const data = _data || dataset.data;
            if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$407448d2b89b1813([
                indexAxis,
                chart.options.indexAxis
            ]) === "y") return;
            if (!meta.controller.supportsDecimation) return;
            const xAxis = chart.scales[meta.xAxisID];
            if (xAxis.type !== "linear" && xAxis.type !== "time") return;
            if (chart.options.parsing) return;
            let { start: start , count: count  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getStartAndCountOfVisiblePointsSimplified(meta, data);
            const threshold = options.threshold || 4 * availableWidth;
            if (count <= threshold) {
                $df29249fe447c065$var$$a43aa20d3eb44e80$var$cleanDecimatedDataset(dataset);
                return;
            }
            if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(_data)) {
                dataset._data = data;
                delete dataset.data;
                Object.defineProperty(dataset, "data", {
                    configurable: true,
                    enumerable: true,
                    get: function() {
                        return this._decimated;
                    },
                    set: function(d) {
                        this._data = d;
                    }
                });
            }
            let decimated;
            switch(options.algorithm){
                case "lttb":
                    decimated = $df29249fe447c065$var$$a43aa20d3eb44e80$var$lttbDecimation(data, start, count, availableWidth, options);
                    break;
                case "min-max":
                    decimated = $df29249fe447c065$var$$a43aa20d3eb44e80$var$minMaxDecimation(data, start, count, availableWidth);
                    break;
                default:
                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
            }
            dataset._decimated = decimated;
        });
    },
    destroy (chart) {
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$cleanDecimatedData(chart);
    }
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_segments(line, target, property) {
    const segments = line.segments;
    const points = line.points;
    const tpoints = target.points;
    const parts = [];
    for (const segment of segments){
        let { start: start , end: end  } = segment;
        end = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_findSegmentEnd(start, end, points);
        const bounds = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getBounds(property, points[start], points[end], segment.loop);
        if (!target.segments) {
            parts.push({
                source: segment,
                target: bounds,
                start: points[start],
                end: points[end]
            });
            continue;
        }
        const targetSegments = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$1a82df3d29112e01(target, bounds);
        for (const tgt of targetSegments){
            const subBounds = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
            const fillSources = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$92108d983e8ee699(segment, points, subBounds);
            for (const fillSource of fillSources)parts.push({
                source: fillSource,
                target: tgt,
                start: {
                    [property]: $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getEdge(bounds, subBounds, "start", Math.max)
                },
                end: {
                    [property]: $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getEdge(bounds, subBounds, "end", Math.min)
                }
            });
        }
    }
    return parts;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getBounds(property, first, last, loop) {
    if (loop) return;
    let start = first[property];
    let end = last[property];
    if (property === "angle") {
        start = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce(start);
        end = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce(end);
    }
    return {
        property: property,
        start: start,
        end: end
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_pointsFromSegments(boundary, line) {
    const { x: x = null , y: y = null  } = boundary || {
    };
    const linePoints = line.points;
    const points = [];
    line.segments.forEach(({ start: start , end: end  })=>{
        end = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_findSegmentEnd(start, end, linePoints);
        const first = linePoints[start];
        const last = linePoints[end];
        if (y !== null) {
            points.push({
                x: first.x,
                y: y
            });
            points.push({
                x: last.x,
                y: y
            });
        } else if (x !== null) {
            points.push({
                x: x,
                y: first.y
            });
            points.push({
                x: x,
                y: last.y
            });
        }
    });
    return points;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_findSegmentEnd(start, end, points) {
    for(; end > start; end--){
        const point = points[end];
        if (!isNaN(point.x) && !isNaN(point.y)) break;
    }
    return end;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getEdge(a, b, prop, fn) {
    if (a && b) return fn(a[prop], b[prop]);
    return a ? a[prop] : b ? b[prop] : 0;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_createBoundaryLine(boundary, line) {
    let points = [];
    let _loop = false;
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(boundary)) {
        _loop = true;
        points = boundary;
    } else points = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_pointsFromSegments(boundary, line);
    return points.length ? new $df29249fe447c065$var$$a43aa20d3eb44e80$export$55e463fa7bcd3469({
        points: points,
        options: {
            tension: 0
        },
        _loop: _loop,
        _fullLoop: _loop
    }) : null;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_resolveTarget(sources, index57, propagate) {
    const source = sources[index57];
    let fill1 = source.fill;
    const visited = [
        index57
    ];
    let target;
    if (!propagate) return fill1;
    while(fill1 !== false && visited.indexOf(fill1) === -1){
        if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(fill1)) return fill1;
        target = sources[fill1];
        if (!target) return false;
        if (target.visible) return fill1;
        visited.push(fill1);
        fill1 = target.fill;
    }
    return false;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_decodeFill(line, index58, count) {
    const fill2 = $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseFillOption(line);
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(fill2)) return isNaN(fill2.value) ? false : fill2;
    let target = parseFloat(fill2);
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(target) && Math.floor(target) === target) return $df29249fe447c065$var$$a43aa20d3eb44e80$var$decodeTargetIndex(fill2[0], index58, target, count);
    return [
        "origin",
        "start",
        "end",
        "stack",
        "shape"
    ].indexOf(fill2) >= 0 && fill2;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$decodeTargetIndex(firstCh, index59, target, count) {
    if (firstCh === "-" || firstCh === "+") target = index59 + target;
    if (target === index59 || target < 0 || target >= count) return false;
    return target;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getTargetPixel(fill3, scale) {
    let pixel = null;
    if (fill3 === "start") pixel = scale.bottom;
    else if (fill3 === "end") pixel = scale.top;
    else if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(fill3)) pixel = scale.getPixelForValue(fill3.value);
    else if (scale.getBasePixel) pixel = scale.getBasePixel();
    return pixel;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getTargetValue(fill4, scale, startValue) {
    let value;
    if (fill4 === "start") value = startValue;
    else if (fill4 === "end") value = scale.options.reverse ? scale.min : scale.max;
    else if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23f2a1d2818174ef(fill4)) value = fill4.value;
    else value = scale.getBaseValue();
    return value;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$parseFillOption(line) {
    const options = line.options;
    const fillOption = options.fill;
    let fill5 = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(fillOption && fillOption.target, fillOption);
    if (fill5 === undefined) fill5 = !!options.backgroundColor;
    if (fill5 === false || fill5 === null) return false;
    if (fill5 === true) return "origin";
    return fill5;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_buildStackLine(source) {
    const { scale: scale , index: index60 , line: line  } = source;
    const points = [];
    const segments = line.segments;
    const sourcePoints = line.points;
    const linesBelow = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getLinesBelow(scale, index60);
    linesBelow.push($df29249fe447c065$var$$a43aa20d3eb44e80$var$_createBoundaryLine({
        x: null,
        y: scale.bottom
    }, line));
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        for(let j = segment.start; j <= segment.end; j++)$df29249fe447c065$var$$a43aa20d3eb44e80$var$addPointsBelow(points, sourcePoints[j], linesBelow);
    }
    return new $df29249fe447c065$var$$a43aa20d3eb44e80$export$55e463fa7bcd3469({
        points: points,
        options: {
        }
    });
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getLinesBelow(scale, index61) {
    const below = [];
    const metas = scale.getMatchingVisibleMetas("line");
    for(let i = 0; i < metas.length; i++){
        const meta = metas[i];
        if (meta.index === index61) break;
        if (!meta.hidden) below.unshift(meta.dataset);
    }
    return below;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$addPointsBelow(points, sourcePoint, linesBelow) {
    const postponed = [];
    for(let j = 0; j < linesBelow.length; j++){
        const line = linesBelow[j];
        const { first: first , last: last , point: point  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$findPoint(line, sourcePoint, "x");
        if (!point || first && last) continue;
        if (first) postponed.unshift(point);
        else {
            points.push(point);
            if (!last) break;
        }
    }
    points.push(...postponed);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$findPoint(line, sourcePoint, property) {
    const point = line.interpolate(sourcePoint, property);
    if (!point) return {
    };
    const pointValue = point[property];
    const segments = line.segments;
    const linePoints = line.points;
    let first = false;
    let last = false;
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        const firstValue = linePoints[segment.start][property];
        const lastValue = linePoints[segment.end][property];
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f38c853ae54ed474(pointValue, firstValue, lastValue)) {
            first = pointValue === firstValue;
            last = pointValue === lastValue;
            break;
        }
    }
    return {
        first: first,
        last: last,
        point: point
    };
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$var$simpleArc {
    pathSegment(ctx, bounds, opts) {
        const { x: x , y: y , radius: radius  } = this;
        bounds = bounds || {
            start: 0,
            end: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7
        };
        ctx.arc(x, y, radius, bounds.end, bounds.start, true);
        return !opts.bounds;
    }
    interpolate(point) {
        const { x: x , y: y , radius: radius  } = this;
        const angle = point.angle;
        return {
            x: x + Math.cos(angle) * radius,
            y: y + Math.sin(angle) * radius,
            angle: angle
        };
    }
    constructor(opts){
        this.x = opts.x;
        this.y = opts.y;
        this.radius = opts.radius;
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getTarget(source) {
    const { chart: chart , fill: fill6 , line: line  } = source;
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(fill6)) return $df29249fe447c065$var$$a43aa20d3eb44e80$var$getLineByIndex(chart, fill6);
    if (fill6 === "stack") return $df29249fe447c065$var$$a43aa20d3eb44e80$var$_buildStackLine(source);
    if (fill6 === "shape") return true;
    const boundary = $df29249fe447c065$var$$a43aa20d3eb44e80$var$computeBoundary(source);
    if (boundary instanceof $df29249fe447c065$var$$a43aa20d3eb44e80$var$simpleArc) return boundary;
    return $df29249fe447c065$var$$a43aa20d3eb44e80$var$_createBoundaryLine(boundary, line);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getLineByIndex(chart, index62) {
    const meta = chart.getDatasetMeta(index62);
    const visible = meta && chart.isDatasetVisible(index62);
    return visible ? meta.dataset : null;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$computeBoundary(source) {
    const scale = source.scale || {
    };
    if (scale.getPointPositionForValue) return $df29249fe447c065$var$$a43aa20d3eb44e80$var$computeCircularBoundary(source);
    return $df29249fe447c065$var$$a43aa20d3eb44e80$var$computeLinearBoundary(source);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$computeLinearBoundary(source) {
    const { scale: scale = {
    } , fill: fill7  } = source;
    const pixel = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getTargetPixel(fill7, scale);
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(pixel)) {
        const horizontal = scale.isHorizontal();
        return {
            x: horizontal ? pixel : null,
            y: horizontal ? null : pixel
        };
    }
    return null;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$computeCircularBoundary(source) {
    const { scale: scale , fill: fill8  } = source;
    const options = scale.options;
    const length = scale.getLabels().length;
    const start = options.reverse ? scale.max : scale.min;
    const value = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getTargetValue(fill8, scale, start);
    const target = [];
    if (options.grid.circular) {
        const center = scale.getPointPositionForValue(0, start);
        return new $df29249fe447c065$var$$a43aa20d3eb44e80$var$simpleArc({
            x: center.x,
            y: center.y,
            radius: scale.getDistanceFromCenterForValue(value)
        });
    }
    for(let i = 0; i < length; ++i)target.push(scale.getPointPositionForValue(i, value));
    return target;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$_drawfill(ctx, source, area) {
    const target = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getTarget(source);
    const { line: line , scale: scale , axis: axis  } = source;
    const lineOpts = line.options;
    const fillOption = lineOpts.fill;
    const color2 = lineOpts.backgroundColor;
    const { above: above = color2 , below: below = color2  } = fillOption || {
    };
    if (target && line.points.length) {
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$78acf4525d8a74c4(ctx, area);
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$doFill(ctx, {
            line: line,
            target: target,
            above: above,
            below: below,
            area: area,
            scale: scale,
            axis: axis
        });
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dc98b0b04f4c7758(ctx);
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$doFill(ctx, cfg) {
    const { line: line , target: target , above: above , below: below , area: area , scale: scale  } = cfg;
    const property = line._loop ? "angle" : cfg.axis;
    ctx.save();
    if (property === "x" && below !== above) {
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$clipVertical(ctx, target, area.top);
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$fill(ctx, {
            line: line,
            target: target,
            color: above,
            scale: scale,
            property: property
        });
        ctx.restore();
        ctx.save();
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$clipVertical(ctx, target, area.bottom);
    }
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$fill(ctx, {
        line: line,
        target: target,
        color: below,
        scale: scale,
        property: property
    });
    ctx.restore();
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$clipVertical(ctx, target, clipY) {
    const { segments: segments , points: points  } = target;
    let first = true;
    let lineLoop = false;
    ctx.beginPath();
    for (const segment of segments){
        const { start: start , end: end  } = segment;
        const firstPoint = points[start];
        const lastPoint = points[$df29249fe447c065$var$$a43aa20d3eb44e80$var$_findSegmentEnd(start, end, points)];
        if (first) {
            ctx.moveTo(firstPoint.x, firstPoint.y);
            first = false;
        } else {
            ctx.lineTo(firstPoint.x, clipY);
            ctx.lineTo(firstPoint.x, firstPoint.y);
        }
        lineLoop = !!target.pathSegment(ctx, segment, {
            move: lineLoop
        });
        if (lineLoop) ctx.closePath();
        else ctx.lineTo(lastPoint.x, clipY);
    }
    ctx.lineTo(target.first().x, clipY);
    ctx.closePath();
    ctx.clip();
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$fill(ctx, cfg) {
    const { line: line , target: target , property: property , color: color3 , scale: scale  } = cfg;
    const segments = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_segments(line, target, property);
    for (const { source: src , target: tgt , start: start , end: end  } of segments){
        const { style: { backgroundColor: backgroundColor = color3  } = {
        }  } = src;
        const notShape = target !== true;
        ctx.save();
        ctx.fillStyle = backgroundColor;
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$clipBounds(ctx, scale, notShape && $df29249fe447c065$var$$a43aa20d3eb44e80$var$_getBounds(property, start, end));
        ctx.beginPath();
        const lineLoop = !!line.pathSegment(ctx, src);
        let loop;
        if (notShape) {
            if (lineLoop) ctx.closePath();
            else $df29249fe447c065$var$$a43aa20d3eb44e80$var$interpolatedLineTo(ctx, target, end, property);
            const targetLoop = !!target.pathSegment(ctx, tgt, {
                move: lineLoop,
                reverse: true
            });
            loop = lineLoop && targetLoop;
            if (!loop) $df29249fe447c065$var$$a43aa20d3eb44e80$var$interpolatedLineTo(ctx, target, start, property);
        }
        ctx.closePath();
        ctx.fill(loop ? "evenodd" : "nonzero");
        ctx.restore();
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$clipBounds(ctx, scale, bounds) {
    const { top: top , bottom: bottom  } = scale.chart.chartArea;
    const { property: property , start: start , end: end  } = bounds || {
    };
    if (property === "x") {
        ctx.beginPath();
        ctx.rect(start, top, end - start, bottom - top);
        ctx.clip();
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$interpolatedLineTo(ctx, target, point, property) {
    const interpolatedPoint = target.interpolate(point, property);
    if (interpolatedPoint) ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
}
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$d19ba4d812bed757 = {
    id: "filler",
    afterDatasetsUpdate (chart, _args, options) {
        const count = (chart.data.datasets || []).length;
        const sources = [];
        let meta, i, line, source;
        for(i = 0; i < count; ++i){
            meta = chart.getDatasetMeta(i);
            line = meta.dataset;
            source = null;
            if (line && line.options && line instanceof $df29249fe447c065$var$$a43aa20d3eb44e80$export$55e463fa7bcd3469) source = {
                visible: chart.isDatasetVisible(i),
                index: i,
                fill: $df29249fe447c065$var$$a43aa20d3eb44e80$var$_decodeFill(line, i, count),
                chart: chart,
                axis: meta.controller.options.indexAxis,
                scale: meta.vScale,
                line: line
            };
            meta.$filler = source;
            sources.push(source);
        }
        for(i = 0; i < count; ++i){
            source = sources[i];
            if (!source || source.fill === false) continue;
            source.fill = $df29249fe447c065$var$$a43aa20d3eb44e80$var$_resolveTarget(sources, i, options.propagate);
        }
    },
    beforeDraw (chart, _args, options) {
        const draw2 = options.drawTime === "beforeDraw";
        const metasets = chart.getSortedVisibleDatasetMetas();
        const area = chart.chartArea;
        for(let i = metasets.length - 1; i >= 0; --i){
            const source = metasets[i].$filler;
            if (!source) continue;
            source.line.updateControlPoints(area, source.axis);
            if (draw2) $df29249fe447c065$var$$a43aa20d3eb44e80$var$_drawfill(chart.ctx, source, area);
        }
    },
    beforeDatasetsDraw (chart, _args, options) {
        if (options.drawTime !== "beforeDatasetsDraw") return;
        const metasets = chart.getSortedVisibleDatasetMetas();
        for(let i = metasets.length - 1; i >= 0; --i){
            const source = metasets[i].$filler;
            if (source) $df29249fe447c065$var$$a43aa20d3eb44e80$var$_drawfill(chart.ctx, source, chart.chartArea);
        }
    },
    beforeDatasetDraw (chart, args, options) {
        const source = args.meta.$filler;
        if (!source || source.fill === false || options.drawTime !== "beforeDatasetDraw") return;
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$_drawfill(chart.ctx, source, chart.chartArea);
    },
    defaults: {
        propagate: true,
        drawTime: "beforeDatasetDraw"
    }
};
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$getBoxSize = (labelOpts, fontSize)=>{
    let { boxHeight: boxHeight = fontSize , boxWidth: boxWidth = fontSize  } = labelOpts;
    if (labelOpts.usePointStyle) {
        boxHeight = Math.min(boxHeight, fontSize);
        boxWidth = Math.min(boxWidth, fontSize);
    }
    return {
        boxWidth: boxWidth,
        boxHeight: boxHeight,
        itemHeight: Math.max(fontSize, boxHeight)
    };
};
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index
;
class $df29249fe447c065$var$$a43aa20d3eb44e80$var$Legend extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$db77ccec0bb4ccac {
    update(maxWidth, maxHeight, margins) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins;
        this.setDimensions();
        this.buildLabels();
        this.fit();
    }
    setDimensions() {
        if (this.isHorizontal()) {
            this.width = this.maxWidth;
            this.left = this._margins.left;
            this.right = this.width;
        } else {
            this.height = this.maxHeight;
            this.top = this._margins.top;
            this.bottom = this.height;
        }
    }
    buildLabels() {
        const labelOpts = this.options.labels || {
        };
        let legendItems = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(labelOpts.generateLabels, [
            this.chart
        ], this) || [];
        if (labelOpts.filter) legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data)
        );
        if (labelOpts.sort) legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data)
        );
        if (this.options.reverse) legendItems.reverse();
        this.legendItems = legendItems;
    }
    fit() {
        const { options: options , ctx: ctx  } = this;
        if (!options.display) {
            this.width = this.height = 0;
            return;
        }
        const labelOpts = options.labels;
        const labelFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(labelOpts.font);
        const fontSize = labelFont.size;
        const titleHeight = this._computeTitleHeight();
        const { boxWidth: boxWidth , itemHeight: itemHeight  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getBoxSize(labelOpts, fontSize);
        let width, height;
        ctx.font = labelFont.string;
        if (this.isHorizontal()) {
            width = this.maxWidth;
            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
        } else {
            height = this.maxHeight;
            width = this._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;
        }
        this.width = Math.min(width, options.maxWidth || this.maxWidth);
        this.height = Math.min(height, options.maxHeight || this.maxHeight);
    }
    _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
        const { ctx: ctx , maxWidth: maxWidth , options: { labels: { padding: padding  }  }  } = this;
        const hitboxes = this.legendHitBoxes = [];
        const lineWidths = this.lineWidths = [
            0
        ];
        const lineHeight = itemHeight + padding;
        let totalHeight = titleHeight;
        ctx.textAlign = "left";
        ctx.textBaseline = "middle";
        let row = -1;
        let top = -lineHeight;
        this.legendItems.forEach((legendItem, i)=>{
            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
                totalHeight += lineHeight;
                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
                top += lineHeight;
                row++;
            }
            hitboxes[i] = {
                left: 0,
                top: top,
                row: row,
                width: itemWidth,
                height: itemHeight
            };
            lineWidths[lineWidths.length - 1] += itemWidth + padding;
        });
        return totalHeight;
    }
    _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {
        const { ctx: ctx , maxHeight: maxHeight , options: { labels: { padding: padding  }  }  } = this;
        const hitboxes = this.legendHitBoxes = [];
        const columnSizes = this.columnSizes = [];
        const heightLimit = maxHeight - titleHeight;
        let totalWidth = padding;
        let currentColWidth = 0;
        let currentColHeight = 0;
        let left = 0;
        let col = 0;
        this.legendItems.forEach((legendItem, i)=>{
            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
                totalWidth += currentColWidth + padding;
                columnSizes.push({
                    width: currentColWidth,
                    height: currentColHeight
                });
                left += currentColWidth + padding;
                col++;
                currentColWidth = currentColHeight = 0;
            }
            hitboxes[i] = {
                left: left,
                top: currentColHeight,
                col: col,
                width: itemWidth,
                height: itemHeight
            };
            currentColWidth = Math.max(currentColWidth, itemWidth);
            currentColHeight += itemHeight + padding;
        });
        totalWidth += currentColWidth;
        columnSizes.push({
            width: currentColWidth,
            height: currentColHeight
        });
        return totalWidth;
    }
    adjustHitBoxes() {
        if (!this.options.display) return;
        const titleHeight = this._computeTitleHeight();
        const { legendHitBoxes: hitboxes , options: { align: align , labels: { padding: padding  } , rtl: rtl  }  } = this;
        const rtlHelper = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$28f7fcd39efa255(rtl, this.left, this.width);
        if (this.isHorizontal()) {
            let row = 0;
            let left = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(align, this.left + padding, this.right - this.lineWidths[row]);
            for (const hitbox of hitboxes){
                if (row !== hitbox.row) {
                    row = hitbox.row;
                    left = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(align, this.left + padding, this.right - this.lineWidths[row]);
                }
                hitbox.top += this.top + titleHeight + padding;
                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
                left += hitbox.width + padding;
            }
        } else {
            let col = 0;
            let top = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
            for (const hitbox of hitboxes){
                if (hitbox.col !== col) {
                    col = hitbox.col;
                    top = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
                }
                hitbox.top = top;
                hitbox.left += this.left + padding;
                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
                top += hitbox.height + padding;
            }
        }
    }
    isHorizontal() {
        return this.options.position === "top" || this.options.position === "bottom";
    }
    draw() {
        if (this.options.display) {
            const ctx = this.ctx;
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$78acf4525d8a74c4(ctx, this);
            this._draw();
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dc98b0b04f4c7758(ctx);
        }
    }
    _draw() {
        const { options: opts , columnSizes: columnSizes , lineWidths: lineWidths , ctx: ctx  } = this;
        const { align: align , labels: labelOpts  } = opts;
        const defaultColor = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.color;
        const rtlHelper = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$28f7fcd39efa255(opts.rtl, this.left, this.width);
        const labelFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(labelOpts.font);
        const { color: fontColor , padding: padding  } = labelOpts;
        const fontSize = labelFont.size;
        const halfFontSize = fontSize / 2;
        let cursor;
        this.drawTitle();
        ctx.textAlign = rtlHelper.textAlign("left");
        ctx.textBaseline = "middle";
        ctx.lineWidth = 0.5;
        ctx.font = labelFont.string;
        const { boxWidth: boxWidth , boxHeight: boxHeight , itemHeight: itemHeight  } = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getBoxSize(labelOpts, fontSize);
        const drawLegendBox = function(x, y, legendItem) {
            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) return;
            ctx.save();
            const lineWidth = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(legendItem.lineWidth, 1);
            ctx.fillStyle = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(legendItem.fillStyle, defaultColor);
            ctx.lineCap = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(legendItem.lineCap, "butt");
            ctx.lineDashOffset = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(legendItem.lineDashOffset, 0);
            ctx.lineJoin = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(legendItem.lineJoin, "miter");
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(legendItem.strokeStyle, defaultColor);
            ctx.setLineDash($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(legendItem.lineDash, []));
            if (labelOpts.usePointStyle) {
                const drawOptions = {
                    radius: boxWidth * Math.SQRT2 / 2,
                    pointStyle: legendItem.pointStyle,
                    rotation: legendItem.rotation,
                    borderWidth: lineWidth
                };
                const centerX = rtlHelper.xPlus(x, boxWidth / 2);
                const centerY = y + halfFontSize;
                $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$6554612db691658e(ctx, drawOptions, centerX, centerY);
            } else {
                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
                const borderRadius = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d66dc83d8cfc8dd(legendItem.borderRadius);
                ctx.beginPath();
                if (Object.values(borderRadius).some((v)=>v !== 0
                )) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$493d36ec626b6698(ctx, {
                    x: xBoxLeft,
                    y: yBoxTop,
                    w: boxWidth,
                    h: boxHeight,
                    radius: borderRadius
                });
                else ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
                ctx.fill();
                if (lineWidth !== 0) ctx.stroke();
            }
            ctx.restore();
        };
        const fillText = function(x, y, legendItem) {
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8743009a87fcb00f(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {
                strikethrough: legendItem.hidden,
                textAlign: rtlHelper.textAlign(legendItem.textAlign)
            });
        };
        const isHorizontal = this.isHorizontal();
        const titleHeight = this._computeTitleHeight();
        if (isHorizontal) cursor = {
            x: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(align, this.left + padding, this.right - lineWidths[0]),
            y: this.top + padding + titleHeight,
            line: 0
        };
        else cursor = {
            x: this.left + padding,
            y: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
            line: 0
        };
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d12bd131bb975d1(this.ctx, opts.textDirection);
        const lineHeight = itemHeight + padding;
        this.legendItems.forEach((legendItem, i)=>{
            ctx.strokeStyle = legendItem.fontColor || fontColor;
            ctx.fillStyle = legendItem.fontColor || fontColor;
            const textWidth = ctx.measureText(legendItem.text).width;
            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
            const width = boxWidth + halfFontSize + textWidth;
            let x = cursor.x;
            let y = cursor.y;
            rtlHelper.setWidth(this.width);
            if (isHorizontal) {
                if (i > 0 && x + width + padding > this.right) {
                    y = cursor.y += lineHeight;
                    cursor.line++;
                    x = cursor.x = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(align, this.left + padding, this.right - lineWidths[cursor.line]);
                }
            } else if (i > 0 && y + lineHeight > this.bottom) {
                x = cursor.x = x + columnSizes[cursor.line].width + padding;
                cursor.line++;
                y = cursor.y = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
            }
            const realX = rtlHelper.x(x);
            drawLegendBox(realX, y, legendItem);
            x = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$91c6e00c14e7e6fd(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);
            fillText(rtlHelper.x(x), y, legendItem);
            if (isHorizontal) cursor.x += width + padding;
            else cursor.y += lineHeight;
        });
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9d398bebfec1c039(this.ctx, opts.textDirection);
    }
    drawTitle() {
        const opts = this.options;
        const titleOpts = opts.title;
        const titleFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(titleOpts.font);
        const titlePadding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(titleOpts.padding);
        if (!titleOpts.display) return;
        const rtlHelper = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$28f7fcd39efa255(opts.rtl, this.left, this.width);
        const ctx = this.ctx;
        const position = titleOpts.position;
        const halfFontSize = titleFont.size / 2;
        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
        let y;
        let left = this.left;
        let maxWidth = this.width;
        if (this.isHorizontal()) {
            maxWidth = Math.max(...this.lineWidths);
            y = this.top + topPaddingPlusHalfFontSize;
            left = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(opts.align, left, this.right - maxWidth);
        } else {
            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height)
            , 0);
            y = topPaddingPlusHalfFontSize + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
        }
        const x = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(position, left, left + maxWidth);
        ctx.textAlign = rtlHelper.textAlign($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$34aec0b863436764(position));
        ctx.textBaseline = "middle";
        ctx.strokeStyle = titleOpts.color;
        ctx.fillStyle = titleOpts.color;
        ctx.font = titleFont.string;
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8743009a87fcb00f(ctx, titleOpts.text, x, y, titleFont);
    }
    _computeTitleHeight() {
        const titleOpts = this.options.title;
        const titleFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(titleOpts.font);
        const titlePadding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(titleOpts.padding);
        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
    }
    _getLegendItemAt(x, y) {
        let i, hitBox, lh;
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f38c853ae54ed474(x, this.left, this.right) && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f38c853ae54ed474(y, this.top, this.bottom)) {
            lh = this.legendHitBoxes;
            for(i = 0; i < lh.length; ++i){
                hitBox = lh[i];
                if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f38c853ae54ed474(x, hitBox.left, hitBox.left + hitBox.width) && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$f38c853ae54ed474(y, hitBox.top, hitBox.top + hitBox.height)) return this.legendItems[i];
            }
        }
        return null;
    }
    handleEvent(e) {
        const opts = this.options;
        if (!$df29249fe447c065$var$$a43aa20d3eb44e80$var$isListened(e.type, opts)) return;
        const hoveredItem = this._getLegendItemAt(e.x, e.y);
        if (e.type === "mousemove" || e.type === "mouseout") {
            const previous = this._hoveredItem;
            const sameItem = $df29249fe447c065$var$$a43aa20d3eb44e80$var$itemsEqual(previous, hoveredItem);
            if (previous && !sameItem) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(opts.onLeave, [
                e,
                previous,
                this
            ], this);
            this._hoveredItem = hoveredItem;
            if (hoveredItem && !sameItem) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(opts.onHover, [
                e,
                hoveredItem,
                this
            ], this);
        } else if (hoveredItem) $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(opts.onClick, [
            e,
            hoveredItem,
            this
        ], this);
    }
    constructor(config){
        super();
        this._added = false;
        this.legendHitBoxes = [];
        this._hoveredItem = null;
        this.doughnutMode = false;
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this.legendItems = undefined;
        this.columnSizes = undefined;
        this.lineWidths = undefined;
        this.maxHeight = undefined;
        this.maxWidth = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.height = undefined;
        this.width = undefined;
        this._margins = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$isListened(type, opts) {
    if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) return true;
    if (opts.onClick && (type === "click" || type === "mouseup")) return true;
    return false;
}
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$ed247974535929c7 = {
    id: "legend",
    _element: $df29249fe447c065$var$$a43aa20d3eb44e80$var$Legend,
    start (chart, _args, options) {
        const legend = chart.legend = new $df29249fe447c065$var$$a43aa20d3eb44e80$var$Legend({
            ctx: chart.ctx,
            options: options,
            chart: chart
        });
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.configure(chart, legend, options);
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.addBox(chart, legend);
    },
    stop (chart) {
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.removeBox(chart, chart.legend);
        delete chart.legend;
    },
    beforeUpdate (chart, _args, options) {
        const legend = chart.legend;
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.configure(chart, legend, options);
        legend.options = options;
    },
    afterUpdate (chart) {
        const legend = chart.legend;
        legend.buildLabels();
        legend.adjustHitBoxes();
    },
    afterEvent (chart, args) {
        if (!args.replay) chart.legend.handleEvent(args.event);
    },
    defaults: {
        display: true,
        position: "top",
        align: "center",
        fullSize: true,
        reverse: false,
        weight: 1000,
        onClick (e, legendItem, legend) {
            const index63 = legendItem.datasetIndex;
            const ci = legend.chart;
            if (ci.isDatasetVisible(index63)) {
                ci.hide(index63);
                legendItem.hidden = true;
            } else {
                ci.show(index63);
                legendItem.hidden = false;
            }
        },
        onHover: null,
        onLeave: null,
        labels: {
            color: (ctx)=>ctx.chart.options.color
            ,
            boxWidth: 40,
            padding: 10,
            generateLabels (chart) {
                const datasets = chart.data.datasets;
                const { labels: { usePointStyle: usePointStyle , pointStyle: pointStyle , textAlign: textAlign , color: color4  }  } = chart.legend.options;
                return chart._getSortedDatasetMetas().map((meta)=>{
                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
                    const borderWidth = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(style.borderWidth);
                    return {
                        text: datasets[meta.index].label,
                        fillStyle: style.backgroundColor,
                        fontColor: color4,
                        hidden: !meta.visible,
                        lineCap: style.borderCapStyle,
                        lineDash: style.borderDash,
                        lineDashOffset: style.borderDashOffset,
                        lineJoin: style.borderJoinStyle,
                        lineWidth: (borderWidth.width + borderWidth.height) / 4,
                        strokeStyle: style.borderColor,
                        pointStyle: pointStyle || style.pointStyle,
                        rotation: style.rotation,
                        textAlign: textAlign || style.textAlign,
                        borderRadius: 0,
                        datasetIndex: meta.index
                    };
                }, this);
            }
        },
        title: {
            color: (ctx)=>ctx.chart.options.color
            ,
            display: false,
            position: "center",
            text: ""
        }
    },
    descriptors: {
        _scriptable: (name)=>!name.startsWith("on")
        ,
        labels: {
            _scriptable: (name)=>![
                    "generateLabels",
                    "filter",
                    "sort"
                ].includes(name)
        }
    }
};
class $df29249fe447c065$var$$a43aa20d3eb44e80$var$Title extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$db77ccec0bb4ccac {
    update(maxWidth, maxHeight) {
        const opts = this.options;
        this.left = 0;
        this.top = 0;
        if (!opts.display) {
            this.width = this.height = this.right = this.bottom = 0;
            return;
        }
        this.width = this.right = maxWidth;
        this.height = this.bottom = maxHeight;
        const lineCount = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(opts.text) ? opts.text.length : 1;
        this._padding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(opts.padding);
        const textSize = lineCount * $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(opts.font).lineHeight + this._padding.height;
        if (this.isHorizontal()) this.height = textSize;
        else this.width = textSize;
    }
    isHorizontal() {
        const pos = this.options.position;
        return pos === "top" || pos === "bottom";
    }
    _drawArgs(offset) {
        const { top: top , left: left , bottom: bottom , right: right , options: options  } = this;
        const align = options.align;
        let rotation = 0;
        let maxWidth, titleX, titleY;
        if (this.isHorizontal()) {
            titleX = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(align, left, right);
            titleY = top + offset;
            maxWidth = right - left;
        } else {
            if (options.position === "left") {
                titleX = left + offset;
                titleY = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(align, bottom, top);
                rotation = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d * -0.5;
            } else {
                titleX = right - offset;
                titleY = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3c2fa207a37baaea(align, top, bottom);
                rotation = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d * 0.5;
            }
            maxWidth = bottom - top;
        }
        return {
            titleX: titleX,
            titleY: titleY,
            maxWidth: maxWidth,
            rotation: rotation
        };
    }
    draw() {
        const ctx = this.ctx;
        const opts = this.options;
        if (!opts.display) return;
        const fontOpts = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(opts.font);
        const lineHeight = fontOpts.lineHeight;
        const offset = lineHeight / 2 + this._padding.top;
        const { titleX: titleX , titleY: titleY , maxWidth: maxWidth , rotation: rotation  } = this._drawArgs(offset);
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8743009a87fcb00f(ctx, opts.text, 0, 0, fontOpts, {
            color: opts.color,
            maxWidth: maxWidth,
            rotation: rotation,
            textAlign: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$34aec0b863436764(opts.align),
            textBaseline: "middle",
            translation: [
                titleX,
                titleY
            ]
        });
    }
    constructor(config){
        super();
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this._padding = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$createTitle(chart, titleOpts) {
    const title = new $df29249fe447c065$var$$a43aa20d3eb44e80$var$Title({
        ctx: chart.ctx,
        options: titleOpts,
        chart: chart
    });
    $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.configure(chart, title, titleOpts);
    $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.addBox(chart, title);
    chart.titleBlock = title;
}
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$f99233281efd08a0 = {
    id: "title",
    _element: $df29249fe447c065$var$$a43aa20d3eb44e80$var$Title,
    start (chart, _args, options) {
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$createTitle(chart, options);
    },
    stop (chart) {
        const titleBlock = chart.titleBlock;
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.removeBox(chart, titleBlock);
        delete chart.titleBlock;
    },
    beforeUpdate (chart, _args, options) {
        const title = chart.titleBlock;
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.configure(chart, title, options);
        title.options = options;
    },
    defaults: {
        align: "center",
        display: false,
        font: {
            weight: "bold"
        },
        fullSize: true,
        padding: 10,
        position: "top",
        text: "",
        weight: 2000
    },
    defaultRoutes: {
        color: "color"
    },
    descriptors: {
        _scriptable: true,
        _indexable: false
    }
};
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$map = new WeakMap();
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$d5c56664638992a4 = {
    id: "subtitle",
    start (chart, _args, options) {
        const title = new $df29249fe447c065$var$$a43aa20d3eb44e80$var$Title({
            ctx: chart.ctx,
            options: options,
            chart: chart
        });
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.configure(chart, title, options);
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.addBox(chart, title);
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$map.set(chart, title);
    },
    stop (chart) {
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.removeBox(chart, $df29249fe447c065$var$$a43aa20d3eb44e80$var$map.get(chart));
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$map.delete(chart);
    },
    beforeUpdate (chart, _args, options) {
        const title = $df29249fe447c065$var$$a43aa20d3eb44e80$var$map.get(chart);
        $df29249fe447c065$var$$a43aa20d3eb44e80$export$1ecca0613f5e56d2.configure(chart, title, options);
        title.options = options;
    },
    defaults: {
        align: "center",
        display: false,
        font: {
            weight: "normal"
        },
        fullSize: true,
        padding: 0,
        position: "top",
        text: "",
        weight: 1500
    },
    defaultRoutes: {
        color: "color"
    },
    descriptors: {
        _scriptable: true,
        _indexable: false
    }
};
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$positioners = {
    average (items) {
        if (!items.length) return false;
        let i, len;
        let x = 0;
        let y = 0;
        let count = 0;
        for(i = 0, len = items.length; i < len; ++i){
            const el = items[i].element;
            if (el && el.hasValue()) {
                const pos = el.tooltipPosition();
                x += pos.x;
                y += pos.y;
                ++count;
            }
        }
        return {
            x: x / count,
            y: y / count
        };
    },
    nearest (items, eventPosition) {
        if (!items.length) return false;
        let x = eventPosition.x;
        let y = eventPosition.y;
        let minDistance = Number.POSITIVE_INFINITY;
        let i, len, nearestElement;
        for(i = 0, len = items.length; i < len; ++i){
            const el = items[i].element;
            if (el && el.hasValue()) {
                const center = el.getCenterPoint();
                const d = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$24baa2b76016ce0e(eventPosition, center);
                if (d < minDistance) {
                    minDistance = d;
                    nearestElement = el;
                }
            }
        }
        if (nearestElement) {
            const tp = nearestElement.tooltipPosition();
            x = tp.x;
            y = tp.y;
        }
        return {
            x: x,
            y: y
        };
    }
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$pushOrConcat(base, toPush) {
    if (toPush) {
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(toPush)) Array.prototype.push.apply(base, toPush);
        else base.push(toPush);
    }
    return base;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$splitNewlines(str) {
    if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) return str.split("\n");
    return str;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$createTooltipItem(chart, item) {
    const { element: element , datasetIndex: datasetIndex , index: index64  } = item;
    const controller = chart.getDatasetMeta(datasetIndex).controller;
    const { label: label , value: value  } = controller.getLabelAndValue(index64);
    return {
        chart: chart,
        label: label,
        parsed: controller.getParsed(index64),
        raw: chart.data.datasets[datasetIndex].data[index64],
        formattedValue: value,
        dataset: controller.getDataset(),
        dataIndex: index64,
        datasetIndex: datasetIndex,
        element: element
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTooltipSize(tooltip, options) {
    const ctx = tooltip.chart.ctx;
    const { body: body , footer: footer , title: title  } = tooltip;
    const { boxWidth: boxWidth , boxHeight: boxHeight  } = options;
    const bodyFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(options.bodyFont);
    const titleFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(options.titleFont);
    const footerFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(options.footerFont);
    const titleLineCount = title.length;
    const footerLineCount = footer.length;
    const bodyLineItemCount = body.length;
    const padding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(options.padding);
    let height = padding.height;
    let width = 0;
    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length
    , 0);
    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
    if (titleLineCount) height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
    if (combinedBodyLength) {
        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
    }
    if (footerLineCount) height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
    let widthPadding = 0;
    const maxLineWidth = function(line) {
        width = Math.max(width, ctx.measureText(line).width + widthPadding);
    };
    ctx.save();
    ctx.font = titleFont.string;
    $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(tooltip.title, maxLineWidth);
    ctx.font = bodyFont.string;
    $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
    $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(body, (bodyItem)=>{
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(bodyItem.before, maxLineWidth);
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(bodyItem.lines, maxLineWidth);
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(bodyItem.after, maxLineWidth);
    });
    widthPadding = 0;
    ctx.font = footerFont.string;
    $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(tooltip.footer, maxLineWidth);
    ctx.restore();
    width += padding.width;
    return {
        width: width,
        height: height
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineYAlign(chart, size) {
    const { y: y , height: height  } = size;
    if (y < height / 2) return "top";
    else if (y > chart.height - height / 2) return "bottom";
    return "center";
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$doesNotFitWithAlign(xAlign, chart, options, size) {
    const { x: x , width: width  } = size;
    const caret = options.caretSize + options.caretPadding;
    if (xAlign === "left" && x + width + caret > chart.width) return true;
    if (xAlign === "right" && x - width - caret < 0) return true;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineXAlign(chart, options, size, yAlign) {
    const { x: x , width: width  } = size;
    const { width: chartWidth , chartArea: { left: left , right: right  }  } = chart;
    let xAlign = "center";
    if (yAlign === "center") xAlign = x <= (left + right) / 2 ? "left" : "right";
    else if (x <= width / 2) xAlign = "left";
    else if (x >= chartWidth - width / 2) xAlign = "right";
    if ($df29249fe447c065$var$$a43aa20d3eb44e80$var$doesNotFitWithAlign(xAlign, chart, options, size)) xAlign = "center";
    return xAlign;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineAlignment(chart, options, size) {
    const yAlign = size.yAlign || options.yAlign || $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineYAlign(chart, size);
    return {
        xAlign: size.xAlign || options.xAlign || $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineXAlign(chart, options, size, yAlign),
        yAlign: yAlign
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$alignX(size, xAlign) {
    let { x: x , width: width  } = size;
    if (xAlign === "right") x -= width;
    else if (xAlign === "center") x -= width / 2;
    return x;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$alignY(size, yAlign, paddingAndSize) {
    let { y: y , height: height  } = size;
    if (yAlign === "top") y += paddingAndSize;
    else if (yAlign === "bottom") y -= height + paddingAndSize;
    else y -= height / 2;
    return y;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getBackgroundPoint(options, size, alignment, chart) {
    const { caretSize: caretSize , caretPadding: caretPadding , cornerRadius: cornerRadius  } = options;
    const { xAlign: xAlign , yAlign: yAlign  } = alignment;
    const paddingAndSize = caretSize + caretPadding;
    const { topLeft: topLeft , topRight: topRight , bottomLeft: bottomLeft , bottomRight: bottomRight  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d66dc83d8cfc8dd(cornerRadius);
    let x = $df29249fe447c065$var$$a43aa20d3eb44e80$var$alignX(size, xAlign);
    const y = $df29249fe447c065$var$$a43aa20d3eb44e80$var$alignY(size, yAlign, paddingAndSize);
    if (yAlign === "center") {
        if (xAlign === "left") x += paddingAndSize;
        else if (xAlign === "right") x -= paddingAndSize;
    } else if (xAlign === "left") x -= Math.max(topLeft, bottomLeft) + caretSize;
    else if (xAlign === "right") x += Math.max(topRight, bottomRight) + caretSize;
    return {
        x: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(x, 0, chart.width - size.width),
        y: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(y, 0, chart.height - size.height)
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getAlignedX(tooltip, align, options) {
    const padding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(options.padding);
    return align === "center" ? tooltip.x + tooltip.width / 2 : align === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getBeforeAfterBodyLines(callback1) {
    return $df29249fe447c065$var$$a43aa20d3eb44e80$var$pushOrConcat([], $df29249fe447c065$var$$a43aa20d3eb44e80$var$splitNewlines(callback1));
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$createTooltipContext(parent, tooltip, tooltipItems) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dda1d9f60106f0e9(parent, {
        tooltip: tooltip,
        tooltipItems: tooltipItems,
        type: "tooltip"
    });
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$overrideCallbacks(callbacks, context) {
    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
    return override ? callbacks.override(override) : callbacks;
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$var$Tooltip extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$db77ccec0bb4ccac {
    initialize(options) {
        this.options = options;
        this._cachedAnimations = undefined;
        this.$context = undefined;
    }
    _resolveAnimations() {
        const cached = this._cachedAnimations;
        if (cached) return cached;
        const chart = this.chart;
        const options = this.options.setContext(this.getContext());
        const opts = options.enabled && chart.options.animation && options.animations;
        const animations = new $df29249fe447c065$var$$a43aa20d3eb44e80$export$8ab227dac26677d(this.chart, opts);
        if (opts._cacheable) this._cachedAnimations = Object.freeze(animations);
        return animations;
    }
    getContext() {
        return this.$context || (this.$context = $df29249fe447c065$var$$a43aa20d3eb44e80$var$createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
    }
    getTitle(context, options) {
        const { callbacks: callbacks  } = options;
        const beforeTitle = callbacks.beforeTitle.apply(this, [
            context
        ]);
        const title = callbacks.title.apply(this, [
            context
        ]);
        const afterTitle = callbacks.afterTitle.apply(this, [
            context
        ]);
        let lines = [];
        lines = $df29249fe447c065$var$$a43aa20d3eb44e80$var$pushOrConcat(lines, $df29249fe447c065$var$$a43aa20d3eb44e80$var$splitNewlines(beforeTitle));
        lines = $df29249fe447c065$var$$a43aa20d3eb44e80$var$pushOrConcat(lines, $df29249fe447c065$var$$a43aa20d3eb44e80$var$splitNewlines(title));
        lines = $df29249fe447c065$var$$a43aa20d3eb44e80$var$pushOrConcat(lines, $df29249fe447c065$var$$a43aa20d3eb44e80$var$splitNewlines(afterTitle));
        return lines;
    }
    getBeforeBody(tooltipItems, options) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [
            tooltipItems
        ]));
    }
    getBody(tooltipItems, options) {
        const { callbacks: callbacks  } = options;
        const bodyItems = [];
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(tooltipItems, (context)=>{
            const bodyItem = {
                before: [],
                lines: [],
                after: []
            };
            const scoped = $df29249fe447c065$var$$a43aa20d3eb44e80$var$overrideCallbacks(callbacks, context);
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$pushOrConcat(bodyItem.before, $df29249fe447c065$var$$a43aa20d3eb44e80$var$splitNewlines(scoped.beforeLabel.call(this, context)));
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$pushOrConcat(bodyItem.lines, scoped.label.call(this, context));
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$pushOrConcat(bodyItem.after, $df29249fe447c065$var$$a43aa20d3eb44e80$var$splitNewlines(scoped.afterLabel.call(this, context)));
            bodyItems.push(bodyItem);
        });
        return bodyItems;
    }
    getAfterBody(tooltipItems, options) {
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [
            tooltipItems
        ]));
    }
    getFooter(tooltipItems, options) {
        const { callbacks: callbacks  } = options;
        const beforeFooter = callbacks.beforeFooter.apply(this, [
            tooltipItems
        ]);
        const footer = callbacks.footer.apply(this, [
            tooltipItems
        ]);
        const afterFooter = callbacks.afterFooter.apply(this, [
            tooltipItems
        ]);
        let lines = [];
        lines = $df29249fe447c065$var$$a43aa20d3eb44e80$var$pushOrConcat(lines, $df29249fe447c065$var$$a43aa20d3eb44e80$var$splitNewlines(beforeFooter));
        lines = $df29249fe447c065$var$$a43aa20d3eb44e80$var$pushOrConcat(lines, $df29249fe447c065$var$$a43aa20d3eb44e80$var$splitNewlines(footer));
        lines = $df29249fe447c065$var$$a43aa20d3eb44e80$var$pushOrConcat(lines, $df29249fe447c065$var$$a43aa20d3eb44e80$var$splitNewlines(afterFooter));
        return lines;
    }
    _createItems(options) {
        const active = this._active;
        const data = this.chart.data;
        const labelColors = [];
        const labelPointStyles = [];
        const labelTextColors = [];
        let tooltipItems = [];
        let i, len;
        for(i = 0, len = active.length; i < len; ++i)tooltipItems.push($df29249fe447c065$var$$a43aa20d3eb44e80$var$createTooltipItem(this.chart, active[i]));
        if (options.filter) tooltipItems = tooltipItems.filter((element, index65, array)=>options.filter(element, index65, array, data)
        );
        if (options.itemSort) tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data)
        );
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(tooltipItems, (context)=>{
            const scoped = $df29249fe447c065$var$$a43aa20d3eb44e80$var$overrideCallbacks(options.callbacks, context);
            labelColors.push(scoped.labelColor.call(this, context));
            labelPointStyles.push(scoped.labelPointStyle.call(this, context));
            labelTextColors.push(scoped.labelTextColor.call(this, context));
        });
        this.labelColors = labelColors;
        this.labelPointStyles = labelPointStyles;
        this.labelTextColors = labelTextColors;
        this.dataPoints = tooltipItems;
        return tooltipItems;
    }
    update(changed, replay) {
        const options = this.options.setContext(this.getContext());
        const active = this._active;
        let properties;
        let tooltipItems = [];
        if (!active.length) {
            if (this.opacity !== 0) properties = {
                opacity: 0
            };
        } else {
            const position = $df29249fe447c065$var$$a43aa20d3eb44e80$var$positioners[options.position].call(this, active, this._eventPosition);
            tooltipItems = this._createItems(options);
            this.title = this.getTitle(tooltipItems, options);
            this.beforeBody = this.getBeforeBody(tooltipItems, options);
            this.body = this.getBody(tooltipItems, options);
            this.afterBody = this.getAfterBody(tooltipItems, options);
            this.footer = this.getFooter(tooltipItems, options);
            const size = this._size = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTooltipSize(this, options);
            const positionAndSize = Object.assign({
            }, position, size);
            const alignment = $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineAlignment(this.chart, options, positionAndSize);
            const backgroundPoint = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getBackgroundPoint(options, positionAndSize, alignment, this.chart);
            this.xAlign = alignment.xAlign;
            this.yAlign = alignment.yAlign;
            properties = {
                opacity: 1,
                x: backgroundPoint.x,
                y: backgroundPoint.y,
                width: size.width,
                height: size.height,
                caretX: position.x,
                caretY: position.y
            };
        }
        this._tooltipItems = tooltipItems;
        this.$context = undefined;
        if (properties) this._resolveAnimations().update(this, properties);
        if (changed && options.external) options.external.call(this, {
            chart: this.chart,
            tooltip: this,
            replay: replay
        });
    }
    drawCaret(tooltipPoint, ctx, size, options) {
        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
        ctx.lineTo(caretPosition.x1, caretPosition.y1);
        ctx.lineTo(caretPosition.x2, caretPosition.y2);
        ctx.lineTo(caretPosition.x3, caretPosition.y3);
    }
    getCaretPosition(tooltipPoint, size, options) {
        const { xAlign: xAlign , yAlign: yAlign  } = this;
        const { caretSize: caretSize , cornerRadius: cornerRadius  } = options;
        const { topLeft: topLeft , topRight: topRight , bottomLeft: bottomLeft , bottomRight: bottomRight  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d66dc83d8cfc8dd(cornerRadius);
        const { x: ptX , y: ptY  } = tooltipPoint;
        const { width: width , height: height  } = size;
        let x1, x2, x3, y1, y2, y3;
        if (yAlign === "center") {
            y2 = ptY + height / 2;
            if (xAlign === "left") {
                x1 = ptX;
                x2 = x1 - caretSize;
                y1 = y2 + caretSize;
                y3 = y2 - caretSize;
            } else {
                x1 = ptX + width;
                x2 = x1 + caretSize;
                y1 = y2 - caretSize;
                y3 = y2 + caretSize;
            }
            x3 = x1;
        } else {
            if (xAlign === "left") x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
            else if (xAlign === "right") x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
            else x2 = this.caretX;
            if (yAlign === "top") {
                y1 = ptY;
                y2 = y1 - caretSize;
                x1 = x2 - caretSize;
                x3 = x2 + caretSize;
            } else {
                y1 = ptY + height;
                y2 = y1 + caretSize;
                x1 = x2 + caretSize;
                x3 = x2 - caretSize;
            }
            y3 = y1;
        }
        return {
            x1: x1,
            x2: x2,
            x3: x3,
            y1: y1,
            y2: y2,
            y3: y3
        };
    }
    drawTitle(pt, ctx, options) {
        const title = this.title;
        const length = title.length;
        let titleFont, titleSpacing, i;
        if (length) {
            const rtlHelper = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$28f7fcd39efa255(options.rtl, this.x, this.width);
            pt.x = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getAlignedX(this, options.titleAlign, options);
            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
            ctx.textBaseline = "middle";
            titleFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(options.titleFont);
            titleSpacing = options.titleSpacing;
            ctx.fillStyle = options.titleColor;
            ctx.font = titleFont.string;
            for(i = 0; i < length; ++i){
                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
                pt.y += titleFont.lineHeight + titleSpacing;
                if (i + 1 === length) pt.y += options.titleMarginBottom - titleSpacing;
            }
        }
    }
    _drawColorBox(ctx, pt, i, rtlHelper, options) {
        const labelColors = this.labelColors[i];
        const labelPointStyle = this.labelPointStyles[i];
        const { boxHeight: boxHeight , boxWidth: boxWidth , boxPadding: boxPadding  } = options;
        const bodyFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(options.bodyFont);
        const colorX = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getAlignedX(this, "left", options);
        const rtlColorX = rtlHelper.x(colorX);
        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
        const colorY = pt.y + yOffSet;
        if (options.usePointStyle) {
            const drawOptions = {
                radius: Math.min(boxWidth, boxHeight) / 2,
                pointStyle: labelPointStyle.pointStyle,
                rotation: labelPointStyle.rotation,
                borderWidth: 1
            };
            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
            const centerY = colorY + boxHeight / 2;
            ctx.strokeStyle = options.multiKeyBackground;
            ctx.fillStyle = options.multiKeyBackground;
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$6554612db691658e(ctx, drawOptions, centerX, centerY);
            ctx.strokeStyle = labelColors.borderColor;
            ctx.fillStyle = labelColors.backgroundColor;
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$6554612db691658e(ctx, drawOptions, centerX, centerY);
        } else {
            ctx.lineWidth = labelColors.borderWidth || 1;
            ctx.strokeStyle = labelColors.borderColor;
            ctx.setLineDash(labelColors.borderDash || []);
            ctx.lineDashOffset = labelColors.borderDashOffset || 0;
            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);
            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);
            const borderRadius = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d66dc83d8cfc8dd(labelColors.borderRadius);
            if (Object.values(borderRadius).some((v)=>v !== 0
            )) {
                ctx.beginPath();
                ctx.fillStyle = options.multiKeyBackground;
                $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$493d36ec626b6698(ctx, {
                    x: outerX,
                    y: colorY,
                    w: boxWidth,
                    h: boxHeight,
                    radius: borderRadius
                });
                ctx.fill();
                ctx.stroke();
                ctx.fillStyle = labelColors.backgroundColor;
                ctx.beginPath();
                $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$493d36ec626b6698(ctx, {
                    x: innerX,
                    y: colorY + 1,
                    w: boxWidth - 2,
                    h: boxHeight - 2,
                    radius: borderRadius
                });
                ctx.fill();
            } else {
                ctx.fillStyle = options.multiKeyBackground;
                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
                ctx.fillStyle = labelColors.backgroundColor;
                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
            }
        }
        ctx.fillStyle = this.labelTextColors[i];
    }
    drawBody(pt, ctx, options) {
        const { body: body  } = this;
        const { bodySpacing: bodySpacing , bodyAlign: bodyAlign , displayColors: displayColors , boxHeight: boxHeight , boxWidth: boxWidth , boxPadding: boxPadding  } = options;
        const bodyFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(options.bodyFont);
        let bodyLineHeight = bodyFont.lineHeight;
        let xLinePadding = 0;
        const rtlHelper = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$28f7fcd39efa255(options.rtl, this.x, this.width);
        const fillLineOfText = function(line) {
            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
            pt.y += bodyLineHeight + bodySpacing;
        };
        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
        let bodyItem, textColor, lines, i, j, ilen, jlen;
        ctx.textAlign = bodyAlign;
        ctx.textBaseline = "middle";
        ctx.font = bodyFont.string;
        pt.x = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getAlignedX(this, bodyAlignForCalculation, options);
        ctx.fillStyle = options.bodyColor;
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(this.beforeBody, fillLineOfText);
        xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
        for(i = 0, ilen = body.length; i < ilen; ++i){
            bodyItem = body[i];
            textColor = this.labelTextColors[i];
            ctx.fillStyle = textColor;
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(bodyItem.before, fillLineOfText);
            lines = bodyItem.lines;
            if (displayColors && lines.length) {
                this._drawColorBox(ctx, pt, i, rtlHelper, options);
                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
            }
            for(j = 0, jlen = lines.length; j < jlen; ++j){
                fillLineOfText(lines[j]);
                bodyLineHeight = bodyFont.lineHeight;
            }
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(bodyItem.after, fillLineOfText);
        }
        xLinePadding = 0;
        bodyLineHeight = bodyFont.lineHeight;
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a9c23c6ac3fc3eca(this.afterBody, fillLineOfText);
        pt.y -= bodySpacing;
    }
    drawFooter(pt, ctx, options) {
        const footer = this.footer;
        const length = footer.length;
        let footerFont, i;
        if (length) {
            const rtlHelper = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$28f7fcd39efa255(options.rtl, this.x, this.width);
            pt.x = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getAlignedX(this, options.footerAlign, options);
            pt.y += options.footerMarginTop;
            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
            ctx.textBaseline = "middle";
            footerFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(options.footerFont);
            ctx.fillStyle = options.footerColor;
            ctx.font = footerFont.string;
            for(i = 0; i < length; ++i){
                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
                pt.y += footerFont.lineHeight + options.footerSpacing;
            }
        }
    }
    drawBackground(pt, ctx, tooltipSize, options) {
        const { xAlign: xAlign , yAlign: yAlign  } = this;
        const { x: x , y: y  } = pt;
        const { width: width , height: height  } = tooltipSize;
        const { topLeft: topLeft , topRight: topRight , bottomLeft: bottomLeft , bottomRight: bottomRight  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d66dc83d8cfc8dd(options.cornerRadius);
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.beginPath();
        ctx.moveTo(x + topLeft, y);
        if (yAlign === "top") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + width - topRight, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
        if (yAlign === "center" && xAlign === "right") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + width, y + height - bottomRight);
        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
        if (yAlign === "bottom") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + bottomLeft, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
        if (yAlign === "center" && xAlign === "left") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x, y + topLeft);
        ctx.quadraticCurveTo(x, y, x + topLeft, y);
        ctx.closePath();
        ctx.fill();
        if (options.borderWidth > 0) ctx.stroke();
    }
    _updateAnimationTarget(options) {
        const chart = this.chart;
        const anims = this.$animations;
        const animX = anims && anims.x;
        const animY = anims && anims.y;
        if (animX || animY) {
            const position = $df29249fe447c065$var$$a43aa20d3eb44e80$var$positioners[options.position].call(this, this._active, this._eventPosition);
            if (!position) return;
            const size = this._size = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTooltipSize(this, options);
            const positionAndSize = Object.assign({
            }, position, this._size);
            const alignment = $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineAlignment(chart, options, positionAndSize);
            const point = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getBackgroundPoint(options, positionAndSize, alignment, chart);
            if (animX._to !== point.x || animY._to !== point.y) {
                this.xAlign = alignment.xAlign;
                this.yAlign = alignment.yAlign;
                this.width = size.width;
                this.height = size.height;
                this.caretX = position.x;
                this.caretY = position.y;
                this._resolveAnimations().update(this, point);
            }
        }
    }
    _willRender() {
        return !!this.opacity;
    }
    draw(ctx) {
        const options = this.options.setContext(this.getContext());
        let opacity = this.opacity;
        if (!opacity) return;
        this._updateAnimationTarget(options);
        const tooltipSize = {
            width: this.width,
            height: this.height
        };
        const pt = {
            x: this.x,
            y: this.y
        };
        opacity = Math.abs(opacity) < 0.001 ? 0 : opacity;
        const padding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(options.padding);
        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
        if (options.enabled && hasTooltipContent) {
            ctx.save();
            ctx.globalAlpha = opacity;
            this.drawBackground(pt, ctx, tooltipSize, options);
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d12bd131bb975d1(ctx, options.textDirection);
            pt.y += padding.top;
            this.drawTitle(pt, ctx, options);
            this.drawBody(pt, ctx, options);
            this.drawFooter(pt, ctx, options);
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9d398bebfec1c039(ctx, options.textDirection);
            ctx.restore();
        }
    }
    getActiveElements() {
        return this._active || [];
    }
    setActiveElements(activeElements, eventPosition) {
        const lastActive = this._active;
        const active = activeElements.map(({ datasetIndex: datasetIndex , index: index66  })=>{
            const meta = this.chart.getDatasetMeta(datasetIndex);
            if (!meta) throw new Error("Cannot find a dataset at index " + datasetIndex);
            return {
                datasetIndex: datasetIndex,
                element: meta.data[index66],
                index: index66
            };
        });
        const changed = !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ee7c8ad385a60b7b(lastActive, active);
        const positionChanged = this._positionChanged(active, eventPosition);
        if (changed || positionChanged) {
            this._active = active;
            this._eventPosition = eventPosition;
            this._ignoreReplayEvents = true;
            this.update(true);
        }
    }
    handleEvent(e, replay, inChartArea = true) {
        if (replay && this._ignoreReplayEvents) return false;
        this._ignoreReplayEvents = false;
        const options = this.options;
        const lastActive = this._active || [];
        const active = this._getActiveElements(e, lastActive, replay, inChartArea);
        const positionChanged = this._positionChanged(active, e);
        const changed = replay || !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ee7c8ad385a60b7b(active, lastActive) || positionChanged;
        if (changed) {
            this._active = active;
            if (options.enabled || options.external) {
                this._eventPosition = {
                    x: e.x,
                    y: e.y
                };
                this.update(true, replay);
            }
        }
        return changed;
    }
    _getActiveElements(e, lastActive, replay, inChartArea) {
        const options = this.options;
        if (e.type === "mouseout") return [];
        if (!inChartArea) return lastActive;
        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
        if (options.reverse) active.reverse();
        return active;
    }
    _positionChanged(active, e) {
        const { caretX: caretX , caretY: caretY , options: options  } = this;
        const position = $df29249fe447c065$var$$a43aa20d3eb44e80$var$positioners[options.position].call(this, active, e);
        return position !== false && (caretX !== position.x || caretY !== position.y);
    }
    constructor(config){
        super();
        this.opacity = 0;
        this._active = [];
        this._eventPosition = undefined;
        this._size = undefined;
        this._cachedAnimations = undefined;
        this._tooltipItems = [];
        this.$animations = undefined;
        this.$context = undefined;
        this.chart = config.chart || config._chart;
        this._chart = this.chart;
        this.options = config.options;
        this.dataPoints = undefined;
        this.title = undefined;
        this.beforeBody = undefined;
        this.body = undefined;
        this.afterBody = undefined;
        this.footer = undefined;
        this.xAlign = undefined;
        this.yAlign = undefined;
        this.x = undefined;
        this.y = undefined;
        this.height = undefined;
        this.width = undefined;
        this.caretX = undefined;
        this.caretY = undefined;
        this.labelColors = undefined;
        this.labelPointStyles = undefined;
        this.labelTextColors = undefined;
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$var$Tooltip.positioners = $df29249fe447c065$var$$a43aa20d3eb44e80$var$positioners;
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$28c660c63b792dea = {
    id: "tooltip",
    _element: $df29249fe447c065$var$$a43aa20d3eb44e80$var$Tooltip,
    positioners: $df29249fe447c065$var$$a43aa20d3eb44e80$var$positioners,
    afterInit (chart, _args, options) {
        if (options) chart.tooltip = new $df29249fe447c065$var$$a43aa20d3eb44e80$var$Tooltip({
            chart: chart,
            options: options
        });
    },
    beforeUpdate (chart, _args, options) {
        if (chart.tooltip) chart.tooltip.initialize(options);
    },
    reset (chart, _args, options) {
        if (chart.tooltip) chart.tooltip.initialize(options);
    },
    afterDraw (chart) {
        const tooltip = chart.tooltip;
        if (tooltip && tooltip._willRender()) {
            const args = {
                tooltip: tooltip
            };
            if (chart.notifyPlugins("beforeTooltipDraw", args) === false) return;
            tooltip.draw(chart.ctx);
            chart.notifyPlugins("afterTooltipDraw", args);
        }
    },
    afterEvent (chart, args) {
        if (chart.tooltip) {
            const useFinalPosition = args.replay;
            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) args.changed = true;
        }
    },
    defaults: {
        enabled: true,
        external: null,
        position: "average",
        backgroundColor: "rgba(0,0,0,0.8)",
        titleColor: "#fff",
        titleFont: {
            weight: "bold"
        },
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleAlign: "left",
        bodyColor: "#fff",
        bodySpacing: 2,
        bodyFont: {
        },
        bodyAlign: "left",
        footerColor: "#fff",
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFont: {
            weight: "bold"
        },
        footerAlign: "left",
        padding: 6,
        caretPadding: 2,
        caretSize: 5,
        cornerRadius: 6,
        boxHeight: (ctx, opts)=>opts.bodyFont.size
        ,
        boxWidth: (ctx, opts)=>opts.bodyFont.size
        ,
        multiKeyBackground: "#fff",
        displayColors: true,
        boxPadding: 0,
        borderColor: "rgba(0,0,0,0)",
        borderWidth: 0,
        animation: {
            duration: 400,
            easing: "easeOutQuart"
        },
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "x",
                    "y",
                    "width",
                    "height",
                    "caretX",
                    "caretY"
                ]
            },
            opacity: {
                easing: "linear",
                duration: 200
            }
        },
        callbacks: {
            beforeTitle: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$890c4ad488842ce7,
            title (tooltipItems) {
                if (tooltipItems.length > 0) {
                    const item = tooltipItems[0];
                    const labels = item.chart.data.labels;
                    const labelCount = labels ? labels.length : 0;
                    if (this && this.options && this.options.mode === "dataset") return item.dataset.label || "";
                    else if (item.label) return item.label;
                    else if (labelCount > 0 && item.dataIndex < labelCount) return labels[item.dataIndex];
                }
                return "";
            },
            afterTitle: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$890c4ad488842ce7,
            beforeBody: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$890c4ad488842ce7,
            beforeLabel: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$890c4ad488842ce7,
            label (tooltipItem) {
                if (this && this.options && this.options.mode === "dataset") return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
                let label = tooltipItem.dataset.label || "";
                if (label) label += ": ";
                const value = tooltipItem.formattedValue;
                if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(value)) label += value;
                return label;
            },
            labelColor (tooltipItem) {
                const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
                const options = meta.controller.getStyle(tooltipItem.dataIndex);
                return {
                    borderColor: options.borderColor,
                    backgroundColor: options.backgroundColor,
                    borderWidth: options.borderWidth,
                    borderDash: options.borderDash,
                    borderDashOffset: options.borderDashOffset,
                    borderRadius: 0
                };
            },
            labelTextColor () {
                return this.options.bodyColor;
            },
            labelPointStyle (tooltipItem) {
                const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
                const options = meta.controller.getStyle(tooltipItem.dataIndex);
                return {
                    pointStyle: options.pointStyle,
                    rotation: options.rotation
                };
            },
            afterLabel: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$890c4ad488842ce7,
            afterBody: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$890c4ad488842ce7,
            beforeFooter: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$890c4ad488842ce7,
            footer: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$890c4ad488842ce7,
            afterFooter: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$890c4ad488842ce7
        }
    },
    defaultRoutes: {
        bodyFont: "font",
        footerFont: "font",
        titleFont: "font"
    },
    descriptors: {
        _scriptable: (name)=>name !== "filter" && name !== "itemSort" && name !== "external"
        ,
        _indexable: false,
        callbacks: {
            _scriptable: false,
            _indexable: false
        },
        animation: {
            _fallback: false
        },
        animations: {
            _fallback: "animation"
        }
    },
    additionalOptionScopes: [
        "interaction"
    ]
};
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$8b3ca321c77fdea6 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    Decimation: $df29249fe447c065$var$$a43aa20d3eb44e80$export$be17f937e9aa7533,
    Filler: $df29249fe447c065$var$$a43aa20d3eb44e80$export$d19ba4d812bed757,
    Legend: $df29249fe447c065$var$$a43aa20d3eb44e80$export$ed247974535929c7,
    SubTitle: $df29249fe447c065$var$$a43aa20d3eb44e80$export$d5c56664638992a4,
    Title: $df29249fe447c065$var$$a43aa20d3eb44e80$export$f99233281efd08a0,
    Tooltip: $df29249fe447c065$var$$a43aa20d3eb44e80$export$28c660c63b792dea
});
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$addIfString = (labels, raw, index67, addedLabels)=>{
    if (typeof raw === "string") {
        index67 = labels.push(raw) - 1;
        addedLabels.unshift({
            index: index67,
            label: raw
        });
    } else if (isNaN(raw)) index67 = null;
    return index67;
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$findOrAddLabel(labels, raw, index68, addedLabels) {
    const first = labels.indexOf(raw);
    if (first === -1) return $df29249fe447c065$var$$a43aa20d3eb44e80$var$addIfString(labels, raw, index68, addedLabels);
    const last = labels.lastIndexOf(raw);
    return first !== last ? index68 : first;
}
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$validIndex = (index69, max)=>index69 === null ? null : $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(Math.round(index69), 0, max)
;
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$29e663ba4d09fe7 extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$d60cfc58d3c358b6 {
    init(scaleOptions) {
        const added = this._addedLabels;
        if (added.length) {
            const labels = this.getLabels();
            for (const { index: index70 , label: label  } of added)if (labels[index70] === label) labels.splice(index70, 1);
            this._addedLabels = [];
        }
        super.init(scaleOptions);
    }
    parse(raw, index71) {
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(raw)) return null;
        const labels = this.getLabels();
        index71 = isFinite(index71) && labels[index71] === raw ? index71 : $df29249fe447c065$var$$a43aa20d3eb44e80$var$findOrAddLabel(labels, raw, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(index71, raw), this._addedLabels);
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$validIndex(index71, labels.length - 1);
    }
    determineDataLimits() {
        const { minDefined: minDefined , maxDefined: maxDefined  } = this.getUserBounds();
        let { min: min , max: max  } = this.getMinMax(true);
        if (this.options.bounds === "ticks") {
            if (!minDefined) min = 0;
            if (!maxDefined) max = this.getLabels().length - 1;
        }
        this.min = min;
        this.max = max;
    }
    buildTicks() {
        const min = this.min;
        const max = this.max;
        const offset = this.options.offset;
        const ticks = [];
        let labels = this.getLabels();
        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
        this._startValue = this.min - (offset ? 0.5 : 0);
        for(let value = min; value <= max; value++)ticks.push({
            value: value
        });
        return ticks;
    }
    getLabelForValue(value) {
        const labels = this.getLabels();
        if (value >= 0 && value < labels.length) return labels[value];
        return value;
    }
    configure() {
        super.configure();
        if (!this.isHorizontal()) this._reversePixels = !this._reversePixels;
    }
    getPixelForValue(value) {
        if (typeof value !== "number") value = this.parse(value);
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getPixelForTick(index72) {
        const ticks = this.ticks;
        if (index72 < 0 || index72 > ticks.length - 1) return null;
        return this.getPixelForValue(ticks[index72].value);
    }
    getValueForPixel(pixel) {
        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
    }
    getBasePixel() {
        return this.bottom;
    }
    constructor(cfg){
        super(cfg);
        this._startValue = undefined;
        this._valueRange = 0;
        this._addedLabels = [];
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$29e663ba4d09fe7.id = "category";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$29e663ba4d09fe7.defaults = {
    ticks: {
        callback: $df29249fe447c065$var$$a43aa20d3eb44e80$export$29e663ba4d09fe7.prototype.getLabelForValue
    }
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$generateTicks$1(generationOptions, dataRange) {
    const ticks = [];
    const MIN_SPACING = 0.00000000000001;
    const { bounds: bounds , step: step , min: min , max: max , precision: precision , count: count , maxTicks: maxTicks , maxDigits: maxDigits , includeBounds: includeBounds  } = generationOptions;
    const unit = step || 1;
    const maxSpaces = maxTicks - 1;
    const { min: rmin , max: rmax  } = dataRange;
    const minDefined = !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(min);
    const maxDefined = !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(max);
    const countDefined = !$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(count);
    const minSpacing = (rmax - rmin) / (maxDigits + 1);
    let spacing = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$cf2f7c5792f80b46((rmax - rmin) / maxSpaces / unit) * unit;
    let factor, niceMin, niceMax, numSpaces;
    if (spacing < MIN_SPACING && !minDefined && !maxDefined) return [
        {
            value: rmin
        },
        {
            value: rmax
        }
    ];
    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
    if (numSpaces > maxSpaces) spacing = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$cf2f7c5792f80b46(numSpaces * spacing / maxSpaces / unit) * unit;
    if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(precision)) {
        factor = Math.pow(10, precision);
        spacing = Math.ceil(spacing * factor) / factor;
    }
    if (bounds === "ticks") {
        niceMin = Math.floor(rmin / spacing) * spacing;
        niceMax = Math.ceil(rmax / spacing) * spacing;
    } else {
        niceMin = rmin;
        niceMax = rmax;
    }
    if (minDefined && maxDefined && step && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$53a70dd1ebbae346((max - min) / step, spacing / 1000)) {
        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
        spacing = (max - min) / numSpaces;
        niceMin = min;
        niceMax = max;
    } else if (countDefined) {
        niceMin = minDefined ? min : niceMin;
        niceMax = maxDefined ? max : niceMax;
        numSpaces = count - 1;
        spacing = (niceMax - niceMin) / numSpaces;
    } else {
        numSpaces = (niceMax - niceMin) / spacing;
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a33b77bbdbb8366c(numSpaces, Math.round(numSpaces), spacing / 1000)) numSpaces = Math.round(numSpaces);
        else numSpaces = Math.ceil(numSpaces);
    }
    const decimalPlaces = Math.max($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$b9a6b53f9be3734(spacing), $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$b9a6b53f9be3734(niceMin));
    factor = Math.pow(10, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(precision) ? decimalPlaces : precision);
    niceMin = Math.round(niceMin * factor) / factor;
    niceMax = Math.round(niceMax * factor) / factor;
    let j = 0;
    if (minDefined) {
        if (includeBounds && niceMin !== min) {
            ticks.push({
                value: min
            });
            if (niceMin < min) j++;
            if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a33b77bbdbb8366c(Math.round((niceMin + j * spacing) * factor) / factor, min, $df29249fe447c065$var$$a43aa20d3eb44e80$var$relativeLabelSize(min, minSpacing, generationOptions))) j++;
        } else if (niceMin < min) j++;
    }
    for(; j < numSpaces; ++j)ticks.push({
        value: Math.round((niceMin + j * spacing) * factor) / factor
    });
    if (maxDefined && includeBounds && niceMax !== max) {
        if (ticks.length && $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a33b77bbdbb8366c(ticks[ticks.length - 1].value, max, $df29249fe447c065$var$$a43aa20d3eb44e80$var$relativeLabelSize(max, minSpacing, generationOptions))) ticks[ticks.length - 1].value = max;
        else ticks.push({
            value: max
        });
    } else if (!maxDefined || niceMax === max) ticks.push({
        value: niceMax
    });
    return ticks;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$relativeLabelSize(value, minSpacing, { horizontal: horizontal , minRotation: minRotation  }) {
    const rad = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$625550452a3fa3ec(minRotation);
    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
    const length = 0.75 * minSpacing * ("" + value).length;
    return Math.min(minSpacing / ratio, length);
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$var$LinearScaleBase extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$d60cfc58d3c358b6 {
    parse(raw, index) {
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(raw)) return null;
        if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) return null;
        return +raw;
    }
    handleTickRangeOptions() {
        const { beginAtZero: beginAtZero  } = this.options;
        const { minDefined: minDefined , maxDefined: maxDefined  } = this.getUserBounds();
        let { min: min , max: max  } = this;
        const setMin = (v)=>min = minDefined ? min : v
        ;
        const setMax = (v)=>max = maxDefined ? max : v
        ;
        if (beginAtZero) {
            const minSign = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2408f22a0fab9ae5(min);
            const maxSign = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$2408f22a0fab9ae5(max);
            if (minSign < 0 && maxSign < 0) setMax(0);
            else if (minSign > 0 && maxSign > 0) setMin(0);
        }
        if (min === max) {
            let offset = 1;
            if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) offset = Math.abs(max * 0.05);
            setMax(max + offset);
            if (!beginAtZero) setMin(min - offset);
        }
        this.min = min;
        this.max = max;
    }
    getTickLimit() {
        const tickOpts = this.options.ticks;
        let { maxTicksLimit: maxTicksLimit , stepSize: stepSize  } = tickOpts;
        let maxTicks;
        if (stepSize) {
            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
            if (maxTicks > 1000) {
                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
                maxTicks = 1000;
            }
        } else {
            maxTicks = this.computeTickLimit();
            maxTicksLimit = maxTicksLimit || 11;
        }
        if (maxTicksLimit) maxTicks = Math.min(maxTicksLimit, maxTicks);
        return maxTicks;
    }
    computeTickLimit() {
        return Number.POSITIVE_INFINITY;
    }
    buildTicks() {
        const opts = this.options;
        const tickOpts = opts.ticks;
        let maxTicks = this.getTickLimit();
        maxTicks = Math.max(2, maxTicks);
        const numericGeneratorOptions = {
            maxTicks: maxTicks,
            bounds: opts.bounds,
            min: opts.min,
            max: opts.max,
            precision: tickOpts.precision,
            step: tickOpts.stepSize,
            count: tickOpts.count,
            maxDigits: this._maxDigits(),
            horizontal: this.isHorizontal(),
            minRotation: tickOpts.minRotation || 0,
            includeBounds: tickOpts.includeBounds !== false
        };
        const dataRange = this._range || this;
        const ticks = $df29249fe447c065$var$$a43aa20d3eb44e80$var$generateTicks$1(numericGeneratorOptions, dataRange);
        if (opts.bounds === "ticks") $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$158acd800e1ef08b(ticks, this, "value");
        if (opts.reverse) {
            ticks.reverse();
            this.start = this.max;
            this.end = this.min;
        } else {
            this.start = this.min;
            this.end = this.max;
        }
        return ticks;
    }
    configure() {
        const ticks = this.ticks;
        let start = this.min;
        let end = this.max;
        super.configure();
        if (this.options.offset && ticks.length) {
            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
            start -= offset;
            end += offset;
        }
        this._startValue = start;
        this._endValue = end;
        this._valueRange = end - start;
    }
    getLabelForValue(value) {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ae1af26003f05816(value, this.chart.options.locale, this.options.ticks.format);
    }
    constructor(cfg){
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._endValue = undefined;
        this._valueRange = 0;
    }
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$e7f4e5e8656f0b93 extends $df29249fe447c065$var$$a43aa20d3eb44e80$var$LinearScaleBase {
    determineDataLimits() {
        const { min: min , max: max  } = this.getMinMax(true);
        this.min = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(min) ? min : 0;
        this.max = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(max) ? max : 1;
        this.handleTickRangeOptions();
    }
    computeTickLimit() {
        const horizontal = this.isHorizontal();
        const length = horizontal ? this.width : this.height;
        const minRotation = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$625550452a3fa3ec(this.options.ticks.minRotation);
        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
        const tickFont = this._resolveTickFontOptions(0);
        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
    }
    getPixelForValue(value) {
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$e7f4e5e8656f0b93.id = "linear";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$e7f4e5e8656f0b93.defaults = {
    ticks: {
        callback: $df29249fe447c065$var$$a43aa20d3eb44e80$export$27c7467594ef87bd.formatters.numeric
    }
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$isMajor(tickVal) {
    const remain = tickVal / Math.pow(10, Math.floor($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a1a48c8f6ef640e(tickVal)));
    return remain === 1;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$generateTicks(generationOptions, dataRange) {
    const endExp = Math.floor($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a1a48c8f6ef640e(dataRange.max));
    const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
    const ticks = [];
    let tickVal = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c4ce752e73470fba(generationOptions.min, Math.pow(10, Math.floor($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a1a48c8f6ef640e(dataRange.min))));
    let exp = Math.floor($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a1a48c8f6ef640e(tickVal));
    let significand = Math.floor(tickVal / Math.pow(10, exp));
    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
    do {
        ticks.push({
            value: tickVal,
            major: $df29249fe447c065$var$$a43aa20d3eb44e80$var$isMajor(tickVal)
        });
        ++significand;
        if (significand === 10) {
            significand = 1;
            ++exp;
            precision = exp >= 0 ? 1 : precision;
        }
        tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
    }while (exp < endExp || exp === endExp && significand < endSignificand)
    const lastTick = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$c4ce752e73470fba(generationOptions.max, tickVal);
    ticks.push({
        value: lastTick,
        major: $df29249fe447c065$var$$a43aa20d3eb44e80$var$isMajor(tickVal)
    });
    return ticks;
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$85295eaf7cb3ac3e extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$d60cfc58d3c358b6 {
    parse(raw, index73) {
        const value = $df29249fe447c065$var$$a43aa20d3eb44e80$var$LinearScaleBase.prototype.parse.apply(this, [
            raw,
            index73
        ]);
        if (value === 0) {
            this._zero = true;
            return undefined;
        }
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(value) && value > 0 ? value : null;
    }
    determineDataLimits() {
        const { min: min , max: max  } = this.getMinMax(true);
        this.min = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(min) ? Math.max(0, min) : null;
        this.max = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(max) ? Math.max(0, max) : null;
        if (this.options.beginAtZero) this._zero = true;
        this.handleTickRangeOptions();
    }
    handleTickRangeOptions() {
        const { minDefined: minDefined , maxDefined: maxDefined  } = this.getUserBounds();
        let min = this.min;
        let max = this.max;
        const setMin = (v)=>min = minDefined ? min : v
        ;
        const setMax = (v)=>max = maxDefined ? max : v
        ;
        const exp = (v, m)=>Math.pow(10, Math.floor($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a1a48c8f6ef640e(v)) + m)
        ;
        if (min === max) {
            if (min <= 0) {
                setMin(1);
                setMax(10);
            } else {
                setMin(exp(min, -1));
                setMax(exp(max, 1));
            }
        }
        if (min <= 0) setMin(exp(max, -1));
        if (max <= 0) setMax(exp(min, 1));
        if (this._zero && this.min !== this._suggestedMin && min === exp(this.min, 0)) setMin(exp(min, -1));
        this.min = min;
        this.max = max;
    }
    buildTicks() {
        const opts = this.options;
        const generationOptions = {
            min: this._userMin,
            max: this._userMax
        };
        const ticks = $df29249fe447c065$var$$a43aa20d3eb44e80$var$generateTicks(generationOptions, this);
        if (opts.bounds === "ticks") $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$158acd800e1ef08b(ticks, this, "value");
        if (opts.reverse) {
            ticks.reverse();
            this.start = this.max;
            this.end = this.min;
        } else {
            this.start = this.min;
            this.end = this.max;
        }
        return ticks;
    }
    getLabelForValue(value) {
        return value === undefined ? "0" : $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$ae1af26003f05816(value, this.chart.options.locale, this.options.ticks.format);
    }
    configure() {
        const start = this.min;
        super.configure();
        this._startValue = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a1a48c8f6ef640e(start);
        this._valueRange = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a1a48c8f6ef640e(this.max) - $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a1a48c8f6ef640e(start);
    }
    getPixelForValue(value) {
        if (value === undefined || value === 0) value = this.min;
        if (value === null || isNaN(value)) return NaN;
        return this.getPixelForDecimal(value === this.min ? 0 : ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3a1a48c8f6ef640e(value) - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
        const decimal = this.getDecimalForPixel(pixel);
        return Math.pow(10, this._startValue + decimal * this._valueRange);
    }
    constructor(cfg){
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._valueRange = 0;
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$85295eaf7cb3ac3e.id = "logarithmic";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$85295eaf7cb3ac3e.defaults = {
    ticks: {
        callback: $df29249fe447c065$var$$a43aa20d3eb44e80$export$27c7467594ef87bd.formatters.logarithmic,
        major: {
            enabled: true
        }
    }
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTickBackdropHeight(opts) {
    const tickOpts = opts.ticks;
    if (tickOpts.display && opts.display) {
        const padding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(tickOpts.backdropPadding);
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(tickOpts.font && tickOpts.font.size, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$4368d992c4eafac0.font.size) + padding.height;
    }
    return 0;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$measureLabelSize(ctx, font, label) {
    label = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8b22cf2602fb60ce(label) ? label : [
        label
    ];
    return {
        w: $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$a05254e7c3aeba6e(ctx, font.string, label),
        h: label.length * font.lineHeight
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineLimits(angle, pos, size, min, max) {
    if (angle === min || angle === max) return {
        start: pos - size / 2,
        end: pos + size / 2
    };
    else if (angle < min || angle > max) return {
        start: pos - size,
        end: pos
    };
    return {
        start: pos,
        end: pos + size
    };
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$fitWithPointLabels(scale) {
    const orig = {
        l: scale.left + scale._padding.left,
        r: scale.right - scale._padding.right,
        t: scale.top + scale._padding.top,
        b: scale.bottom - scale._padding.bottom
    };
    const limits = Object.assign({
    }, orig);
    const labelSizes = [];
    const padding = [];
    const valueCount = scale._pointLabels.length;
    const pointLabelOpts = scale.options.pointLabels;
    const additionalAngle = pointLabelOpts.centerPointLabels ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d / valueCount : 0;
    for(let i = 0; i < valueCount; i++){
        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
        padding[i] = opts.padding;
        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
        const plFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(opts.font);
        const textSize = $df29249fe447c065$var$$a43aa20d3eb44e80$var$measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
        labelSizes[i] = textSize;
        const angleRadians = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce(scale.getIndexAngle(i) + additionalAngle);
        const angle = Math.round($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$25ce5a424b770e84(angleRadians));
        const hLimits = $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
        const vLimits = $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$updateLimits(limits, orig, angleRadians, hLimits, vLimits);
    }
    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
    scale._pointLabelItems = $df29249fe447c065$var$$a43aa20d3eb44e80$var$buildPointLabelItems(scale, labelSizes, padding);
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$updateLimits(limits, orig, angle, hLimits, vLimits) {
    const sin = Math.abs(Math.sin(angle));
    const cos = Math.abs(Math.cos(angle));
    let x = 0;
    let y = 0;
    if (hLimits.start < orig.l) {
        x = (orig.l - hLimits.start) / sin;
        limits.l = Math.min(limits.l, orig.l - x);
    } else if (hLimits.end > orig.r) {
        x = (hLimits.end - orig.r) / sin;
        limits.r = Math.max(limits.r, orig.r + x);
    }
    if (vLimits.start < orig.t) {
        y = (orig.t - vLimits.start) / cos;
        limits.t = Math.min(limits.t, orig.t - y);
    } else if (vLimits.end > orig.b) {
        y = (vLimits.end - orig.b) / cos;
        limits.b = Math.max(limits.b, orig.b + y);
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$buildPointLabelItems(scale, labelSizes, padding) {
    const items = [];
    const valueCount = scale._pointLabels.length;
    const opts = scale.options;
    const extra = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTickBackdropHeight(opts) / 2;
    const outerDistance = scale.drawingArea;
    const additionalAngle = opts.pointLabels.centerPointLabels ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$56c0d5a1e737357d / valueCount : 0;
    for(let i = 0; i < valueCount; i++){
        const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);
        const angle = Math.round($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$25ce5a424b770e84($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce(pointLabelPosition.angle + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd)));
        const size = labelSizes[i];
        const y = $df29249fe447c065$var$$a43aa20d3eb44e80$var$yForAngle(pointLabelPosition.y, size.h, angle);
        const textAlign = $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTextAlignForAngle(angle);
        const left = $df29249fe447c065$var$$a43aa20d3eb44e80$var$leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
        items.push({
            x: pointLabelPosition.x,
            y: y,
            textAlign: textAlign,
            left: left,
            top: y,
            right: left + size.w,
            bottom: y + size.h
        });
    }
    return items;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTextAlignForAngle(angle) {
    if (angle === 0 || angle === 180) return "center";
    else if (angle < 180) return "left";
    return "right";
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$leftForTextAlign(x, w, align) {
    if (align === "right") x -= w;
    else if (align === "center") x -= w / 2;
    return x;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$yForAngle(y, h, angle) {
    if (angle === 90 || angle === 270) y -= h / 2;
    else if (angle > 270 || angle < 90) y -= h;
    return y;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$drawPointLabels(scale, labelCount) {
    const { ctx: ctx , options: { pointLabels: pointLabels  }  } = scale;
    for(let i = labelCount - 1; i >= 0; i--){
        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
        const plFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(optsAtIndex.font);
        const { x: x , y: y , textAlign: textAlign , left: left , top: top , right: right , bottom: bottom  } = scale._pointLabelItems[i];
        const { backdropColor: backdropColor  } = optsAtIndex;
        if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(backdropColor)) {
            const borderRadius = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d66dc83d8cfc8dd(optsAtIndex.borderRadius);
            const padding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(optsAtIndex.backdropPadding);
            ctx.fillStyle = backdropColor;
            const backdropLeft = left - padding.left;
            const backdropTop = top - padding.top;
            const backdropWidth = right - left + padding.width;
            const backdropHeight = bottom - top + padding.height;
            if (Object.values(borderRadius).some((v)=>v !== 0
            )) {
                ctx.beginPath();
                $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$493d36ec626b6698(ctx, {
                    x: backdropLeft,
                    y: backdropTop,
                    w: backdropWidth,
                    h: backdropHeight,
                    radius: borderRadius
                });
                ctx.fill();
            } else ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
        }
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8743009a87fcb00f(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {
            color: optsAtIndex.color,
            textAlign: textAlign,
            textBaseline: "middle"
        });
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$pathRadiusLine(scale, radius, circular, labelCount) {
    const { ctx: ctx  } = scale;
    if (circular) ctx.arc(scale.xCenter, scale.yCenter, radius, 0, $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7);
    else {
        let pointPosition = scale.getPointPosition(0, radius);
        ctx.moveTo(pointPosition.x, pointPosition.y);
        for(let i = 1; i < labelCount; i++){
            pointPosition = scale.getPointPosition(i, radius);
            ctx.lineTo(pointPosition.x, pointPosition.y);
        }
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$drawRadiusLine(scale, gridLineOpts, radius, labelCount) {
    const ctx = scale.ctx;
    const circular = gridLineOpts.circular;
    const { color: color5 , lineWidth: lineWidth  } = gridLineOpts;
    if (!circular && !labelCount || !color5 || !lineWidth || radius < 0) return;
    ctx.save();
    ctx.strokeStyle = color5;
    ctx.lineWidth = lineWidth;
    ctx.setLineDash(gridLineOpts.borderDash);
    ctx.lineDashOffset = gridLineOpts.borderDashOffset;
    ctx.beginPath();
    $df29249fe447c065$var$$a43aa20d3eb44e80$var$pathRadiusLine(scale, radius, circular, labelCount);
    ctx.closePath();
    ctx.stroke();
    ctx.restore();
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$createPointLabelContext(parent, index74, label) {
    return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$dda1d9f60106f0e9(parent, {
        label: label,
        index: index74,
        type: "pointLabel"
    });
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$cfafc36d95386d38 extends $df29249fe447c065$var$$a43aa20d3eb44e80$var$LinearScaleBase {
    setDimensions() {
        const padding = this._padding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4($df29249fe447c065$var$$a43aa20d3eb44e80$var$getTickBackdropHeight(this.options) / 2);
        const w = this.width = this.maxWidth - padding.width;
        const h = this.height = this.maxHeight - padding.height;
        this.xCenter = Math.floor(this.left + w / 2 + padding.left);
        this.yCenter = Math.floor(this.top + h / 2 + padding.top);
        this.drawingArea = Math.floor(Math.min(w, h) / 2);
    }
    determineDataLimits() {
        const { min: min , max: max  } = this.getMinMax(false);
        this.min = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(min) && !isNaN(min) ? min : 0;
        this.max = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(max) && !isNaN(max) ? max : 0;
        this.handleTickRangeOptions();
    }
    computeTickLimit() {
        return Math.ceil(this.drawingArea / $df29249fe447c065$var$$a43aa20d3eb44e80$var$getTickBackdropHeight(this.options));
    }
    generateTickLabels(ticks) {
        $df29249fe447c065$var$$a43aa20d3eb44e80$var$LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
        this._pointLabels = this.getLabels().map((value, index75)=>{
            const label = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(this.options.pointLabels.callback, [
                value,
                index75
            ], this);
            return label || label === 0 ? label : "";
        }).filter((v, i)=>this.chart.getDataVisibility(i)
        );
    }
    fit() {
        const opts = this.options;
        if (opts.display && opts.pointLabels.display) $df29249fe447c065$var$$a43aa20d3eb44e80$var$fitWithPointLabels(this);
        else this.setCenterPoint(0, 0, 0, 0);
    }
    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
    }
    getIndexAngle(index76) {
        const angleMultiplier = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$971d5caa766a69d7 / (this._pointLabels.length || 1);
        const startAngle = this.options.startAngle || 0;
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9fa96a7d116ea3ce(index76 * angleMultiplier + $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$625550452a3fa3ec(startAngle));
    }
    getDistanceFromCenterForValue(value) {
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(value)) return NaN;
        const scalingFactor = this.drawingArea / (this.max - this.min);
        if (this.options.reverse) return (this.max - value) * scalingFactor;
        return (value - this.min) * scalingFactor;
    }
    getValueForDistanceFromCenter(distance) {
        if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(distance)) return NaN;
        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
    }
    getPointLabelContext(index77) {
        const pointLabels = this._pointLabels || [];
        if (index77 >= 0 && index77 < pointLabels.length) {
            const pointLabel = pointLabels[index77];
            return $df29249fe447c065$var$$a43aa20d3eb44e80$var$createPointLabelContext(this.getContext(), index77, pointLabel);
        }
    }
    getPointPosition(index78, distanceFromCenter, additionalAngle = 0) {
        const angle = this.getIndexAngle(index78) - $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7f8ddf7c7c20b3cd + additionalAngle;
        return {
            x: Math.cos(angle) * distanceFromCenter + this.xCenter,
            y: Math.sin(angle) * distanceFromCenter + this.yCenter,
            angle: angle
        };
    }
    getPointPositionForValue(index79, value) {
        return this.getPointPosition(index79, this.getDistanceFromCenterForValue(value));
    }
    getBasePosition(index80) {
        return this.getPointPositionForValue(index80 || 0, this.getBaseValue());
    }
    getPointLabelPosition(index81) {
        const { left: left , top: top , right: right , bottom: bottom  } = this._pointLabelItems[index81];
        return {
            left: left,
            top: top,
            right: right,
            bottom: bottom
        };
    }
    drawBackground() {
        const { backgroundColor: backgroundColor , grid: { circular: circular  }  } = this.options;
        if (backgroundColor) {
            const ctx = this.ctx;
            ctx.save();
            ctx.beginPath();
            $df29249fe447c065$var$$a43aa20d3eb44e80$var$pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
            ctx.closePath();
            ctx.fillStyle = backgroundColor;
            ctx.fill();
            ctx.restore();
        }
    }
    drawGrid() {
        const ctx = this.ctx;
        const opts = this.options;
        const { angleLines: angleLines , grid: grid  } = opts;
        const labelCount = this._pointLabels.length;
        let i, offset, position;
        if (opts.pointLabels.display) $df29249fe447c065$var$$a43aa20d3eb44e80$var$drawPointLabels(this, labelCount);
        if (grid.display) this.ticks.forEach((tick, index82)=>{
            if (index82 !== 0) {
                offset = this.getDistanceFromCenterForValue(tick.value);
                const optsAtIndex = grid.setContext(this.getContext(index82 - 1));
                $df29249fe447c065$var$$a43aa20d3eb44e80$var$drawRadiusLine(this, optsAtIndex, offset, labelCount);
            }
        });
        if (angleLines.display) {
            ctx.save();
            for(i = labelCount - 1; i >= 0; i--){
                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
                const { color: color6 , lineWidth: lineWidth  } = optsAtIndex;
                if (!lineWidth || !color6) continue;
                ctx.lineWidth = lineWidth;
                ctx.strokeStyle = color6;
                ctx.setLineDash(optsAtIndex.borderDash);
                ctx.lineDashOffset = optsAtIndex.borderDashOffset;
                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
                position = this.getPointPosition(i, offset);
                ctx.beginPath();
                ctx.moveTo(this.xCenter, this.yCenter);
                ctx.lineTo(position.x, position.y);
                ctx.stroke();
            }
            ctx.restore();
        }
    }
    drawBorder() {
    }
    drawLabels() {
        const ctx = this.ctx;
        const opts = this.options;
        const tickOpts = opts.ticks;
        if (!tickOpts.display) return;
        const startAngle = this.getIndexAngle(0);
        let offset, width;
        ctx.save();
        ctx.translate(this.xCenter, this.yCenter);
        ctx.rotate(startAngle);
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        this.ticks.forEach((tick, index83)=>{
            if (index83 === 0 && !opts.reverse) return;
            const optsAtIndex = tickOpts.setContext(this.getContext(index83));
            const tickFont = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3d8c2f653ac9d0b9(optsAtIndex.font);
            offset = this.getDistanceFromCenterForValue(this.ticks[index83].value);
            if (optsAtIndex.showLabelBackdrop) {
                ctx.font = tickFont.string;
                width = ctx.measureText(tick.label).width;
                ctx.fillStyle = optsAtIndex.backdropColor;
                const padding = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$96f57966bedc81b4(optsAtIndex.backdropPadding);
                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
            }
            $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$8743009a87fcb00f(ctx, tick.label, 0, -offset, tickFont, {
                color: optsAtIndex.color
            });
        });
        ctx.restore();
    }
    drawTitle() {
    }
    constructor(cfg){
        super(cfg);
        this.xCenter = undefined;
        this.yCenter = undefined;
        this.drawingArea = undefined;
        this._pointLabels = [];
        this._pointLabelItems = [];
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$cfafc36d95386d38.id = "radialLinear";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$cfafc36d95386d38.defaults = {
    display: true,
    animate: true,
    position: "chartArea",
    angleLines: {
        display: true,
        lineWidth: 1,
        borderDash: [],
        borderDashOffset: 0
    },
    grid: {
        circular: false
    },
    startAngle: 0,
    ticks: {
        showLabelBackdrop: true,
        callback: $df29249fe447c065$var$$a43aa20d3eb44e80$export$27c7467594ef87bd.formatters.numeric
    },
    pointLabels: {
        backdropColor: undefined,
        backdropPadding: 2,
        display: true,
        font: {
            size: 10
        },
        callback (label) {
            return label;
        },
        padding: 5,
        centerPointLabels: false
    }
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$cfafc36d95386d38.defaultRoutes = {
    "angleLines.color": "borderColor",
    "pointLabels.color": "color",
    "ticks.color": "color"
};
$df29249fe447c065$var$$a43aa20d3eb44e80$export$cfafc36d95386d38.descriptors = {
    angleLines: {
        _fallback: "grid"
    }
};
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$INTERVALS = {
    millisecond: {
        common: true,
        size: 1,
        steps: 1000
    },
    second: {
        common: true,
        size: 1000,
        steps: 60
    },
    minute: {
        common: true,
        size: 60000,
        steps: 60
    },
    hour: {
        common: true,
        size: 3600000,
        steps: 24
    },
    day: {
        common: true,
        size: 86400000,
        steps: 30
    },
    week: {
        common: false,
        size: 604800000,
        steps: 4
    },
    month: {
        common: true,
        size: 2628000000,
        steps: 12
    },
    quarter: {
        common: false,
        size: 7884000000,
        steps: 4
    },
    year: {
        common: true,
        size: 31540000000
    }
};
const $df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS = Object.keys($df29249fe447c065$var$$a43aa20d3eb44e80$var$INTERVALS);
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$sorter(a, b) {
    return a - b;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$parse(scale, input) {
    if ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$342063e11d6c3cad(input)) return null;
    const adapter = scale._adapter;
    const { parser: parser , round: round , isoWeekday: isoWeekday  } = scale._parseOpts;
    let value = input;
    if (typeof parser === "function") value = parser(value);
    if (!$df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(value)) value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
    if (value === null) return null;
    if (round) value = round === "week" && ($df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9e5f44173e64f162(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round);
    return +value;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineUnitForAutoTicks(minUnit, min, max, capacity) {
    const ilen = $df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS.length;
    for(let i = $df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS.indexOf(minUnit); i < ilen - 1; ++i){
        const interval = $df29249fe447c065$var$$a43aa20d3eb44e80$var$INTERVALS[$df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS[i]];
        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) return $df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS[i];
    }
    return $df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS[ilen - 1];
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
    for(let i = $df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS.length - 1; i >= $df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS.indexOf(minUnit); i--){
        const unit = $df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS[i];
        if ($df29249fe447c065$var$$a43aa20d3eb44e80$var$INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) return unit;
    }
    return $df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS[minUnit ? $df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS.indexOf(minUnit) : 0];
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineMajorUnit(unit) {
    for(let i = $df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS.indexOf(unit) + 1, ilen = $df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS.length; i < ilen; ++i){
        if ($df29249fe447c065$var$$a43aa20d3eb44e80$var$INTERVALS[$df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS[i]].common) return $df29249fe447c065$var$$a43aa20d3eb44e80$var$UNITS[i];
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$addTick(ticks, time, timestamps) {
    if (!timestamps) ticks[time] = true;
    else if (timestamps.length) {
        const { lo: lo , hi: hi  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$91477dc880baac21(timestamps, time);
        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
        ticks[timestamp] = true;
    }
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$setMajorTicks(scale, ticks, map1, majorUnit) {
    const adapter = scale._adapter;
    const first = +adapter.startOf(ticks[0].value, majorUnit);
    const last = ticks[ticks.length - 1].value;
    let major, index84;
    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){
        index84 = map1[major];
        if (index84 >= 0) ticks[index84].major = true;
    }
    return ticks;
}
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$ticksFromTimestamps(scale, values, majorUnit) {
    const ticks = [];
    const map2 = {
    };
    const ilen = values.length;
    let i, value;
    for(i = 0; i < ilen; ++i){
        value = values[i];
        map2[value] = i;
        ticks.push({
            value: value,
            major: false
        });
    }
    return ilen === 0 || !majorUnit ? ticks : $df29249fe447c065$var$$a43aa20d3eb44e80$var$setMajorTicks(scale, ticks, map2, majorUnit);
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$a894c72689ff3ec extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$d60cfc58d3c358b6 {
    init(scaleOpts, opts) {
        const time = scaleOpts.time || (scaleOpts.time = {
        });
        const adapter = this._adapter = new $df29249fe447c065$var$$a43aa20d3eb44e80$export$f32766ea09ec8bc4._date(scaleOpts.adapters.date);
        $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$7910e0436ed8d1de(time.displayFormats, adapter.formats());
        this._parseOpts = {
            parser: time.parser,
            round: time.round,
            isoWeekday: time.isoWeekday
        };
        super.init(scaleOpts);
        this._normalized = opts.normalized;
    }
    parse(raw, index) {
        if (raw === undefined) return null;
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$parse(this, raw);
    }
    beforeLayout() {
        super.beforeLayout();
        this._cache = {
            data: [],
            labels: [],
            all: []
        };
    }
    determineDataLimits() {
        const options = this.options;
        const adapter = this._adapter;
        const unit = options.time.unit || "day";
        let { min: min , max: max , minDefined: minDefined , maxDefined: maxDefined  } = this.getUserBounds();
        function _applyBounds(bounds) {
            if (!minDefined && !isNaN(bounds.min)) min = Math.min(min, bounds.min);
            if (!maxDefined && !isNaN(bounds.max)) max = Math.max(max, bounds.max);
        }
        if (!minDefined || !maxDefined) {
            _applyBounds(this._getLabelBounds());
            if (options.bounds !== "ticks" || options.ticks.source !== "labels") _applyBounds(this.getMinMax(false));
        }
        min = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
        max = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$39b482c5e57630a8(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
        this.min = Math.min(min, max - 1);
        this.max = Math.max(min + 1, max);
    }
    _getLabelBounds() {
        const arr = this.getLabelTimestamps();
        let min = Number.POSITIVE_INFINITY;
        let max = Number.NEGATIVE_INFINITY;
        if (arr.length) {
            min = arr[0];
            max = arr[arr.length - 1];
        }
        return {
            min: min,
            max: max
        };
    }
    buildTicks() {
        const options = this.options;
        const timeOpts = options.time;
        const tickOpts = options.ticks;
        const timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
        if (options.bounds === "ticks" && timestamps.length) {
            this.min = this._userMin || timestamps[0];
            this.max = this._userMax || timestamps[timestamps.length - 1];
        }
        const min = this.min;
        const max = this.max;
        const ticks = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$23ebac1979863676(timestamps, min, max);
        this._unit = timeOpts.unit || (tickOpts.autoSkip ? $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
        this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? undefined : $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineMajorUnit(this._unit);
        this.initOffsets(timestamps);
        if (options.reverse) ticks.reverse();
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$ticksFromTimestamps(this, ticks, this._majorUnit);
    }
    afterAutoSkip() {
        if (this.options.offsetAfterAutoskip) this.initOffsets(this.ticks.map((tick)=>+tick.value
        ));
    }
    initOffsets(timestamps) {
        let start = 0;
        let end = 0;
        let first, last;
        if (this.options.offset && timestamps.length) {
            first = this.getDecimalForValue(timestamps[0]);
            if (timestamps.length === 1) start = 1 - first;
            else start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
            if (timestamps.length === 1) end = last;
            else end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
        }
        const limit = timestamps.length < 3 ? 0.5 : 0.25;
        start = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(start, 0, limit);
        end = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$efccba1c4a2ef57b(end, 0, limit);
        this._offsets = {
            start: start,
            end: end,
            factor: 1 / (start + 1 + end)
        };
    }
    _generate() {
        const adapter = this._adapter;
        const min = this.min;
        const max = this.max;
        const options = this.options;
        const timeOpts = options.time;
        const minor = timeOpts.unit || $df29249fe447c065$var$$a43aa20d3eb44e80$var$determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
        const stepSize = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$90a7f3efeed30595(timeOpts.stepSize, 1);
        const weekday = minor === "week" ? timeOpts.isoWeekday : false;
        const hasWeekday = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$9e5f44173e64f162(weekday) || weekday === true;
        const ticks = {
        };
        let first = min;
        let time, count;
        if (hasWeekday) first = +adapter.startOf(first, "isoWeek", weekday);
        first = +adapter.startOf(first, hasWeekday ? "day" : minor);
        if (adapter.diff(max, min, minor) > 100000 * stepSize) throw new Error(min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor);
        const timestamps = options.ticks.source === "data" && this.getDataTimestamps();
        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++)$df29249fe447c065$var$$a43aa20d3eb44e80$var$addTick(ticks, time, timestamps);
        if (time === max || options.bounds === "ticks" || count === 1) $df29249fe447c065$var$$a43aa20d3eb44e80$var$addTick(ticks, time, timestamps);
        return Object.keys(ticks).sort((a, b)=>a - b
        ).map((x)=>+x
        );
    }
    getLabelForValue(value) {
        const adapter = this._adapter;
        const timeOpts = this.options.time;
        if (timeOpts.tooltipFormat) return adapter.format(value, timeOpts.tooltipFormat);
        return adapter.format(value, timeOpts.displayFormats.datetime);
    }
    _tickFormatFunction(time, index85, ticks, format) {
        const options = this.options;
        const formats = options.time.displayFormats;
        const unit = this._unit;
        const majorUnit = this._majorUnit;
        const minorFormat = unit && formats[unit];
        const majorFormat = majorUnit && formats[majorUnit];
        const tick = ticks[index85];
        const major = majorUnit && majorFormat && tick && tick.major;
        const label = this._adapter.format(time, format || (major ? majorFormat : minorFormat));
        const formatter = options.ticks.callback;
        return formatter ? $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$3722cfe417b6ed86(formatter, [
            label,
            index85,
            ticks
        ], this) : label;
    }
    generateTickLabels(ticks) {
        let i, ilen, tick;
        for(i = 0, ilen = ticks.length; i < ilen; ++i){
            tick = ticks[i];
            tick.label = this._tickFormatFunction(tick.value, i, ticks);
        }
    }
    getDecimalForValue(value) {
        return value === null ? NaN : (value - this.min) / (this.max - this.min);
    }
    getPixelForValue(value) {
        const offsets = this._offsets;
        const pos = this.getDecimalForValue(value);
        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
    }
    getValueForPixel(pixel) {
        const offsets = this._offsets;
        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return this.min + pos * (this.max - this.min);
    }
    _getLabelSize(label) {
        const ticksOpts = this.options.ticks;
        const tickLabelWidth = this.ctx.measureText(label).width;
        const angle = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$625550452a3fa3ec(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
        const cosRotation = Math.cos(angle);
        const sinRotation = Math.sin(angle);
        const tickFontSize = this._resolveTickFontOptions(0).size;
        return {
            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
        };
    }
    _getLabelCapacity(exampleTime) {
        const timeOpts = this.options.time;
        const displayFormats = timeOpts.displayFormats;
        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
        const exampleLabel = this._tickFormatFunction(exampleTime, 0, $df29249fe447c065$var$$a43aa20d3eb44e80$var$ticksFromTimestamps(this, [
            exampleTime
        ], this._majorUnit), format);
        const size = this._getLabelSize(exampleLabel);
        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
        return capacity > 0 ? capacity : 1;
    }
    getDataTimestamps() {
        let timestamps = this._cache.data || [];
        let i, ilen;
        if (timestamps.length) return timestamps;
        const metas = this.getMatchingVisibleMetas();
        if (this._normalized && metas.length) return this._cache.data = metas[0].controller.getAllParsedValues(this);
        for(i = 0, ilen = metas.length; i < ilen; ++i)timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
        return this._cache.data = this.normalize(timestamps);
    }
    getLabelTimestamps() {
        const timestamps = this._cache.labels || [];
        let i, ilen;
        if (timestamps.length) return timestamps;
        const labels = this.getLabels();
        for(i = 0, ilen = labels.length; i < ilen; ++i)timestamps.push($df29249fe447c065$var$$a43aa20d3eb44e80$var$parse(this, labels[i]));
        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
    }
    normalize(values) {
        return $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$71511d61b312f219(values.sort($df29249fe447c065$var$$a43aa20d3eb44e80$var$sorter));
    }
    constructor(props){
        super(props);
        this._cache = {
            data: [],
            labels: [],
            all: []
        };
        this._unit = "day";
        this._majorUnit = undefined;
        this._offsets = {
        };
        this._normalized = false;
        this._parseOpts = undefined;
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$a894c72689ff3ec.id = "time";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$a894c72689ff3ec.defaults = {
    bounds: "data",
    adapters: {
    },
    time: {
        parser: false,
        unit: false,
        round: false,
        isoWeekday: false,
        minUnit: "millisecond",
        displayFormats: {
        }
    },
    ticks: {
        source: "auto",
        major: {
            enabled: false
        }
    }
};
function $df29249fe447c065$var$$a43aa20d3eb44e80$var$interpolate(table, val, reverse) {
    let lo = 0;
    let hi = table.length - 1;
    let prevSource, nextSource, prevTarget, nextTarget;
    if (reverse) {
        if (val >= table[lo].pos && val <= table[hi].pos) ({ lo: lo , hi: hi  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d141bba7fdc215a3(table, "pos", val));
        ({ pos: prevSource , time: prevTarget  } = table[lo]);
        ({ pos: nextSource , time: nextTarget  } = table[hi]);
    } else {
        if (val >= table[lo].time && val <= table[hi].time) ({ lo: lo , hi: hi  } = $df29249fe447c065$var$$f0bf98aa79b5dc9b$export$d141bba7fdc215a3(table, "time", val));
        ({ time: prevSource , pos: prevTarget  } = table[lo]);
        ({ time: nextSource , pos: nextTarget  } = table[hi]);
    }
    const span = nextSource - prevSource;
    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class $df29249fe447c065$var$$a43aa20d3eb44e80$export$85df64a8eb6dc986 extends $df29249fe447c065$var$$a43aa20d3eb44e80$export$a894c72689ff3ec {
    initOffsets() {
        const timestamps = this._getTimestampsForTable();
        const table = this._table = this.buildLookupTable(timestamps);
        this._minPos = $df29249fe447c065$var$$a43aa20d3eb44e80$var$interpolate(table, this.min);
        this._tableRange = $df29249fe447c065$var$$a43aa20d3eb44e80$var$interpolate(table, this.max) - this._minPos;
        super.initOffsets(timestamps);
    }
    buildLookupTable(timestamps) {
        const { min: min , max: max  } = this;
        const items = [];
        const table = [];
        let i, ilen, prev, curr, next;
        for(i = 0, ilen = timestamps.length; i < ilen; ++i){
            curr = timestamps[i];
            if (curr >= min && curr <= max) items.push(curr);
        }
        if (items.length < 2) return [
            {
                time: min,
                pos: 0
            },
            {
                time: max,
                pos: 1
            }
        ];
        for(i = 0, ilen = items.length; i < ilen; ++i){
            next = items[i + 1];
            prev = items[i - 1];
            curr = items[i];
            if (Math.round((next + prev) / 2) !== curr) table.push({
                time: curr,
                pos: i / (ilen - 1)
            });
        }
        return table;
    }
    _getTimestampsForTable() {
        let timestamps = this._cache.all || [];
        if (timestamps.length) return timestamps;
        const data = this.getDataTimestamps();
        const label = this.getLabelTimestamps();
        if (data.length && label.length) timestamps = this.normalize(data.concat(label));
        else timestamps = data.length ? data : label;
        timestamps = this._cache.all = timestamps;
        return timestamps;
    }
    getDecimalForValue(value) {
        return ($df29249fe447c065$var$$a43aa20d3eb44e80$var$interpolate(this._table, value) - this._minPos) / this._tableRange;
    }
    getValueForPixel(pixel) {
        const offsets = this._offsets;
        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return $df29249fe447c065$var$$a43aa20d3eb44e80$var$interpolate(this._table, decimal * this._tableRange + this._minPos, true);
    }
    constructor(props){
        super(props);
        this._table = [];
        this._minPos = undefined;
        this._tableRange = undefined;
    }
}
$df29249fe447c065$var$$a43aa20d3eb44e80$export$85df64a8eb6dc986.id = "timeseries";
$df29249fe447c065$var$$a43aa20d3eb44e80$export$85df64a8eb6dc986.defaults = $df29249fe447c065$var$$a43aa20d3eb44e80$export$a894c72689ff3ec.defaults;
var $df29249fe447c065$var$$a43aa20d3eb44e80$export$bcac1c16f1530ec2 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    CategoryScale: $df29249fe447c065$var$$a43aa20d3eb44e80$export$29e663ba4d09fe7,
    LinearScale: $df29249fe447c065$var$$a43aa20d3eb44e80$export$e7f4e5e8656f0b93,
    LogarithmicScale: $df29249fe447c065$var$$a43aa20d3eb44e80$export$85295eaf7cb3ac3e,
    RadialLinearScale: $df29249fe447c065$var$$a43aa20d3eb44e80$export$cfafc36d95386d38,
    TimeScale: $df29249fe447c065$var$$a43aa20d3eb44e80$export$a894c72689ff3ec,
    TimeSeriesScale: $df29249fe447c065$var$$a43aa20d3eb44e80$export$85df64a8eb6dc986
});
const $df29249fe447c065$var$$a43aa20d3eb44e80$export$e8959e79e3af550f = [
    $df29249fe447c065$var$$a43aa20d3eb44e80$export$a6506504f799c5d5,
    $df29249fe447c065$var$$a43aa20d3eb44e80$export$7a5d735b2ab6389d,
    $df29249fe447c065$var$$a43aa20d3eb44e80$export$8b3ca321c77fdea6,
    $df29249fe447c065$var$$a43aa20d3eb44e80$export$bcac1c16f1530ec2, 
];
$df29249fe447c065$var$$a43aa20d3eb44e80$export$acaa6426d77a227e.register($df29249fe447c065$var$$a43aa20d3eb44e80$export$d48203c759d6a1fc, $df29249fe447c065$var$$a43aa20d3eb44e80$export$e04603e7d8b77172, $df29249fe447c065$var$$a43aa20d3eb44e80$export$28c660c63b792dea);
// VIEW
// mortgage amount - сумма ипотеки
const $df29249fe447c065$var$$c373a14459b79063$var$renderMortgageAmount = (elements, watchedState)=>{
    const { resultMortgageAmount: resultMortgageAmount  } = elements;
    const { result: result  } = watchedState;
    if (resultMortgageAmount) resultMortgageAmount.innerHTML = result["mortgage-amount"].toLocaleString("en-US", {
        minimumFractionDigits: 2
    });
};
// monthly payment - ежемесячный платеж
const $df29249fe447c065$var$$c373a14459b79063$var$renderMonthlyPayment = (elements, watchedState)=>{
    const { resultMonthlyPayment: resultMonthlyPayment  } = elements;
    const { result: result  } = watchedState;
    if (resultMonthlyPayment) resultMonthlyPayment.innerHTML = result["monthly-payment"].toLocaleString("en-US", {
        minimumFractionDigits: 2
    });
};
// total cost - общая ипотека
const $df29249fe447c065$var$$c373a14459b79063$var$renderTotalCost = (elements, watchedState)=>{
    const { resultTotalCost: resultTotalCost  } = elements;
    const { result: result  } = watchedState;
    if (resultTotalCost) resultTotalCost.innerHTML = result["mortgage-total-cost"].toLocaleString("en-US", {
        minimumFractionDigits: 2
    });
};
// render donut
const $df29249fe447c065$var$$c373a14459b79063$var$renderDonutChart = (elements, watchedState)=>{
    const { donutBox: donutBox  } = elements;
    const { donutData: donutData  } = watchedState;
    const allDataForChart = donutData.filter((item)=>{
        const { data: data  } = item;
        if (data) return item;
        return 0;
    });
    const chartLabels = allDataForChart.map(({ name: name  })=>name
    );
    const chartData = allDataForChart.map(({ data: data  })=>data
    );
    const chartColors = allDataForChart.map(({ color: color  })=>color
    );
    const donutConfigData = {
        labels: chartLabels,
        datasets: [
            {
                data: chartData,
                backgroundColor: chartColors,
                borderRadius: 5,
                spacing: 5,
                hoverOffset: 3
            }
        ]
    };
    const config = {
        type: "doughnut",
        data: donutConfigData,
        options: []
    };
    const chartStatus = $df29249fe447c065$var$$a43aa20d3eb44e80$export$acaa6426d77a227e.getChart(donutBox);
    if (chartStatus !== undefined) chartStatus.destroy();
    new $df29249fe447c065$var$$a43aa20d3eb44e80$export$acaa6426d77a227e(donutBox, config);
};
const $df29249fe447c065$var$$c373a14459b79063$export$b3890eb0ae9dca99 = (elements, watchedState)=>{
    // renderMortgageAmount
    $df29249fe447c065$var$$c373a14459b79063$var$renderMortgageAmount(elements, watchedState);
    // renderTotalCost
    $df29249fe447c065$var$$c373a14459b79063$var$renderTotalCost(elements, watchedState);
    // renderMonthlyPayment
    $df29249fe447c065$var$$c373a14459b79063$var$renderMonthlyPayment(elements, watchedState);
    // renderDonutChart
    $df29249fe447c065$var$$c373a14459b79063$var$renderDonutChart(elements, watchedState);
};
const $df29249fe447c065$var$$c373a14459b79063$export$659466fae8e0b94d = (elements, value)=>{
    const { switchPmiBlock: switchPmiBlock  } = elements;
    if (value) switchPmiBlock.forEach((item)=>item.style.display = "none"
    );
    else switchPmiBlock.forEach((item)=>item.style.display = "block"
    );
};
const $df29249fe447c065$var$$c373a14459b79063$export$9c7c917e2ae392f5 = (elements, value)=>{
    const { switchTaxesBlock: switchTaxesBlock  } = elements;
    if (value) switchTaxesBlock.forEach((item)=>{
        const itemResult = item;
        itemResult.style.display = "none";
    });
    else switchTaxesBlock.forEach((item)=>{
        const itemResult = item;
        itemResult.style.display = "block";
    });
};
const $df29249fe447c065$var$$c373a14459b79063$export$2837078cde969e9f = (elements, watchedState)=>{
    const { donutLegendItems: donutLegendItems  } = elements;
    const { donutData: donutData  } = watchedState;
    donutLegendItems.forEach((item)=>{
        donutData.forEach(({ name: name , color: color  }, index)=>{
            if (item.getAttribute("data-calc-legend-name") === donutData[index].name) item.style.backgroundColor = donutData[index].color;
        });
    });
};
// controller
// watch exclude changes
const $df29249fe447c065$var$$81003cf77206408e$var$updateExclude = (form, watchedState)=>{
    const excludesElements = form.querySelectorAll("[data-calc-exclude]");
    const { exclude: exclude  } = watchedState.form;
    [
        ...excludesElements
    ].forEach((excludeItem)=>{
        const { checked: checked  } = excludeItem;
        const { calcExclude: calcExclude  } = excludeItem.dataset;
        const calcExcludeCollection = calcExclude.split(",");
        calcExcludeCollection.forEach((name)=>{
            exclude[name] = !checked;
        });
    });
};
const $df29249fe447c065$var$$81003cf77206408e$var$updateValues = (elements, watchedState)=>{
    const { values: values  } = watchedState.form;
    const { form: form  } = elements;
    const formData = new FormData(form);
    // update values
    [
        ...formData.entries()
    ].forEach(([key, value])=>{
        if (key in values) values[key] = value === "" ? 0 : +value;
    });
    // update exclude list
    $df29249fe447c065$var$$81003cf77206408e$var$updateExclude(form, watchedState);
};
const $df29249fe447c065$var$$81003cf77206408e$var$init = ()=>{
    // MODEL
    const elements = {
        form: document.forms.calc,
        resultMortgageAmount: document.querySelector('[data-calc-result="amount"]'),
        resultTotalCost: document.querySelector('[data-calc-result="total"]'),
        resultMonthlyPayment: document.querySelector('[data-calc-result="monthly"]'),
        switchPmiBlock: document.querySelectorAll("[data-pmi-rate]"),
        switchTaxesBlock: document.querySelectorAll("[data-property-tax]"),
        // for donut
        donutBox: document.querySelector('[data-calc="donut"]'),
        donutLegendItems: document.querySelectorAll("[data-calc-legend-name]")
    };
    // MODEL
    const state = {
        form: {
            values: {
                "home-price": null,
                "down-payment": null,
                "interest-rate": null,
                "home-insurance": null,
                "property-tax": null,
                "pmi-rate": null,
                "hoa-dues": null,
                term: null
            },
            exclude: {
                "home-insurance": null,
                "pmi-rate": null,
                "property-tax": null
            }
        },
        result: {
            "mortgage-amount": null,
            "monthly-payment": null,
            "mortgage-insurance": null,
            "mortgage-total-cost": null
        },
        donutData: [
            {
                key: "pi",
                name: "P&I",
                color: "#0D93FF",
                data: null
            },
            {
                key: "insurance",
                name: "Insurance",
                color: "#07BECB",
                data: null
            },
            {
                key: "taxes",
                name: "Taxes",
                color: "#333333",
                data: null
            },
            {
                key: "pmi",
                name: "PMI",
                color: "#D3E2EE",
                data: null
            },
            {
                key: "hoa",
                name: "HOA",
                color: "#F2F2F2",
                data: null
            }, 
        ]
    };
    // MODEL
    const watchedState = $df29249fe447c065$var$$69e9f2982bc0ecad$export$2e2bcd8739ae039(state, (path, value)=>{
        switch(path){
            case "form.exclude.pmi-rate":
                $df29249fe447c065$var$$c373a14459b79063$export$659466fae8e0b94d(elements, value);
                break;
            case "form.exclude.property-tax":
                $df29249fe447c065$var$$c373a14459b79063$export$9c7c917e2ae392f5(elements, value);
                break;
            default:
                break;
        }
        $df29249fe447c065$var$$d51973068a97db52$export$2e2bcd8739ae039(elements, watchedState);
    });
    // CONTROLLER
    const { form: form  } = elements;
    form.addEventListener("submit", (e)=>{
        e.preventDefault();
        $df29249fe447c065$var$$c373a14459b79063$export$b3890eb0ae9dca99(elements, watchedState);
    });
    form.addEventListener("change", ()=>{
        $df29249fe447c065$var$$81003cf77206408e$var$updateValues(elements, watchedState);
        $df29249fe447c065$var$$c373a14459b79063$export$b3890eb0ae9dca99(elements, watchedState);
    });
    // FIRST START
    $df29249fe447c065$var$$81003cf77206408e$var$updateValues(elements, watchedState);
    $df29249fe447c065$var$$c373a14459b79063$export$b3890eb0ae9dca99(elements, watchedState);
    $df29249fe447c065$var$$c373a14459b79063$export$2837078cde969e9f(elements, watchedState);
};
$df29249fe447c065$var$$81003cf77206408e$var$init();


class $ac5a3fca71b6cc65$export$2e2bcd8739ae039 {
    constructor({ selector: selector , fullColor: fullColor = 'black' , emptyColor: emptyColor = 'white' ,  }){
        this.selector = selector;
        this.fullColor = fullColor;
        this.emptyColor = emptyColor;
    }
    init = ()=>{
        const stars = Array.from(document.querySelectorAll(this.selector));
        stars.forEach((item)=>{
            const value = +item.getAttribute('value');
            if (value) {
                const percent = value * 20;
                item.style.background = 'linear-gradient(90deg, ' + `${this.fullColor} 0%, ` + `${this.fullColor} ${percent}%, ` + `${this.emptyColor} ${percent}%, ` + `${this.emptyColor} 100%)`;
            }
        });
    };
}


const $baaf592c221bea62$var$experienceStars = new $ac5a3fca71b6cc65$export$2e2bcd8739ae039({
    selector: '.experience__stars-icon',
    fullColor: '#FFB800',
    emptyColor: 'rgba(255, 255, 255, 0.2)'
});
$baaf592c221bea62$var$experienceStars.init();


class $9c99f8c6ce04a1b5$var$Dropdowns {
    constructor({ dropdownSelector: // groupSelector,
    dropdownSelector , toggleSelector: toggleSelector , contentSelector: contentSelector , activeClass: activeClass = 'js--active' , eventType: eventType = 'click' , initialDropdowns: initialDropdowns = [] , isMultiple: isMultiple = false , toggleTexts: toggleTexts ,  }){
        // this.group = document.querySelectorAll(groupSelector);
        this.dropdowns = [];
        this.dropdownsElements = document.querySelectorAll(dropdownSelector);
        this.toggleSelector = toggleSelector;
        this.contentSelector = contentSelector;
        this.activeClass = activeClass;
        this.eventType = eventType;
        this.openedDropdowns = new Set(initialDropdowns);
        this.isMultiple = isMultiple;
        this.toggleTexts = toggleTexts;
        // this.closeOnFocusOut = closeOnFocusOut;
        this.timeoutsToResetHeights = new Map([]);
    }
    init() {
        for(let i = 0; i < this.dropdownsElements.length; i += 1){
            const dropdown = this.dropdownsElements[i];
            const toggle = dropdown.querySelector(this.toggleSelector) ?? dropdown;
            const content = dropdown.querySelector(this.contentSelector);
            if (!content) {
                if (toggle !== dropdown) toggle.remove();
            } else {
                this.dropdowns.push({
                    index: i,
                    dropdownElement: dropdown,
                    toggleElement: toggle,
                    contentElement: content,
                    contentInnerElement: content.firstElementChild
                });
                toggle.addEventListener(this.eventType, ()=>{
                    this.toggle(i);
                });
            }
        }
        this.closeMultiple(this.dropdowns.map((d)=>d.index
        ).filter((d)=>!this.openedDropdowns.has(d)
        ));
        // setTimeout(() => {
        // });
        this.openMultiple(this.openedDropdowns);
    }
    toggle(i) {
        if (this.openedDropdowns.has(i)) return this.close(i);
        return this.open(i);
    }
    open(i) {
        const dropdown = this.dropdowns[i];
        const { dropdownElement: dropdownElement , contentElement: contentElement , contentInnerElement: contentInnerElement , toggleElement: toggleElement ,  } = dropdown;
        const heightToSet = contentInnerElement.clientHeight;
        const duration = parseFloat(getComputedStyle(contentElement).transitionDuration) * 1000;
        if (!this.isMultiple) this.openedDropdowns.forEach((dropdownIndex)=>{
            if (i !== dropdownIndex) this.close(dropdownIndex);
        });
        if (this.toggleTexts) toggleElement.textContent = this.toggleTexts.open;
        const timeoutId = setTimeout(()=>{
            contentElement.style.height = 'auto';
            this.deleteTimeout(i);
        }, duration);
        this.timeoutsToResetHeights.set(i, timeoutId);
        contentElement.style.height = `${heightToSet}px`;
        dropdownElement.classList.add(this.activeClass);
        this.openedDropdowns.add(i);
        return dropdown;
    }
    close(i) {
        const dropdown = this.dropdowns[i];
        const { dropdownElement: dropdownElement , contentElement: contentElement , contentInnerElement: contentInnerElement , toggleElement: toggleElement ,  } = dropdown;
        const heightToStartWith = contentInnerElement.clientHeight;
        this.deleteTimeout(i);
        if (this.toggleTexts) toggleElement.textContent = this.toggleTexts.close;
        contentElement.style.height = `${heightToStartWith}px`;
        setTimeout(()=>{
            contentElement.style.height = '0px';
        }, 0);
        dropdownElement.classList.remove(this.activeClass);
        this.openedDropdowns.delete(i);
        return dropdown;
    }
    openMultiple(indexes) {
        indexes.forEach((index)=>{
            this.open(index);
        });
    }
    closeMultiple(indexes) {
        indexes.forEach((index)=>{
            this.close(index);
        });
    }
    deleteTimeout(i) {
        const timeoutId = Number(this.timeoutsToResetHeights.get(i));
        if (timeoutId) {
            clearTimeout(timeoutId);
            this.timeoutsToResetHeights.delete(i);
        }
    }
}
var $9c99f8c6ce04a1b5$export$2e2bcd8739ae039 = $9c99f8c6ce04a1b5$var$Dropdowns;


const $0cbe7923eac5c316$var$faqMainPageDropdowns = new $9c99f8c6ce04a1b5$export$2e2bcd8739ae039({
    dropdownSelector: '.faq__item',
    contentSelector: '.faq__content'
});
$0cbe7923eac5c316$var$faqMainPageDropdowns.init();



var $hMMjP = parcelRequire("hMMjP");

var $9b0vI = parcelRequire("9b0vI");

const $b7b3d547308a60ef$var$tabs = new $hMMjP.default({
    tabSelector: '.tab',
    btnSelector: '.tabs__nav-btn'
});
$b7b3d547308a60ef$var$tabs.init();
const $b7b3d547308a60ef$var$foodStars = new $ac5a3fca71b6cc65$export$2e2bcd8739ae039({
    selector: '.tab-card__stars',
    fullColor: 'hsl(6, 100%, 62%, 1)',
    emptyColor: 'hsl(6, 100%, 62%, 0.5)'
});
$b7b3d547308a60ef$var$foodStars.init();
const $b7b3d547308a60ef$var$tabsSwiper = new $9b0vI.default('.tabs__nav', {
    slideClass: 'tabs__nav-btn',
    slidesPerView: 'auto',
    setWrapperSize: true,
    freeMode: {
        enabled: true,
        sticky: false
    }
});



var $9b0vI = parcelRequire("9b0vI");

const { sm: $022cdb5e1695fd6f$var$sm  } = {
    ...$5eae2ad5104e347c$export$d07517a676ce386f
}; // lg, md, sm, xs
$9b0vI.default.use([
    $9b0vI.Navigation,
    $9b0vI.Pagination
]);
const $022cdb5e1695fd6f$var$articlesSlider = new $9b0vI.default('.articles-slider', {
    slideClass: 'articles-slide',
    slidesPerView: 1,
    spaceBetween: 20,
    navigation: {
        nextEl: '.articles-slider__nav-next',
        prevEl: '.articles-slider__nav-prev'
    },
    breakpoints: {
        [$022cdb5e1695fd6f$var$sm]: {
            slidesPerView: 'auto'
        }
    },
    pagination: {
        el: '.articles-slider__pagination',
        clickable: true
    }
});



var $9b0vI = parcelRequire("9b0vI");


const { md: $e926bbf749c0d875$var$md  } = {
    ...$5eae2ad5104e347c$export$d07517a676ce386f
}; // lg, md, sm, xs
$9b0vI.default.use([
    $9b0vI.Navigation,
    $9b0vI.Pagination
]);
const $e926bbf749c0d875$var$reviewsSlider = new $9b0vI.default('.reviews-slider__wrapper', {
    spaceBetween: 20,
    slideClass: 'reviews-slide',
    navigation: {
        nextEl: '.reviews-slider__button-next',
        prevEl: '.reviews-slider__button-prev'
    },
    pagination: {
        el: '.reviews-slider__pagination',
        clickable: true
    },
    breakpoints: {
        0: {
            slidesPerView: 'auto'
        },
        [$e926bbf749c0d875$var$md]: {
            slidesPerView: 2
        }
    }
});
const $e926bbf749c0d875$var$reviewStars = new $ac5a3fca71b6cc65$export$2e2bcd8739ae039({
    selector: '.reviews__stars-icon',
    fullColor: '#ffb700',
    emptyColor: '#eeeeee'
});
$e926bbf749c0d875$var$reviewStars.init();




//# sourceMappingURL=index~ee128dc7.js.map
